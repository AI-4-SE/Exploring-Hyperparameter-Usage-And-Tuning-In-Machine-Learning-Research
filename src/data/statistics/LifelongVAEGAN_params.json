{
    "Assign_Dataset.py": {
        "tensorflow": {}
    },
    "Basic_structure.py": {
        "tensorflow": {
            "reshape_33": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(z, 256 * 8 * 8, 'g_h1_lin')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [batch_size, 8, 8, 256])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn1(h1))",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(tf.contrib.layers.batch_norm(h1))",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(tf.contrib.layers.batch_norm(h1))",
                            "Call"
                        ],
                        [
                            "linear(z, 256 * 8 * 8, 'g_h1_lin')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [batch_size, 8, 8, 256])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn1(h1))",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 8, 8, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn1(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_39": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn2(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn3(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn4(h4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "h5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn5(h5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "h8",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h5, [batch_size, 32, 32, 3], kernel, kernel, 1, 1, name='g_h8')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h8)",
                            "Call"
                        ],
                        [
                            "deconv2d(h6, [batch_size, 64, 64, 3], kernel, kernel, 1, 1, name='g_h8')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h8)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_77": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "variable": {
                    "value": "z_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ],
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ],
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ],
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_105": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_113": {
                "variable": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(h5, continous_len, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(net, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_154": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn(linear(z, 1024, scope='g_fc1'), is_training=is_training, scope='g_bn1')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_155": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn(linear(net, 128 * 7 * 7, scope='g_fc2'), is_training=is_training, scope='g_bn2')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(x, 32, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='flatten3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1024, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='dropout3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(z, 1024, scope='g_fc1'), is_training=is_training, scope='g_bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(net, 128 * 7 * 7, scope='g_fc2'), is_training=is_training, scope='g_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, 7, 7, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(deconv2d(net, [batch_size, 14, 14, 64], 4, 4, 2, 2, name='g_dc3'), is_training=is_training, scope='g_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='e_fc11'), is_training=is_training, scope='c_bn11'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='c_fc1'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat((net, z), axis=1)",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 7, 7, 128]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_157": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "bn(deconv2d(net, [batch_size, 14, 14, 64], 4, 4, 2, 2, name='g_dc3'), is_training=is_training, scope='g_bn3')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "deconv2d(net, [batch_size, 28, 28, 1], 4, 4, 2, 2, name='g_dc4')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_176": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(x, 32, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='flatten3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1024, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='dropout3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(z, 1024, scope='g_fc1'), is_training=is_training, scope='g_bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(net, 128 * 7 * 7, scope='g_fc2'), is_training=is_training, scope='g_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, 7, 7, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(deconv2d(net, [batch_size, 14, 14, 64], 4, 4, 2, 2, name='g_dc3'), is_training=is_training, scope='g_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='e_fc11'), is_training=is_training, scope='c_bn11'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='c_fc1'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat((net, z), axis=1)",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_181": {
                "variable": {
                    "value": "softmaxValue",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_185": {
                "variable": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(h5, continous_len, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(net, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(x, 32, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='flatten3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1024, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='dropout3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(z, 1024, scope='g_fc1'), is_training=is_training, scope='g_bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(net, 128 * 7 * 7, scope='g_fc2'), is_training=is_training, scope='g_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, 7, 7, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(deconv2d(net, [batch_size, 14, 14, 64], 4, 4, 2, 2, name='g_dc3'), is_training=is_training, scope='g_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='e_fc11'), is_training=is_training, scope='c_bn11'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='c_fc1'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat((net, z), axis=1)",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(x, 32, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='flatten3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1024, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='dropout3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(z, 1024, scope='g_fc1'), is_training=is_training, scope='g_bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(net, 128 * 7 * 7, scope='g_fc2'), is_training=is_training, scope='g_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, 7, 7, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(deconv2d(net, [batch_size, 14, 14, 64], 4, 4, 2, 2, name='g_dc3'), is_training=is_training, scope='g_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='e_fc11'), is_training=is_training, scope='c_bn11'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='c_fc1'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat((net, z), axis=1)",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_212": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.conv2d(x, 32, [5, 5], scope='conv1')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool1')",
                            "Call"
                        ],
                        [
                            "slim.conv2d(net, 64, [5, 5], scope='conv2')",
                            "Call"
                        ],
                        [
                            "slim.max_pool2d(net, [2, 2], scope='pool2')",
                            "Call"
                        ],
                        [
                            "slim.flatten(net, scope='flatten3')",
                            "Call"
                        ],
                        [
                            "slim.fully_connected(net, 1024, scope='fc3')",
                            "Call"
                        ],
                        [
                            "slim.dropout(net, is_training=is_training, scope='dropout3')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(z, 1024, scope='g_fc1'), is_training=is_training, scope='g_bn1'))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(linear(net, 128 * 7 * 7, scope='g_fc2'), is_training=is_training, scope='g_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, 7, 7, 128])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(bn(deconv2d(net, [batch_size, 14, 14, 64], 4, 4, 2, 2, name='g_dc3'), is_training=is_training, scope='g_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='e_fc11'), is_training=is_training, scope='c_bn11'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='c_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='c_conv2'), is_training=is_training, scope='c_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='c_fc3'), is_training=is_training, scope='c_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 64, scope='c_fc1'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(conv2d(x, 64, 4, 4, 2, 2, name='d_conv1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(conv2d(net, 128, 4, 4, 2, 2, name='d_conv2'), is_training=is_training, scope='d_bn2'))",
                            "Call"
                        ],
                        [
                            "tf.reshape(net, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat((net, z), axis=1)",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(net, 1024, scope='d_fc3'), is_training=is_training, scope='d_bn3'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ],
                        [
                            "lrelu(bn(linear(h5, 64, scope='e_fc11'), is_training=is_training, scope='c_bn1'))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_222": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(net, z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_227": {
                "variable": {
                    "value": "softmaxValue",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logit2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='d_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_230": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_242": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(z, 256 * 8 * 8, 'g_h1_lin')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [batch_size, 8, 8, 256])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn1(h1))",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(tf.contrib.layers.batch_norm(h1))",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(tf.contrib.layers.batch_norm(h1))",
                            "Call"
                        ],
                        [
                            "linear(z, 256 * 8 * 8, 'g_h1_lin')",
                            "Call"
                        ],
                        [
                            "tf.reshape(h1, [batch_size, 8, 8, 256])",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn1(h1))",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ],
                        [
                            "conv2d(image, 64, kernel, kernel, 2, 2, name='e_h1_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(h1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, 8, 8, 256]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_243": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn1(h1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_248": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn2(h2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_252": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn3(h3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_256": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn4(h4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_260": {
                "variable": {
                    "value": "h5",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn5(h5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_264": {
                "variable": {
                    "value": "h6",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "g_bn6(h6)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_273": {
                "variable": {
                    "value": "h8",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h5, [batch_size, 32, 32, 3], kernel, kernel, 1, 1, name='g_h8')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h8)",
                            "Call"
                        ],
                        [
                            "deconv2d(h6, [batch_size, 64, 64, 3], kernel, kernel, 1, 1, name='g_h8')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(h8)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_295": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_304": {
                "variable": {
                    "value": "softmaxValue",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_308": {
                "variable": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(h5, continous_len, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(net, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_330": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_339": {
                "variable": {
                    "value": "softmaxValue",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_343": {
                "variable": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "z_log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(h5, continous_len, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(net, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ],
                        [
                            "linear(h5, z_dim, 'e_log_sigma_sq')",
                            "Call"
                        ],
                        [
                            "tf.nn.softplus(z_log_sigma_sq)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_365": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_374": {
                "variable": {
                    "value": "softmaxValue",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "out_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='c_fc2')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, 1, scope='d_fc4')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ],
                        [
                            "linear(net, len_discrete_code, scope='e_fc22')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_396": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_402": {
                "variable": {
                    "value": "z_mix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "z_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ],
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ],
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ],
                        [
                            "linear(h5, 1, 'e_mix')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_423": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_449": {
                "variable": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "deconv2d(h3, [batch_size, 32, 32, 256], kernel, kernel, 2, 2, name='g_h4')",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(g_bn4(h4))",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "conv2d(h3, 512, kernel, kernel, 2, 2, name='e_h4_conv')",
                            "Call"
                        ],
                        [
                            "lrelu(d_bn4(h4))",
                            "Call"
                        ],
                        [
                            "tf.reshape(h4, [batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_25": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_60": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_87": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_118": {
                "name_or_scope": {
                    "value": "scopename",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_145": {
                "logits": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slim.fully_connected(net, 4, activation_fn=None, normalizer_fn=None, scope='fco')",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_150": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_192": {
                "name_or_scope": {
                    "value": "classifier",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_205": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_217": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_235": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_278": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_348": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_379": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_406": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_432": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "FID2.py": {
        "tensorflow": {
            "InteractiveSession_23": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "inception_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "activations1",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "activations1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "activations2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "activations2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_37": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_39": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_40": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_41": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RunClassifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_48": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(activations)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_48": {
                "value": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception_activations()",
                            "Call"
                        ],
                        [
                            "tf.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='pool_3:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=8, back_prop=False, swap_memory=True, name='RunClassifier')",
                            "Call"
                        ],
                        [
                            "array_ops.concat(array_ops.unstack(activations), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_43": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=num_splits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Fei_dataset.py": {
        "tensorflow": {
            "rgb_to_grayscale_60": {
                "variable": {
                    "value": "x_train_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x_train_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data['X']",
                            "Subscript"
                        ],
                        [
                            "x_train_hv.transpose(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x_train_hv, (28, 28))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(x_train_hv)",
                            "Call"
                        ],
                        [
                            "tf.Session().run(x_train_hv)",
                            "Call"
                        ],
                        [
                            "x_train_hv.astype('float32') / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rgb_to_grayscale_61": {
                "variable": {
                    "value": "x_test_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x_test_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data['X']",
                            "Subscript"
                        ],
                        [
                            "x_test_hv.transpose(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x_test_hv, (28, 28))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(x_test_hv)",
                            "Call"
                        ],
                        [
                            "tf.Session().run(x_test_hv)",
                            "Call"
                        ],
                        [
                            "x_test_hv.astype('float32') / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_63": {
                "variable": {
                    "value": "x_train_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_63": {
                "variable": {
                    "value": "x_train_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "x_train_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_data['X']",
                            "Subscript"
                        ],
                        [
                            "x_train_hv.transpose(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x_train_hv, (28, 28))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(x_train_hv)",
                            "Call"
                        ],
                        [
                            "tf.Session().run(x_train_hv)",
                            "Call"
                        ],
                        [
                            "x_train_hv.astype('float32') / 255",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Session_64": {
                "variable": {
                    "value": "x_test_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_64": {
                "variable": {
                    "value": "x_test_hv",
                    "type": "variable",
                    "possible_values": []
                },
                "main": {
                    "value": "x_test_hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_data['X']",
                            "Subscript"
                        ],
                        [
                            "x_test_hv.transpose(3, 0, 1, 2)",
                            "Call"
                        ],
                        [
                            "tf.image.resize_images(x_test_hv, (28, 28))",
                            "Call"
                        ],
                        [
                            "tf.image.rgb_to_grayscale(x_test_hv)",
                            "Call"
                        ],
                        [
                            "tf.Session().run(x_test_hv)",
                            "Call"
                        ],
                        [
                            "x_test_hv.astype('float32') / 255",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "HSICSupport.py": {
        "tensorflow": {
            "sqrt_49": {
                "variable": {
                    "value": "dhsic",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_mean(term1) + term2 - 2 * tf.reduce_mean(term3)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_53": {
                "variable": {
                    "value": "reconstruction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(x1 - x2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_57": {
                "variable": {
                    "value": "reconstruction_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(x1 - x2), [1, 2, 3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "logits_with_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_84": {
                "variable": {
                    "value": "logits_with_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_85": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_with_noise * cats_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_90": {
                "variable": {
                    "value": "logits_with_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_91": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_with_noise * cats_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(y1, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "logits_with_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_100": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_with_noise * cats_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(y1, y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_109": {
                "variable": {
                    "value": "logits_with_noise",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "y / temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "samples",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logits_with_noise * cats_range",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_21": {
                "a": {
                    "value": "tf.exp(-gamma * tf.reduce_sum(dist_table ** 2, axis=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "zz * ss",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "x": {
                    "value": "hsic",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "hsic - 2 * tf.reduce_mean(tf.reduce_mean(zz, axis=1) * tf.reduce_mean(ss, axis=1))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_20": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_21": {
                "x": {
                    "value": "-gamma * tf.reduce_sum(dist_table ** 2, axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_34": {
                "input_tensor": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(s, s, gamma=bandwidth(d_s))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_35": {
                "input_tensor": {
                    "value": "ss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(s, s, gamma=bandwidth(d_s))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "term2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "k_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(z_j, z_j, gamma=bandwidth(z_j.get_shape().as_list()[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_44": {
                "variable": {
                    "value": "term3",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "k_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(z_j, z_j, gamma=bandwidth(z_j.get_shape().as_list()[1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "input_tensor": {
                    "value": "tf.square(x1 - x2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_72": {
                "x": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_53": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_57": {
                "x": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_21": {
                "input_tensor": {
                    "value": "dist_table ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "input_tensor": {
                    "value": "k_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(z_j, z_j, gamma=bandwidth(z_j.get_shape().as_list()[1]))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_48": {
                "input_tensor": {
                    "value": "k_j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "K(z_j, z_j, gamma=bandwidth(z_j.get_shape().as_list()[1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_49": {
                "input_tensor": {
                    "value": "term3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(k_j, axis=0)",
                            "Call"
                        ],
                        [
                            "term3 * tf.reduce_mean(k_j, axis=0)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Utlis2.py": {
        "tensorflow": {
            "trainable_variables_38": {
                "variable": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inception.py": {
        "tensorflow": {
            "GraphDef_73": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_75": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_71": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_90": {
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "inception_score.py": {
        "tensorflow": {
            "InteractiveSession_24": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "inception_images",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[BATCH_SIZE, 3, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_32": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "MethodArgument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_bilinear_34": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "MethodArgument"
                        ]
                    ]
                },
                "size": {
                    "value": "[size, size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_35": {
                "variable": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(images, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(images, [size, size])",
                            "Call"
                        ],
                        [
                            "inception_images",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_splits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "map_fn_36": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "fn": {
                    "value": "functools.partial(tfgan.eval.run_inception, output_tensor='logits:0')",
                    "type": "Call",
                    "possible_values": []
                },
                "elems": {
                    "value": "array_ops.stack(generated_images_list)",
                    "type": "Call",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "swap_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "RunClassifier",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "array_ops.unstack(logits)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_43": {
                "value": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception_logits()",
                            "Call"
                        ],
                        [
                            "functional_ops.map_fn(fn=functools.partial(tfgan.eval.run_inception, output_tensor='logits:0'), elems=array_ops.stack(generated_images_list), parallel_iterations=1, back_prop=False, swap_memory=True, name='RunClassifier')",
                            "Call"
                        ],
                        [
                            "array_ops.concat(array_ops.unstack(logits), 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_38": {
                "values": {
                    "value": "generated_images_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.split(images, num_or_size_splits=num_splits)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "get_variable_67": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input_.get_shape()[-1], output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_72": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(conv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "conv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, output_shape[-1], input_.get_shape()[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_96": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(deconv, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "deconv.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_107": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "leak * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_115": {
                "variable": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "Matrix",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[1], output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_117": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(bias_start)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool_126": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "avg_pool_131": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, k, k, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_27": {
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_82": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_transpose_88": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input_.get_shape()[-1], output_dim], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('w', [k_h, k_w, output_shape[-1], input_.get_shape()[-1]], initializer=tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, d_h, d_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "scope or 'Linear'",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_138": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'conv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv2d'",
                            "MethodArgument"
                        ],
                        [
                            "'lrelu'",
                            "MethodArgument"
                        ],
                        [
                            "'batch_norm'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_74": {
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input_, w, strides=[1, d_h, d_w, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(conv, biases), conv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "bias_add_98": {
                "value": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.deconv2d(input_, w, output_shape=output_shape, strides=[1, d_h, d_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(deconv, biases), deconv.get_shape())",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_dim], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ],
                        [
                            "tf.get_variable('biases', [output_shape[-1]], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_116": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_with_logits_141": {
                "logits": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "targets": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_60": {
                "shape": {
                    "value": "[x_shapes[0], x_shapes[1], x_shapes[2], y_shapes[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_68": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_73": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "random_normal_initializer_85": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ],
                        [
                            "0.02",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_initializer_97": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_118": {
                "value": {
                    "value": "bias_start",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_122": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_120": {
                "a": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('Matrix', [shape[1], output_size], tf.float32, tf.random_normal_initializer(stddev=stddev))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "tensorflow": {}
    }
}