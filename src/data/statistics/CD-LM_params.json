{
    "CDA/BERT-HAN/src/utils.py": {
        "sklearn": {
            "accuracy_score_17": {
                "variable": {
                    "value": "output[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(y_prob > 0.5, 1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_26": {
                "variable": {
                    "value": "output[f1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(y_prob > 0.5, 1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_20": {
                "variable": {
                    "value": "output[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_24": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(y_prob > 0.5, 1, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_33": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.mm(feature, weight)",
                            "Call"
                        ],
                        [
                            "feature + bias.expand(feature.size()[0], bias.size()[1])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature_1 * feature_2",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.mm(feature, weight)",
                            "Call"
                        ],
                        [
                            "feature + bias.expand(feature.size()[0], bias.size()[1])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature_1 * feature_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "feature_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.cat(feature_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/utils.py": {
        "sklearn": {
            "accuracy_score_17": {
                "variable": {
                    "value": "output[accuracy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(y_prob > 0.5, 1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_26": {
                "variable": {
                    "value": "output[f1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(y_prob > 0.5, 1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_loss_20": {
                "variable": {
                    "value": "output[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_prob",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "confusion_matrix_24": {
                "y_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.where(y_prob > 0.5, 1, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "cat_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_33": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.mm(feature, weight)",
                            "Call"
                        ],
                        [
                            "feature + bias.expand(feature.size()[0], bias.size()[1])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature_1 * feature_2",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tanh_36": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input",
                            "Name"
                        ],
                        [
                            "torch.mm(feature, weight)",
                            "Call"
                        ],
                        [
                            "feature + bias.expand(feature.size()[0], bias.size()[1])",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(feature).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "feature_1 * feature_2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_36": {
                "variable": {
                    "value": "feature",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_39": {
                "tensors": {
                    "value": "feature_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.cat(feature_list, 0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_49": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/train_bert_g.py": {
        "sklearn": {},
        "torch": {
            "manual_seed_24": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_26": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.train_set, opt.max_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.test_set, opt.max_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_90": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_63": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_65": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_177": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_199": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.saved_path + os.sep + opt.model_type + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cross_encoder/predict_long.py": {
        "sklearn": {
            "AgglomerativeClustering_48": {
                "variable": {
                    "value": "clustering_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_50": {
                "variable": {
                    "value": "clustering_55",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.55",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_52": {
                "variable": {
                    "value": "clustering_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_54": {
                "variable": {
                    "value": "clustering_65",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.65",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_56": {
                "variable": {
                    "value": "clustering_7",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_36": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(device_ids[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_45": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "cross_encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FullCrossEncoder(config, long=seman).to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.gpu_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "topic_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "topic_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CrossEncoderDatasetTopic(data, topic)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "all_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_44": {
                "f": {
                    "value": "os.path.join(subdir_path, 'linear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bert_tokens['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(device_ids[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_100": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bert_tokens['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(device_ids[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_87": {
                "data": {
                    "value": "second",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_109": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "m.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(input_ids, attention_mask, arg1, arg2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cross_encoder/predict_long_test.py": {
        "sklearn": {
            "AgglomerativeClustering_51": {
                "variable": {
                    "value": "clustering_5",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_53": {
                "variable": {
                    "value": "clustering_55",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.55",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_55": {
                "variable": {
                    "value": "clustering_6",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.6",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_57": {
                "variable": {
                    "value": "clustering_65",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.65",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_59": {
                "variable": {
                    "value": "clustering_7",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_61": {
                "variable": {
                    "value": "clustering_75",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.75",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_63": {
                "variable": {
                    "value": "clustering_8",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_65": {
                "variable": {
                    "value": "clustering_85",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.85",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AgglomerativeClustering_67": {
                "variable": {
                    "value": "clustering_9",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "affinity": {
                    "value": "precomputed",
                    "type": "str",
                    "possible_values": []
                },
                "linkage": {
                    "value": "config['linkage_type']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "pyhocon.ConfigFactory.parse_file(args.config)",
                            "Call"
                        ]
                    ]
                },
                "distance_threshold": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "device_40": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:{}'.format(device_ids[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_48": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "cross_encoder",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FullCrossEncoder(config, long=seman).to(device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.gpu_num",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_156": {
                "variable": {
                    "value": "all_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_47": {
                "f": {
                    "value": "os.path.join(path, 'linear')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bert_tokens['input_ids']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(device_ids[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_110": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bert_tokens['attention_mask']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:{}'.format(device_ids[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_96": {
                "data": {
                    "value": "second",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_119": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "m.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model(input_ids, attention_mask, arg1, arg2)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scores)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cross_encoder/train.py": {
        "sklearn": {},
        "torch": {
            "SummaryWriter_26": {
                "variable": {
                    "value": "tb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_35": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CrossEncoderDatasetFull(config, 'train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_37": {
                "variable": {
                    "value": "dev_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CrossEncoderDatasetFull(config, 'dev')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/cite.py": {
        "tensorflow": {
            "cardinality_130": {
                "variable": {
                    "value": "len_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_189": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_185": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_186": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_187": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/cite_OC.py": {
        "tensorflow": {
            "cardinality_130": {
                "variable": {
                    "value": "len_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_189": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_185": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_186": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_187": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/cite_PAN.py": {
        "tensorflow": {
            "cardinality_130": {
                "variable": {
                    "value": "len_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_189": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_185": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_186": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_187": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/cite_S2ORC.py": {
        "tensorflow": {
            "cardinality_130": {
                "variable": {
                    "value": "len_examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "TensorShape_189": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_185": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_186": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_187": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/file_utils.py": {
        "tensorflow": {},
        "torch": {}
    },
    "CDA/BERT-HAN/src/modeling_bert_han.py": {
        "tensorflow": {
            "list_variables_63": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_68": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_112": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_237": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_269": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_288": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_344": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_393": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_433": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_470": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_494": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_817": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_818": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1018": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1019": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1119": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1120": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1215": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_137": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_170": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_703": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_705": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "BCELoss_1001": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1101": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1190": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1309": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_122": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_137": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_244": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_746": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_893": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_896": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_717": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_295": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_129": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/modeling_bert_hansent.py": {
        "tensorflow": {
            "list_variables_63": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_68": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_112": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_154": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_159": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_202": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_237": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_254": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_267": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_269": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_288": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_327": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_344": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_393": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_432": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_433": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_447": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_468": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_470": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_494": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_505": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_817": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_818": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1016": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1017": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1117": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1118": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1213": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_133": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_137": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_170": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_173": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_703": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_705": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_932": {
                "tensors": {
                    "value": "hidden_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_999": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1099": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1188": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1307": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_122": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_129": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_137": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_244": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_470": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_746": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_893": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_896": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_717": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_295": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_129": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/modeling_bert_hansent_dg.py": {
        "tensorflow": {
            "list_variables_62": {
                "variable": {
                    "value": "init_vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_variable_67": {
                "variable": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "tf_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.abspath(tf_checkpoint_path)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "name.split('/')",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_111": {
                "variable": {
                    "value": "pointer.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.train.load_variable(tf_path, name)",
                            "Call"
                        ],
                        [
                            "np.transpose(array)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_151": {
                "variable": {
                    "value": "self.word_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_152": {
                "variable": {
                    "value": "self.position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.max_position_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "variable": {
                    "value": "self.token_type_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.type_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_158": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_199": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_201": {
                "variable": {
                    "value": "self.value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.all_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.attention_probs_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_236": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_query_layer)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_layer.transpose(-1, -2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_253": {
                "variable": {
                    "value": "context_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.Softmax(dim=-1)(attention_scores)",
                            "Call"
                        ],
                        [
                            "self.dropout(attention_probs)",
                            "Call"
                        ],
                        [
                            "attention_probs * head_mask",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "value_layer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.transpose_for_scores(mixed_value_layer)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_266": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_268": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_287": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.self.num_attention_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.self.attention_head_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_326": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_341": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.intermediate_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_343": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_392": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[BertLayer(config) for _ in range(config.num_hidden_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_431": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_432": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_446": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_467": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_469": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(config.vocab_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_493": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_504": {
                "variable": {
                    "value": "self.seq_relationship",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_816": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_817": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1015": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1016": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_1116": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.hidden_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1117": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1212": {
                "variable": {
                    "value": "self.qa_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.num_labels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_136": {
                "input": {
                    "value": "nn.functional.softplus(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_169": {
                "variable": {
                    "value": "position_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "ones_702": {
                "variable": {
                    "value": "attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_704": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ],
                        [
                            "input_ids.size()",
                            "Call"
                        ],
                        [
                            "inputs_embeds.size()[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_931": {
                "tensors": {
                    "value": "hidden_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BCELoss_998": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1098": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1187": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1306": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignored_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_logits.size(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_121": {
                "input": {
                    "value": "x / math.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_128": {
                "input": {
                    "value": "math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_136": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Softmax_243": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_469": {
                "*size": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_745": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "encoder_hidden_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "MSELoss_892": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_895": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_716": {
                "variable": {
                    "value": "seq_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ],
                        [
                            "input_ids.device if input_ids is not None else inputs_embeds.device",
                            "IfExp"
                        ]
                    ]
                }
            },
            "arange_294": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_128": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.view(*new_x_shape)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/run_ex_sent.py": {
        "torch": {
            "DataLoader_105": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_493": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_579": {
                "variable": {
                    "value": "all_labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_101": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_147": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(path)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_151": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(path)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SequentialSampler_301": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples_test(args, eval_task, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_302": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples_test(args, eval_task, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SequentialSampler_364": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples_test(args, eval_task, tokenizer)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_365": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, eval_task, tokenizer, evaluate=True)",
                            "Call"
                        ],
                        [
                            "load_and_cache_examples_test(args, eval_task, tokenizer)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ],
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_457": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('test', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "load_542": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('test', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "device_773": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_774": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_777": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_95": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_104": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_104": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, args.task_name, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_306": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(path)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_369": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(path)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "LongformerForSequenceClassification.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_776": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_872": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_135": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_136": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_479": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('test', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_496": {
                "data": {
                    "value": "all_labs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_564": {
                "obj": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ],
                        [
                            "torch.load(cached_features_file)",
                            "Call"
                        ],
                        [
                            "convert_examples_to_features(examples, tokenizer, label_list=label_list, max_length=args.max_seq_length, output_mode=output_mode, pad_on_left=bool(args.model_type in ['xlnet']), pad_token=tokenizer.convert_tokens_to_ids([tokenizer.pad_token])[0], pad_token_segment_id=4 if args.model_type in ['xlnet'] else 0)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "cached_features_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('dev' if evaluate else 'train', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ],
                        [
                            "os.path.join(args.data_dir, 'cached_{}_{}_{}_{}'.format('test', list(filter(None, args.model_name_or_path.split('/'))).pop(), str(args.max_seq_length), str(task)))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_582": {
                "data": {
                    "value": "all_labs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_383": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__219": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__221": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_260": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_263": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_773": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/bert_avg.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 768",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_24": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_26": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_29": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_54": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/bert_han.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_15": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_60": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/bert_han_dg.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_18": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "word_outputs_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_outputs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "word_outputs_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_outputs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "att_output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_outputs_2, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "att_output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_outputs_1, output_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "doc_eles_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_1, doc_1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "doc_eles_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_2, doc_2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_78": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_92": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_95": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_97": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, input_1 - attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, input_2 - attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/bert_han_sg.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_16": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_list, output.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_71": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/dg_word_att_model.py": {
        "torch": {
            "Linear_12": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "768",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.word_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_16": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.word_weight, self.word_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/modeling_utils.py": {
        "torch": {
            "Linear_1446": {
                "variable": {
                    "value": "new_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "new_size[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "new_size[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "layer.bias is not None",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Embedding_222": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_566": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_863": {
                "variable": {
                    "value": "beam_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_1037": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_1038": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1107": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_1109": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1110": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1124": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1149": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1150": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_1151": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.layer_norm_eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1152": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_1195": {
                "variable": {
                    "value": "self.dense_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_1196": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_1197": {
                "variable": {
                    "value": "self.dense_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Identity_1380": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1388": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1392": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_1396": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_158": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_277": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "full_708": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_819": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_971": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_words.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1303": {
                "variable": {
                    "value": "loss_fct",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_1322": {
                "variable": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.start_logits(hidden_states, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1324": {
                "variable": {
                    "value": "(start_top_log_probs, start_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "start_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(start_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.start_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_1328": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "start_top_index_exp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "start_top_index.unsqueeze(-1).expand(-1, -1, hsz)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_1336": {
                "variable": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.end_logits(hidden_states_expanded, start_states=start_states, p_mask=p_mask)",
                            "Call"
                        ],
                        [
                            "self.end_logits(hidden_states, start_positions=start_positions, p_mask=p_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_1338": {
                "variable": {
                    "value": "(end_top_log_probs, end_top_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "end_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(end_logits, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.end_n_top",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "einsum_1344": {
                "variable": {
                    "value": "start_states",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "blh,bl->bh",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "hidden_states",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_1386": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.num_labels",
                            "Attribute"
                        ],
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Tanh_1390": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_1394": {
                "variable": {
                    "value": "self.first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_first_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_1398": {
                "variable": {
                    "value": "self.last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.summary_last_dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_449": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multinomial_812": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(next_token_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_812": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_815": {
                "variable": {
                    "value": "next_token",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_901": {
                "variable": {
                    "value": "next_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(scores, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_903": {
                "variable": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_904": {
                "variable": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_words)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_words",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.multinomial(F.softmax(scores, dim=-1), num_samples=2)",
                            "Call"
                        ],
                        [
                            "next_words.view(batch_size, 2 * num_beams)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_911": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_917": {
                "variable": {
                    "value": "(next_scores, next_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_words)",
                            "Call"
                        ],
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_1038": {
                "input": {
                    "value": "sorted_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1110": {
                "*size": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_1176": {
                "tensors": {
                    "value": "[hidden_states, start_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1230": {
                "tensors": {
                    "value": "[start_states, cls_token_state]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_1311": {
                "variable": {
                    "value": "loss_fct_cls",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_980": {
                "variable": {
                    "value": "reordered_layer_past",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "reordered_layer_past",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[layer_past[:, i].unsqueeze(1).clone().detach() for i in beam_idx]",
                            "ListComp"
                        ],
                        [
                            "torch.cat(reordered_layer_past, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_901": {
                "input": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "F.log_softmax(scores, dim=-1)",
                            "Call"
                        ],
                        [
                            "scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_1033": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "full_like_1415": {
                "variable": {
                    "value": "cls_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden_states[..., :1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "hidden_states.shape[-2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_812": {
                "input": {
                    "value": "next_token_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "next_token_logits / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(next_token_logits, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/BERT-HAN/src/sent_att_model_bert.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.sent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.sent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * word_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDA/get_rep.py": {
        "torch": {
            "full_239": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "args.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_247": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, args.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_256": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_276": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "RandomSampler(train_dataset) if args.local_rank == -1 else DistributedSampler(train_dataset)",
                            "IfExp"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_470": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_471": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=True)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_506": {
                "variable": {
                    "value": "perplexity",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor(eval_loss)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_194": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SummaryWriter_266": {
                "variable": {
                    "value": "tb_writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_319": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_323": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_477": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir)",
                            "Call"
                        ],
                        [
                            "model_class(config=config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.output_dir)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_707": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_708": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_711": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "self.examples[item]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_196": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_243": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[tokenizer.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_251": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_273": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_275": {
                "data_source": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_275": {
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "load_and_cache_examples(args, tokenizer, evaluate=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_468": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_506": {
                "data": {
                    "value": "eval_loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Constant"
                        ],
                        [
                            "eval_loss / nb_eval_steps",
                            "BinOp"
                        ],
                        [
                            "eval_loss + lm_loss.mean().item()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "set_device_710": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_812": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bernoulli_255": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_272": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_307": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_308": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_sequence_467": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_493": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_706": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_251": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_grad_norm__400": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__402": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_431": {
                "obj": {
                    "value": "args",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_436": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_437": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_707": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "full_255": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_att.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_17": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_list, output.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_82": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_att_s.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_11": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_17": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_list, output.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_93": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_average.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_1))",
                            "Call"
                        ],
                        [
                            "output_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_1))",
                            "Call"
                        ],
                        [
                            "output_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_baseline.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_19": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_19": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_28": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_cos.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_17": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_50": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_62": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_63": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 1)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_66": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_69": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_70": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 1)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_75": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_78": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 1)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, output_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_coss.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_17": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_32": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_34": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_38": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_48": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_1))",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_61": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_67": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_1))",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_68": {
                "variable": {
                    "value": "output_2_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.r(self.mlp(output_2))",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_2, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_han_dg_g.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_16": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_1, doc_1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_2, doc_1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_48": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_49": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_52": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_62": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_67": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, input_1 - attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, input_2 - attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_87": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_94": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((sents_2, doc_1.unsqueeze(0)), 0)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_98": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_han_g.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_15": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_30": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_35": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_38": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_61": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_77": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_2, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_han_s.py": {
        "torch": {
            "Sigmoid_9": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_10": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_15": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_31": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_han_sg_g.py": {
        "torch": {
            "Sigmoid_10": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GRU_16": {
                "variable": {
                    "value": "self.sent_gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_list, output.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_44": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_45": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_48": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_49": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.encode(input_2)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_83": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_random.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vector_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_17": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_33": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_43": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_44": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_50": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_57": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.mean(output_2, dim=1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "output.size()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "output.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "output.layout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "output.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/bert_sg_average.py": {
        "torch": {
            "Sigmoid_11": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_12": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_13": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * vector_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "50",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_32": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.tokenizer.encode(text, add_special_tokens=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_32": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_43": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_46": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "matmul_47": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_48": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_49": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_59": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((output_1, output_1_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_1[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_60": {
                "variable": {
                    "value": "output_2_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_2, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_68": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_73": {
                "variable": {
                    "value": "output_1_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((output_1, output_1_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_1[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((output_1, output_1_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_74": {
                "variable": {
                    "value": "output_2_doc",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_2, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_80": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.cat((output_2, output_2_doc), dim=1)",
                            "Call"
                        ],
                        [
                            "output_2[:, -1, :].squeeze()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(output_2, 0)",
                            "Call"
                        ],
                        [
                            "output_2.expand(output_1.size())",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/d_graph_hier_mat_model.py": {
        "torch": {
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "word_outputs_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_outputs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "word_outputs_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_outputs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "att_output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_outputs_2, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "att_output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_outputs_1, output_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "doc_eles_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_1, doc_1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "doc_eles_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_2, doc_2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_114": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_122": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/d_graph_hier_mat_model_g.py": {
        "torch": {
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "word_outputs_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_outputs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "word_outputs_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_outputs_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "att_output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_outputs_2, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "att_output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(word_outputs_1, output_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_68": {
                "variable": {
                    "value": "doc_eles_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_1, doc_1.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_69": {
                "variable": {
                    "value": "doc_eles_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sents_2, doc_2.unsqueeze(0))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_79": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_80": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ],
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_85": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ],
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_100": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_116": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_124": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/dataset.py": {
        "torch": {}
    },
    "CDA/src/dataset_1.py": {
        "torch": {}
    },
    "CDA/src/dataset_bert.py": {
        "torch": {
            "tensor_46": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(token_type_ids).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "token_type_ids.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_46": {
                "variable": {
                    "value": "token_type_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_ids).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "input_ids.to('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_47": {
                "variable": {
                    "value": "input_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/dataset_bert_3.py": {
        "torch": {}
    },
    "CDA/src/dataset_bert_4.py": {
        "torch": {}
    },
    "CDA/src/dataset_bert_4_wdoc.py": {
        "torch": {}
    },
    "CDA/src/dataset_bert_pla.py": {
        "torch": {}
    },
    "CDA/src/dataset_g.py": {
        "torch": {}
    },
    "CDA/src/dataset_g_1.py": {
        "torch": {}
    },
    "CDA/src/dataset_g_pla.py": {
        "torch": {}
    },
    "CDA/src/dataset_pla.py": {
        "torch": {}
    },
    "CDA/src/dg_word_att_model.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([unknown_word, dict], axis=0).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.word_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dict_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict_len + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_23": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lookup(input)",
                            "Call"
                        ],
                        [
                            "matrix_mul(f_output, self.word_weight, self.word_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/graph_hier_mat_model.py": {
        "torch": {
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/graph_hier_mat_model_1.py": {
        "torch": {
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_42": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_55": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/graph_hier_mat_model_g.py": {
        "torch": {
            "CosineSimilarity_13": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_14": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_17": {
                "variable": {
                    "value": "self.mlp_graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_33": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_51": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_52": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_53": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_57": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_58": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_84": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_96": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/hierarchical_att_model.py": {
        "torch": {
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/hierarchical_att_model_g.py": {
        "torch": {
            "CosineSimilarity_12": {
                "variable": {
                    "value": "self.cos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_13": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_14": {
                "variable": {
                    "value": "self.fd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "4 * sent_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self.ff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "sent_hidden_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "self.word_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.word_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "self.sent_hidden_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "last_batch_size",
                            "Name"
                        ],
                        [
                            "self.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.sent_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_36": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2.permute(0, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "a_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(input_1, input_2.permute(0, 2, 1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "variable": {
                    "value": "attention_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_x.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "input_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_1.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_42": {
                "variable": {
                    "value": "attention_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(a, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "input_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_2.permute(1, 0, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_43": {
                "variable": {
                    "value": "output_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_1, attention_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_44": {
                "variable": {
                    "value": "output_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input_2, attention_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1_doc, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_81": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.ff(output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_1, output_1_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "output_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_2, output_2_doc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "Att",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(Att, output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "tensors": {
                    "value": "output_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/sent_att_model.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.sent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.sent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * word_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDA/src/sent_att_model_1.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.sent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.sent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * word_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_46": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDA/src/sent_att_model_bert.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_14": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_15": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.sent_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.sent_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * sent_hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * sent_hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRU_27": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "2 * word_hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "matrix_mul(f_output, self.sent_weight, self.sent_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0)).squeeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDA/src/word_att_model.py": {
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.concatenate([unknown_word, dict], axis=0).astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.word_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_20": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_22": {
                "variable": {
                    "value": "self.lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "dict_len",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dict_len + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "GRU_23": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embed_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lookup(input)",
                            "Call"
                        ],
                        [
                            "matrix_mul(f_output, self.word_weight, self.word_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output, dim=1)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "CDA/src/word_att_model_1.py": {
        "torch": {
            "Parameter_12": {
                "variable": {
                    "value": "self.word_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_13": {
                "variable": {
                    "value": "self.word_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(1, 2 * hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.context_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(2 * hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_18": {
                "variable": {
                    "value": "self.lookup",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.embeddings.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embeddings.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.lookup.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_22": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.embeddings.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_37": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lookup(input)",
                            "Call"
                        ],
                        [
                            "matrix_mul(f_output, self.word_weight, self.word_bias)",
                            "Call"
                        ],
                        [
                            "matrix_mul(output, self.context_weight).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "F.softmax(output)",
                            "Call"
                        ],
                        [
                            "element_wise_mul(f_output, output.permute(1, 0))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "CDA/test.py": {
        "torch": {
            "DataLoader_39": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.data_path, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_58": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_37": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/test_bert_g.py": {
        "torch": {
            "cat_38": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_61": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_97": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.data_path, opt.max_len)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_121": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_92": {
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/test_bert_g_onestep.py": {
        "torch": {
            "cat_56": {
                "variable": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_134": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.data_path)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_158": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_53": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.multiply(i, j)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos)",
                            "Call"
                        ],
                        [
                            "pos.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "test_set.get_pos()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_131": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_129": {
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/test_pla_bert.py": {
        "torch": {
            "cat_58": {
                "variable": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.data_path, opt.pos_path, opt.max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_160": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.multiply(i, j)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos)",
                            "Call"
                        ],
                        [
                            "pos.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "test_set.get_pos()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_128": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_133": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/test_pla_mask_onestep.py": {
        "torch": {
            "cat_46": {
                "variable": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_82": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.data_path, opt.pos_path, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.multiply(i, j)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos)",
                            "Call"
                        ],
                        [
                            "pos.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "test_set.get_pos()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_142": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_139": {
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/test_state_dict_mask_onestep.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pos_list",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pos_list, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_51": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pred_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pred_pos.transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "pred_pos.numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ],
                        [
                            "torch.cat(pred_pos, dim=1)",
                            "Call"
                        ],
                        [
                            "masking(pred_pos, mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_143": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.data_path, opt.word2vec_path, 21, 39)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_169": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_42": {
                "variable": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.multiply(i, j)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(pos)",
                            "Call"
                        ],
                        [
                            "pos.unsqueeze(dim=1)",
                            "Call"
                        ],
                        [
                            "test_set.get_pos()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_140": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "opt.pre_trained_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/train.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.train_set, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.test_set, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_104": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_105": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_59": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_192": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_216": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HierGraphNet(opt.word_hidden_size, opt.sent_hidden_size, opt.batch_size, freeze, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ],
                        [
                            "DHierGraphNet(opt.word_hidden_size, opt.sent_hidden_size, opt.batch_size, freeze, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ],
                        [
                            "HierAttNet(opt.word_hidden_size, opt.sent_hidden_size, opt.batch_size, freeze, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.saved_path + os.sep + opt.model_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "CDA/train_g.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "42",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "training_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "training_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.train_set, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "test_generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MyDataset(opt.test_set, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "BCELoss_101": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_165": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_56": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "te_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "te_pred_ls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_224": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "HierGraphNet(opt.word_hidden_size, opt.sent_hidden_size, opt.batch_size, freeze, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ],
                        [
                            "DHierGraphNet(opt.word_hidden_size, opt.sent_hidden_size, opt.batch_size, freeze, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ],
                        [
                            "HierAttNet(opt.word_hidden_size, opt.sent_hidden_size, opt.batch_size, freeze, opt.word2vec_path, max_sent_length, max_word_length)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.saved_path + os.sep + opt.model_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_225": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.saved_path + os.sep + opt.model_name + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "cross_encoder/corpus.py": {
        "torch": {
            "tensor_49": {
                "data": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[0] * len(doc_ids)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "cross_encoder/dataset.py": {
        "torch": {
            "tensor_52": {
                "variable": {
                    "value": "self.mention_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[m['cluster_id'] for m in self.mentions]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "self.first",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.first",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "self.second",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.second",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_82": {
                "variable": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "mentions",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mentions",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(mentions)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_314": {
                "data": {
                    "value": "second",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "data": {
                    "value": "second",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "cross_encoder/evaluator.py": {
        "torch": {}
    },
    "cross_encoder/models.py": {
        "torch": {
            "zeros_21": {
                "variable": {
                    "value": "self.padded_vector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.bert_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.self_attention_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(config.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_30": {
                "variable": {
                    "value": "self.width_feature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.embedding_dimension",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_35": {
                "variable": {
                    "value": "padded_tokens_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat((emb, self.padded_vector.repeat(max_length - len(emb), 1))) for emb in continuous_embeddings]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_39": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat((torch.ones(len(emb), device=self.device), torch.zeros(max_length - len(emb), device=self.device))) for emb in continuous_embeddings]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(config.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_99": {
                "variable": {
                    "value": "self.pairwise_mlp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(config.dropout)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_54": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "attention_scores != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attention_layer(padded_tokens_embeddings).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "attention_scores * masks",
                            "BinOp"
                        ],
                        [
                            "torch.where(attention_scores != 0, attention_scores, torch.tensor(-9000000000.0, device=self.device))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(-9000000000.0, device=self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_56": {
                "variable": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.self_attention_layer(padded_tokens_embeddings).squeeze(-1)",
                            "Call"
                        ],
                        [
                            "attention_scores * masks",
                            "BinOp"
                        ],
                        [
                            "torch.where(attention_scores != 0, attention_scores, torch.tensor(-9000000000.0, device=self.device))",
                            "Call"
                        ],
                        [
                            "F.softmax(attention_scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vector, weighted_sum)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_61": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.clamp(width, max=4)",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(vector, width_embedding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_size, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.hidden_size * 4, self.hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "self.bert_hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_27": {
                "in_features": {
                    "value": "config.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_76": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "in_features": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "config.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_100": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "in_features": {
                    "value": "self.input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_103": {
                "in_features": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_104": {
                "p": {
                    "value": "config.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_106": {
                "in_features": {
                    "value": "self.hidden_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "tensors": {
                    "value": "(first, second, first * second)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_36": {
                "tensors": {
                    "value": "(emb, self.padded_vector.repeat(max_length - len(emb), 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_40": {
                "tensors": {
                    "value": "(torch.ones(len(emb), device=self.device), torch.zeros(max_length - len(emb), device=self.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "-9000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "in_features": {
                    "value": "self.hidden_size * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_149": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "tensors": {
                    "value": "[cls_vector, arg1_vec, arg2_vec, arg1_vec * arg2_vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_41": {
                "*size": {
                    "value": "len(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "max_length - len(emb)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "cross_encoder/utils.py": {
        "torch": {
            "manual_seed_74": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_79": {
                "seed": {
                    "value": "config.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "HingeEmbeddingLoss_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_95": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "config.adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_99": {
                "params": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "parameters + list(model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "config.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pretraining/cdmlm_data_collector.py": {
        "torch": {
            "full_126": {
                "variable": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.mlm_probability",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_135": {
                "variable": {
                    "value": "masked_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probability_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.full(labels.shape, self.mlm_probability)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_144": {
                "variable": {
                    "value": "random_words",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "len(self.tokenizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_146": {
                "variable": {
                    "value": "global_attention_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs[:, 0, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_57": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "batch[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "[getattr(f, k) for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_104": {
                "tensors": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_sequence_111": {
                "sequences": {
                    "value": "examples",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "self.tokenizer.pad_token_id",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_130": {
                "data": {
                    "value": "special_tokens_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self.get_special_tokens_mask(val, already_has_special_tokens=True) for val in labels.tolist()]",
                            "ListComp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_139": {
                "input": {
                    "value": "torch.full(labels.shape, 0.8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bernoulli_143": {
                "input": {
                    "value": "torch.full(labels.shape, 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_148": {
                "start": {
                    "value": "masked_indices.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "full_139": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "full_143": {
                "size": {
                    "value": "labels.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "pretraining/corpus_preprocessing.py": {
        "torch": {
            "tensor_198": {
                "data": {
                    "value": "self.examples[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}