{
    "lib/config.py": {
        "torch": {}
    },
    "lib/datasets/unaligned_dataset.py": {
        "torch": {}
    },
    "lib/discriminators/multires_patch.py": {
        "torch": {
            "interpolate_65": {
                "variable": {
                    "value": "input_downsampled",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_downsampled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "nn.functional.interpolate(input_downsampled, scale_factor=0.5, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/discriminators/patch.py": {
        "torch": {
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_33": {
                "variable": {
                    "value": "self.leaky_relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.conv_norm_relus",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            }
        }
    },
    "lib/experiment.py": {
        "torch": {
            "SummaryWriter_34": {
                "variable": {
                    "value": "self.tensorboard_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(tensorboard_dir, exp_name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_107": {
                "variable": {
                    "value": "train_state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "train_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_156": {
                "variable": {
                    "value": "images_A",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(domain_A['real'].data[:n_imgs], domain_A['fake'].data[:n_imgs], domain_A['rec'].data[:n_imgs], domain_A['idt'].data[:n_imgs])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_184": {
                "variable": {
                    "value": "images_B",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(domain_B['real'].data[:n_imgs], domain_B['fake'].data[:n_imgs], domain_B['rec'].data[:n_imgs], domain_B['idt'].data[:n_imgs])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_114": {
                "obj": {
                    "value": "{'epoch': epoch, 'model': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "train_state_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ],
                        [
                            "self.get_checkpoint_path(epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_102": {
                "f": {
                    "value": "self.get_checkpoint_path(epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/generators/residual_generator.py": {
        "torch": {
            "Sequential_65": {
                "variable": {
                    "value": "self.encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*encoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.transform",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*resblocks",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*decoder",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_40": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_93": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tanh_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/generators/shared_weight_resgen.py": {
        "torch": {
            "Sequential_58": {
                "variable": {
                    "value": "self.enc_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*enc_shared",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.dec_shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*dec_shared",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.encode_A(x_A), self.encode_B(x_B))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_72": {
                "variable": {
                    "value": "(x_Aa, x_Ba)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode_A(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x_A.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_73": {
                "variable": {
                    "value": "(x_Ab, x_Bb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decode_B(out)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "x_A.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/conv_norm_relu.py": {
        "torch": {
            "Sequential_58": {
                "variable": {
                    "value": "self.apply_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_55": {
                "negative_slope": {
                    "value": "leaky",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_38": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/gaussian_noise.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "lib/layers/residual_block.py": {
        "torch": {
            "Conv2d_22": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LeakyReLU_32": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "leaky",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "lib/models/cycle_gan.py": {
        "torch": {
            "LambdaLR_192": {
                "variable": {
                    "value": "self.schedulers[optim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizers[optim]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "LambdaLR(cfgs['epochs'], starting_epoch, cfgs['decay_epoch']).step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_96": {
                "input": {
                    "value": "pred_fake_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_B(fake_B)",
                            "Call"
                        ],
                        [
                            "self.D_B(fake_B_buff.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_98": {
                "input": {
                    "value": "pred_fake_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_A(fake_A)",
                            "Call"
                        ],
                        [
                            "self.D_A(fake_A_buff.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_140": {
                "input": {
                    "value": "pred_fake_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_A(fake_A)",
                            "Call"
                        ],
                        [
                            "self.D_A(fake_A_buff.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_142": {
                "input": {
                    "value": "pred_real_A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_A(real_A)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_152": {
                "input": {
                    "value": "pred_fake_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_B(fake_B)",
                            "Call"
                        ],
                        [
                            "self.D_B(fake_B_buff.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_154": {
                "input": {
                    "value": "pred_real_B",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.D_B(real_B)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/runner.py": {
        "torch": {
            "DataLoader_111": {
                "variable": {
                    "value": "data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cfg.get_dataset(split)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "worker_init_fn": {
                    "value": "self._worker_init_fn_",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initial_seed_122": {
                "variable": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_33": {
                "seed": {
                    "value": "cfg['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "device_40": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/get_norm_layer.py": {
        "torch": {}
    },
    "utils/init_weight.py": {
        "torch": {}
    },
    "utils/replay_buffer.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(return_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_20": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "utils/save_image.py": {
        "torch": {}
    }
}