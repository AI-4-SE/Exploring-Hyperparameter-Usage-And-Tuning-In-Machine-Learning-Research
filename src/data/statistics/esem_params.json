{
    "esem/__init__.py": {
        "sklearn": {
            "RandomForestRegressor_296": {
                "n_estimators": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "*",
                    "type": "kwargs",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Input_233": {
                "variable": {
                    "value": "latent_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(training_params.shape[1],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Model_251": {
                "variable": {
                    "value": "decoder",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "latent_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Input((training_params.shape[1],))",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2DTranspose(filters=data.process_wrapper.data.shape[-1], kernel_size=kernel_size, activation=activation, strides=1, padding='same', data_format='channels_last')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_235": {
                "units": {
                    "value": "np.product(intermediate_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Reshape_236": {
                "target_shape": {
                    "value": "intermediate_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.process_wrapper.data.shape[1:-1] + (filters,)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2DTranspose_238": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_244": {
                "filters": {
                    "value": "data.process_wrapper.data.shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'tanh'",
                            "MethodArgument"
                        ]
                    ]
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_89": {
                "value": {
                    "value": "noise_variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "wrapped_data.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "floatx_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "esem/utils.py": {
        "sklearn": {
            "LassoLarsIC_418": {
                "variable": {
                    "value": "lsvc",
                    "type": "variable",
                    "possible_values": []
                },
                "criterion": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'bic'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SelectFromModel_419": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "lsvc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LassoLarsIC(criterion=criterion).fit(X, y)",
                            "Call"
                        ]
                    ]
                },
                "prefit": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "r2_score_38": {
                "y_true": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "median_absolute_error_39": {
                "y_true": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mean_squared_error_40": {
                "y_true": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "truth",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "py_function_387": {
                "func": {
                    "value": "self.update",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inp": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "esem/abc_sampler.py": {
        "tensorflow": {
            "cast_153": {
                "variable": {
                    "value": "total_obs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_prod(tf.shape(implausibility)[1:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "implausibility.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_155": {
                "variable": {
                    "value": "abs_tolerance",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(tolerance, dtype=implausibility.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "total_obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.reduce_prod(tf.shape(implausibility)[1:]), dtype=implausibility.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_160": {
                "variable": {
                    "value": "n_implausible",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(tf.greater(implausibility, threshold), dtype=implausibility.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "range(1, len(implausibility.shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_206": {
                "variable": {
                    "value": "all_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "all_implausibility",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(0,) + obs.shape",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "sample_points.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "samples_i",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(0, model.n_params + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_265": {
                "variable": {
                    "value": "i0",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_267": {
                "variable": {
                    "value": "(_, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda i, m: i < n_sample_points",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "lambda i, m: [i + 1, tf.concat([m, get_valid_sample(model, obs, dist, threshold, tolerance, total_variance)], axis=0)]",
                    "type": "Lambda",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[i0, samples_i]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[i0.get_shape(), tf.TensorShape([None, model.n_params + 1])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_277": {
                "variable": {
                    "value": "n_iterations",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "iterations",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_295": {
                "variable": {
                    "value": "count",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_296": {
                "variable": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda x, i: tf.math.logical_not(is_valid_sample(model, obs, x, threshold, tolerance, total_variance))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "lambda x, i: (dist.sample(), i + 1.0)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(valid, count)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "function_281": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_318": {
                "variable": {
                    "value": "tot_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(emulator_var, total_variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_equal_164": {
                "x": {
                    "value": "n_implausible",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.cast(tf.greater(implausibility, threshold), dtype=implausibility.dtype), axis=range(1, len(implausibility.shape)))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "abs_tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.constant(tolerance, dtype=implausibility.dtype), total_obs)",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_169": {
                "x": {
                    "value": "tf.abs(tf.subtract(emulator_mean, obs))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tot_sd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sqrt(tf.add(emulator_var, total_variance))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.add(emulator_var, total_variance))",
                            "Call"
                        ],
                        [
                            "tf.sqrt(tf.add(emulator_var, total_variance))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_212": {
                "variable": {
                    "value": "tot_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(emulator_var, total_variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_216": {
                "variable": {
                    "value": "all_valid",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[all_valid, valid_samples]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_243": {
                "variable": {
                    "value": "tot_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(emulator_var, total_variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_246": {
                "variable": {
                    "value": "all_implausibility",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[all_implausibility, implausibility]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "tensor": {
                    "value": "tf.concat(valid, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_prod_153": {
                "input_tensor": {
                    "value": "tf.shape(implausibility)[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_155": {
                "value": {
                    "value": "tolerance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "implausibility.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_160": {
                "x": {
                    "value": "tf.greater(implausibility, threshold)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "implausibility.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_169": {
                "x": {
                    "value": "tf.subtract(emulator_mean, obs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_301": {
                "values": {
                    "value": "valid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist.sample()",
                            "Call"
                        ],
                        [
                            "tf.while_loop(lambda x, i: tf.math.logical_not(is_valid_sample(model, obs, x, threshold, tolerance, total_variance)), lambda x, i: (dist.sample(), i + 1.0), loop_vars=(valid, count))",
                            "Call"
                        ],
                        [
                            "constrain(implausibility, tolerance, threshold)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_317": {
                "tensor": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "add_318": {
                "x": {
                    "value": "emulator_var",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "total_variance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "greater_160": {
                "x": {
                    "value": "implausibility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calc_implausibility(emulator_mean, obs, tot_sd)",
                            "Call"
                        ],
                        [
                            "_calc_implausibility(emulator_mean, obs, tot_sd)",
                            "Call"
                        ],
                        [
                            "_calc_implausibility(emulator_mean, obs, tot_sd)",
                            "Call"
                        ],
                        [
                            "_tf_implausibility(self.model, self.obs, sample_points, self.total_var, batch_size=batch_size, pbar=tf_tqdm(batch_size=batch_size, total=sample_points.shape[0]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "MethodArgument"
                        ],
                        [
                            "3.0",
                            "MethodArgument"
                        ],
                        [
                            "3.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "subtract_169": {
                "x": {
                    "value": "emulator_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_212": {
                "x": {
                    "value": "emulator_var",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "total_variance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_243": {
                "x": {
                    "value": "emulator_var",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "total_variance",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "logical_not_297": {
                "x": {
                    "value": "is_valid_sample(model, obs, x, threshold, tolerance, total_variance)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_153": {
                "input": {
                    "value": "implausibility",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_calc_implausibility(emulator_mean, obs, tot_sd)",
                            "Call"
                        ],
                        [
                            "_calc_implausibility(emulator_mean, obs, tot_sd)",
                            "Call"
                        ],
                        [
                            "_calc_implausibility(emulator_mean, obs, tot_sd)",
                            "Call"
                        ],
                        [
                            "_tf_implausibility(self.model, self.obs, sample_points, self.total_var, batch_size=batch_size, pbar=tf_tqdm(batch_size=batch_size, total=sample_points.shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_270": {
                "values": {
                    "value": "[m, get_valid_sample(model, obs, dist, threshold, tolerance, total_variance)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_273": {
                "dims": {
                    "value": "[None, model.n_params + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "shape": {
                    "value": "self.model.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_43": {
                "shape": {
                    "value": "self.model.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "esem/data_processors.py": {
        "tensorflow": {
            "exp_70": {
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_70": {
                "value": {
                    "value": "self.constant",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "tensor": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[..., 0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,) + self.original_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variance[..., 0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,) + self.original_shape[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_71": {
                "x": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mean[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "esem/emulator.py": {
        "tensorflow": {
            "constant_167": {
                "variable": {
                    "value": "tot_s",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "model.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_168": {
                "variable": {
                    "value": "tot_s2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "model.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_178": {
                "variable": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "n_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(sample_points)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cast(n_samples, dtype=model.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "model.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "variable": {
                    "value": "sd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(tot_s2 - tot_s * tot_s / n_samples) / (n_samples - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_165": {
                "input": {
                    "value": "sample_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_points.to_numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_175": {
                "input_tensor": {
                    "value": "emulator_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_176": {
                "input_tensor": {
                    "value": "tf.square(emulator_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_59": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_176": {
                "x": {
                    "value": "emulator_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_151": {
                "value": {
                    "value": "sample_points",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sample_points.to_numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_152": {
                "value": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "esem/sampler.py": {
        "tensorflow": {
            "sqrt_184": {
                "variable": {
                    "value": "total_sd",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(emulator_var, obs_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_185": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obs.data",
                            "Attribute"
                        ]
                    ]
                },
                "y": {
                    "value": "emulator_mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_sum_215": {
                "input_tensor": {
                    "value": "diff_dist.log_prob(diff)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_184": {
                "x": {
                    "value": "emulator_var",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "obs_var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_213": {
                "shape": {
                    "value": "diff.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_175": {
                "x": {
                    "value": "tf.minimum(log_accept_ratio, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_175": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_193": {
                "shape": {
                    "value": "(1, model.n_params)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float64",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "shape": {
                    "value": "diff.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "self.model.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_158": {
                "shape": {
                    "value": "self.model.n_params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_175": {
                "x": {
                    "value": "log_accept_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "esem/wrappers.py": {
        "tensorflow": {
            "ones_like_47": {
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_47": {
                "value": {
                    "value": "[float('NaN')]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/__init__.py": {
        "tensorflow": {
            "experimental_run_functions_eagerly_4": {
                "run_eagerly": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_mcmc_sampler.py": {
        "tensorflow": {
            "zeros_14": {
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_15": {
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_100": {
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}