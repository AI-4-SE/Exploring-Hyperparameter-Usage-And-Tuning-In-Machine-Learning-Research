{
    "direct_intrinsics_sn.py": {
        "torch": {
            "DirectIntrinsicsSN_7": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.input_channels": {
                    "value": "input_channels",
                    "possible_values": []
                },
                "self.targets": {
                    "value": "targets",
                    "possible_values": []
                },
                "self.deconv_param": {
                    "value": "deconv_param",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "Sequential_19": {
                    "variable": {
                        "value": "self.conv0",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(input_channels, 16, 3, 1, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_25": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(16, 32, 3, 2, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_31": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(32, 64, 3, 2, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_37": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(64, 128, 3, 2, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_43": {
                    "variable": {
                        "value": "self.conv4",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(128, 256, 3, 2, 1)",
                        "possible_values": []
                    }
                },
                "Sequential_49": {
                    "variable": {
                        "value": "self.conv5",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(256, 256, 3, 2, 1)",
                        "possible_values": []
                    }
                },
                "ModuleList_57": {
                    "variable": {
                        "value": "self.mid",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_80": {
                    "variable": {
                        "value": "self.deconv0",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_91": {
                    "variable": {
                        "value": "self.deconv1",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_102": {
                    "variable": {
                        "value": "self.deconv2",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_113": {
                    "variable": {
                        "value": "self.deconv3",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_124": {
                    "variable": {
                        "value": "self.deconv4",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "ModuleList_137": {
                    "variable": {
                        "value": "self.output",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                }
            },
            "cat_176": {
                "variable": {
                    "value": "xmid",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv(x5) for deconv in self.mid] + [x5]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "x0d",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv(xmid) for deconv in self.deconv0] + [x4]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "x1d",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv(x0d) for deconv in self.deconv1] + [x3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "x2d",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv(x1d) for deconv in self.deconv2] + [x2]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "x3d",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv(x2d) for deconv in self.deconv3] + [x1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_182": {
                "variable": {
                    "value": "x4d",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[deconv(x3d) for deconv in self.deconv4] + [x0]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256, 256, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 * (self.num_targets + 1), 256, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(256 * (self.num_targets + 1), 128, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128 * (self.num_targets + 1), 64, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(64 * (self.num_targets + 1), 32, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_127": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32 * (self.num_targets + 1), 16, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "deconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(16 * (self.num_targets + 1), 16, 3, 1, 1)",
                    "possible_values": []
                }
            },
            "softmax_188": {
                "variable": {
                    "value": "x_out[seg_index]",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out[seg_index]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "input_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "num_features": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "ReLU_22": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_52": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_162": {
                "in_channels": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_channels",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Upsample_164": {
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_70": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "256 * (self.num_targets + 1)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "in_channels": {
                    "value": "256 * (self.num_targets + 1)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_96": {
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "128 * (self.num_targets + 1)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "64 * (self.num_targets + 1)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_118": {
                "num_features": {
                    "value": "32",
                    "possible_values": []
                }
            },
            "ReLU_119": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "32 * (self.num_targets + 1)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_129": {
                "num_features": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "ReLU_130": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "in_channels": {
                    "value": "16 * (self.num_targets + 1)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_141": {
                "num_features": {
                    "value": "16",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "output_dims[i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "output_dims[i]",
                    "possible_values": []
                }
            },
            "ReLU_145": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "infer.py": {
        "torch": {
            "from_numpy_125": {
                "variable": {
                    "value": "rgb",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "in_",
                    "possible_values": [
                        [
                            "im.resize((352, 480), Image.ANTIALIAS)",
                            "Call"
                        ],
                        [
                            "np.array(in_, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "in_.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "in_.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "(in_ * 255 / np.max(in_)).astype('uint8')",
                            "Call"
                        ],
                        [
                            "(in_ / 255.0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(in_, axis=0)",
                            "Call"
                        ],
                        [
                            "im.resize((352, 480), Image.ANTIALIAS)",
                            "Call"
                        ],
                        [
                            "np.array(in_, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "in_.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "in_.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "(in_ * 255 / np.max(in_)).astype('uint8')",
                            "Call"
                        ],
                        [
                            "(in_ / 255.0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(in_, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_137": {
                "variable": {
                    "value": "(_, segmentation_pred)",
                    "possible_values": []
                },
                "input": {
                    "value": "segmentation_out.data",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "rgb",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "in_",
                    "possible_values": [
                        [
                            "im.resize((352, 480), Image.ANTIALIAS)",
                            "Call"
                        ],
                        [
                            "np.array(in_, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "in_.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "in_.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "(in_ * 255 / np.max(in_)).astype('uint8')",
                            "Call"
                        ],
                        [
                            "(in_ / 255.0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(in_, axis=0)",
                            "Call"
                        ],
                        [
                            "im.resize((352, 480), Image.ANTIALIAS)",
                            "Call"
                        ],
                        [
                            "np.array(in_, dtype=np.int64)",
                            "Call"
                        ],
                        [
                            "in_.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "in_.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "(in_ * 255 / np.max(in_)).astype('uint8')",
                            "Call"
                        ],
                        [
                            "(in_ / 255.0).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(in_, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_107": {
                "variable": {
                    "value": "(_, segmentation_pred)",
                    "possible_values": []
                },
                "input": {
                    "value": "segmentation_out.data",
                    "possible_values": []
                }
            },
            "load_74": {
                "f": {
                    "value": "os.path.join(output_path, 'checkpoints', 'final.checkpoint')",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "save_62": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "os.path.join(path, 'images', type)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'model.weights')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'model.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_107": {
                "variable": {
                    "value": "pretrained_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "latest",
                    "possible_values": [
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % max(epochs))",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_126": {
                "obj": {
                    "value": "net.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "os.path.join(path, 'images', type)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'model.weights')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'model.weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_76": {
                "f": {
                    "value": "latest",
                    "possible_values": [
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % max(epochs))",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_92": {
                "f": {
                    "value": "latest",
                    "possible_values": [
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % max(epochs))",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_134": {
                "f": {
                    "value": "path",
                    "possible_values": [
                        [
                            "os.path.join(path, 'images', type)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'epoch_%d.checkpoint' % epoch)",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'checkpoints')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'model.weights')",
                            "Call"
                        ],
                        [
                            "os.path.join(path, 'model.weights')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}