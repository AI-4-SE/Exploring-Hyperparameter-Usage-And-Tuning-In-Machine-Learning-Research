{
    "src/data/knowledge_graph.py": {
        "torch": {
            "tensor_89": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sorted(set(map(int, s)).union(map(int, o)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_92": {
                "variable": {
                    "value": "self_loop_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e, p_self_loop, e]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_128": {
                "variable": {
                    "value": "inverse_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o, p_inv, s]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_218": {
                "variable": {
                    "value": "new_triples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1 - dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_877": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(zip(*alignment))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "[triples, self_loop_triples]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_130": {
                "tensors": {
                    "value": "[triples, inverse_triples]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randperm_600": {
                "variable": {
                    "value": "perm",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "entity_alignment.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "generator": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator(device=entity_alignment.device).manual_seed(self.random_seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_932": {
                "data": {
                    "value": "list(id_triples)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_91": {
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(sorted(set(map(int, s)).union(map(int, o))), dtype=torch.long)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_514": {
                "data": {
                    "value": "[[int(_id) for _id in row] for row in _load_file(file_path=triple_path)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Generator_598": {
                "device": {
                    "value": "entity_alignment.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_598": {
                "seed": {
                    "value": "self.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_648": {
                "data": {
                    "value": "[[int(_id) for _id in row] for row in _load_file(file_path=triple_path)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_777": {
                "data": {
                    "value": "sorted_id_alignment[:split_idx, :].T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_778": {
                "data": {
                    "value": "sorted_id_alignment[split_idx:, :].T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_528": {
                "data": {
                    "value": "[[int(e) for e in row] for row in _load_file(file_path=path.join(self.root, fp))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_528": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_662": {
                "data": {
                    "value": "[[int(e) for e in row] for row in _load_file(file_path=path.join(self.root, fp))]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "t_662": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_215": {
                "data": {
                    "value": "[compaction[int(e)] for e in this_column]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "src/gcn_align_runnable.py": {
        "torch": {
            "is_available_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_46": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_188": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_190": {
                "seed": {
                    "value": "params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_221": {
                "tensors": {
                    "value": "[t[:, 0], t[:, 2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_247": {
                "margin": {
                    "value": "3.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/common.py": {
        "torch": {
            "unique_590": {
                "variable": {
                    "value": "(_, inverse, counts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "edge_tensor[1]",
                            "Subscript"
                        ]
                    ]
                },
                "return_counts": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "return_inverse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_591": {
                "variable": {
                    "value": "edge_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_66": {
                "variable": {
                    "value": "norms_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "norms_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_77": {
                "variable": {
                    "value": "inner",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(expanded_1 - expanded_2) ** norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_289": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.as_tensor(tau, dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_460": {
                "variable": {
                    "value": "center_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.num_clusters,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "norm_465": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nodes.unsqueeze(0) - centers.unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmin_466": {
                "variable": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(nodes.unsqueeze(0) - centers.unsqueeze(1), p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_469": {
                "variable": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_508": {
                "variable": {
                    "value": "self.match_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(num_clusters, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_509": {
                "variable": {
                    "value": "self.ref_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(ref_num_clusters, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_543": {
                "variable": {
                    "value": "(match_node_importance, mn2mc_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_match_node_to_match_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.similarity.all_to_all(left=match_nodes, right=self.match_cluster)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_544": {
                "variable": {
                    "value": "(mc2mn_val, mc2mn_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_match_node_to_match_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.similarity.all_to_all(left=match_nodes, right=self.match_cluster)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_546": {
                "variable": {
                    "value": "(mc2rc_val, mc2rc_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_match_cluster_to_ref_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.similarity.all_to_all(left=self.match_cluster, right=self.ref_cluster)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_548": {
                "variable": {
                    "value": "(rc2mc_val, rc2mc_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_match_cluster_to_ref_cluster",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.similarity.all_to_all(left=self.match_cluster, right=self.ref_cluster)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_550": {
                "variable": {
                    "value": "(rc2rn_val, rc2rn_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_ref_cluster_to_ref_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.similarity.all_to_all(left=self.ref_cluster, right=ref_nodes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_552": {
                "variable": {
                    "value": "(rn2rc_val, rn2rc_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_ref_cluster_to_ref_node",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.similarity.all_to_all(left=self.ref_cluster, right=ref_nodes)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_71": {
                "input": {
                    "value": "eps + torch.abs(distances_squared)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_187": {
                "input": {
                    "value": "left * right",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cdist_200": {
                "x1": {
                    "value": "left",
                    "type": "variable",
                    "possible_values": []
                },
                "x2": {
                    "value": "right",
                    "type": "variable",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_292": {
                "input": {
                    "value": "F.gumbel_softmax(pairwise_scores, tau=self.tau, hard=True, dim=1) * pairwise_scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_299": {
                "input": {
                    "value": "F.gumbel_softmax(pairwise_scores, tau=self.tau, hard=True, dim=0) * pairwise_scores",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_299": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_331": {
                "variable": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(float(tau_init))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_345": {
                "variable": {
                    "value": "match_nodes_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.gumbel_softmax(match_reference_similarity, dim=1, tau=self.tau, hard=1) * match_reference_similarity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_351": {
                "variable": {
                    "value": "reference_nodes_importance",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.gumbel_softmax(match_reference_similarity, dim=0, tau=self.tau, hard=1) * match_reference_similarity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_443": {
                "input": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "index_add_470": {
                "input": {
                    "value": "centers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes[center_ind]",
                            "Subscript"
                        ],
                        [
                            "torch.zeros(self.num_clusters, d, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "assignment",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.argmin(dist, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "nodes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_76": {
                "input": {
                    "value": "expanded_1 - expanded_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_207": {
                "input": {
                    "value": "left - right",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_223": {
                "input": {
                    "value": "left - right",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_289": {
                "data": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_508": {
                "*size": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "int"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randn_509": {
                "*size": {
                    "value": "ref_num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_clusters",
                            "variable"
                        ],
                        [
                            "num_clusters",
                            "variable"
                        ]
                    ]
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_71": {
                "input": {
                    "value": "distances_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norms - 2 * sample_1.mm(sample_2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gumbel_softmax_293": {
                "logits": {
                    "value": "pairwise_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_331": {
                "data": {
                    "value": "float(tau_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reciprocal_591": {
                "input": {
                    "value": "counts.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gumbel_softmax_346": {
                "logits": {
                    "value": "match_reference_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_similarity(match_enc, ref_enc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gumbel_softmax_300": {
                "logits": {
                    "value": "pairwise_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gumbel_softmax_352": {
                "logits": {
                    "value": "match_reference_similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_similarity(match_enc, ref_enc)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "tau": {
                    "value": "self.tau",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hard": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/gcn_align.py": {
        "torch": {
            "unique_35": {
                "variable": {
                    "value": "match_edge_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "match_edge_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unique(match_edge_tensor, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unique_36": {
                "variable": {
                    "value": "ref_edge_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ref_edge_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unique(ref_edge_tensor, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_56": {
                "variable": {
                    "value": "self.match_node_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_match_nodes, embedding_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_57": {
                "variable": {
                    "value": "self.ref_node_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_ref_nodes, embedding_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_139": {
                "variable": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_data",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_145": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "index_add_146": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(source_data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "source": {
                    "value": "msg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.index_select(source_data, dim=0, index=source)",
                            "Call"
                        ],
                        [
                            "msg * edge_weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_22": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_117": {
                "variable": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip([self.match_node_embeddings, self.ref_node_embeddings], [self.match_edge_tensor, self.ref_edge_tensor], [self.match_weights, self.ref_weights], [self.match_biases, self.ref_biases], [self.match_edge_weights, self.ref_edge_weights])",
                            "Call"
                        ],
                        [
                            "functional.normalize(node_emb, p=2, dim=1)",
                            "Call"
                        ],
                        [
                            "self.act(hidden)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_56": {
                "*size": {
                    "value": "num_match_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "empty_57": {
                "*size": {
                    "value": "num_ref_nodes",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_68": {
                "variable": {
                    "value": "self.match_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(embedding_dim, embedding_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_69": {
                "variable": {
                    "value": "self.match_biases",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(embedding_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_68": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_71": {
                "data": {
                    "value": "torch.empty(embedding_dim, embedding_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_72": {
                "data": {
                    "value": "torch.zeros(embedding_dim, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_71": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/modules/losses.py": {
        "torch": {
            "randint_257": {
                "variable": {
                    "value": "target_negatives_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "n_target - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(k, self.num_negatives)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_to_target_mapping.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "relu_297": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores - positive_scores.unsqueeze(1) + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_55": {
                "input": {
                    "value": "negatives - positive + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_like_59": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.relu(negatives - positive + self.margin)",
                            "Call"
                        ],
                        [
                            "loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "left_to_right_loss + right_to_left_loss",
                            "BinOp"
                        ],
                        [
                            "self.pair_loss(positive_scores, negative_scores, torch.ones(k * self.num_negatives, device=device))",
                            "Call"
                        ],
                        [
                            "functional.relu(scores - positive_scores.unsqueeze(1) + self.margin)",
                            "Call"
                        ],
                        [
                            "MarginLoss()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MarginRankingLoss_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_299": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "functional.relu(negatives - positive + self.margin)",
                            "Call"
                        ],
                        [
                            "loss * weight",
                            "BinOp"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ],
                        [
                            "left_to_right_loss + right_to_left_loss",
                            "BinOp"
                        ],
                        [
                            "self.pair_loss(positive_scores, negative_scores, torch.ones(k * self.num_negatives, device=device))",
                            "Call"
                        ],
                        [
                            "functional.relu(scores - positive_scores.unsqueeze(1) + self.margin)",
                            "Call"
                        ],
                        [
                            "MarginLoss()",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_269": {
                "*size": {
                    "value": "k * self.num_negatives",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_to_target_mapping.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "arange_295": {
                "start": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matching_target.shape[0]",
                            "Subscript"
                        ],
                        [
                            "matching_target.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_60": {
                "start": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matching_target.shape[0]",
                            "Subscript"
                        ],
                        [
                            "matching_target.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_49": {
                "start": {
                    "value": "num_matches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matching_target.shape[0]",
                            "Subscript"
                        ],
                        [
                            "matching_target.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/modules/mf_contrastive_loss.py": {
        "torch": {
            "sum_22": {
                "variable": {
                    "value": "positive_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(positive_distances - self.positive_margin, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_22": {
                "input": {
                    "value": "positive_distances - self.positive_margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_23": {
                "input": {
                    "value": "torch.clamp(self.negative_margin - positive_distances, min=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "size_mapping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "distance_matrix.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_23": {
                "input": {
                    "value": "self.negative_margin - positive_distances",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils/common.py": {
        "torch": {
            "randperm_40": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "number_mappings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mapping.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_124": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_scores, right_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_131": {
                "variable": {
                    "value": "ind",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_ind, right_ind]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_136": {
                "variable": {
                    "value": "(s_ind, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.argsort(scores)[ind]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_139": {
                "variable": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "2 * k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_143": {
                "variable": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * k + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(fpr[:-1] - fpr[1:]) * tpr[1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[left_ranks, right_ranks]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_198": {
                "variable": {
                    "value": "return_d[fhits_at_{k}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(ranks <= k).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_354": {
                "variable": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "split",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0]",
                            "List"
                        ],
                        [
                            "torch.tensor(split, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_355": {
                "variable": {
                    "value": "mask_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.cat(batch_indices, dim=0), torch.cat(entity_indices, dim=0)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_129": {
                "start": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_values",
                            "variable"
                        ]
                    ]
                }
            },
            "mean_194": {
                "input": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([left_ranks, right_ranks], dim=0)",
                            "Call"
                        ],
                        [
                            "compute_ranks_for_mapping(left_to_all_right_dist=left_to_all_right_dist, right_to_all_left_dist=right_to_all_left_dist, mapping=mapping)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_195": {
                "input": {
                    "value": "torch.reciprocal(ranks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_130": {
                "start": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k_values",
                            "variable"
                        ]
                    ]
                }
            },
            "argsort_136": {
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-scores",
                            "UnaryOp"
                        ],
                        [
                            "torch.cat([left_scores, right_scores], dim=1).view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_226": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_356": {
                "tensors": {
                    "value": "batch_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.t()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_357": {
                "tensors": {
                    "value": "entity_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mask.t()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_79": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_144": {
                "start": {
                    "value": "2 * k",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reciprocal_195": {
                "input": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([left_ranks, right_ranks], dim=0)",
                            "Call"
                        ],
                        [
                            "compute_ranks_for_mapping(left_to_all_right_dist=left_to_all_right_dist, right_to_all_left_dist=right_to_all_left_dist, mapping=mapping)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/utils/torch_utils.py": {
        "torch": {
            "sum_115": {
                "variable": {
                    "value": "worst_rank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim >= true_sim",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_14": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(heads, 1, input)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_25": {
                "variable": {
                    "value": "similarity_per_head",
                    "type": "variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "match_processed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "match_g.unsqueeze(0) * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "x2": {
                    "value": "ref_processed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_g.unsqueeze(0) * self.weight",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "norms_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "norms_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_67": {
                "variable": {
                    "value": "inner",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "differences",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(expanded_1 - expanded_2) ** norm",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "t_26": {
                "input": {
                    "value": "similarity_per_head",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.cosine_similarity(match_processed, ref_processed, dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_61": {
                "input": {
                    "value": "eps + torch.abs(distances_squared)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "sim > true_sim",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_136": {
                "variable": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_alignments",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ea.shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mean_149": {
                "variable": {
                    "value": "return_d[f{name}_mr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(2, num_alignments)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_150": {
                "variable": {
                    "value": "return_d[f{name}_mrr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reciprocal(ranks)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cdist_168": {
                "x1": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "x2": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_like_188": {
                "variable": {
                    "value": "grad_x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_like_190": {
                "variable": {
                    "value": "grad_x2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_14": {
                "*size": {
                    "value": "heads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "heads",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_66": {
                "input": {
                    "value": "expanded_1 - expanded_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_141": {
                "variable": {
                    "value": "true",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(0, num_alignments, eval_batch_size)",
                            "Call"
                        ],
                        [
                            "i in range(dims)",
                            "Call"
                        ]
                    ]
                },
                "end": {
                    "value": "i + num_match",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "a.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_152": {
                "variable": {
                    "value": "return_d[f{name}_hits_at_{k}]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "(ranks <= k).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_195": {
                "variable": {
                    "value": "sign",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1[:, None, i] - x2[None, :, i]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_61": {
                "input": {
                    "value": "distances_squared",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norms - 2 * sample_1.mm(sample_2.t())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_197": {
                "variable": {
                    "value": "grad_x1[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_dist * sign",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_113": {
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "true.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reciprocal_150": {
                "input": {
                    "value": "ranks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(2, num_alignments)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_199": {
                "input": {
                    "value": "grad_dist * sign",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}