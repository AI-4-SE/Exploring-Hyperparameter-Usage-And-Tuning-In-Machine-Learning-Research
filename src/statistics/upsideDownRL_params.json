{
    "train.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "state_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_28": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.args.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_35": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc2(concat_command)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.B.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_53": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_212": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Categorical_108": {
                "variable": {
                    "value": "dist",
                    "type": "Name",
                    "possible_values": []
                },
                "probs": {
                    "value": "action_prob",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.B(torch.from_numpy(state).cuda(), torch.from_numpy(np.array(desired_return, dtype=np.float32)).reshape(-1, 1).cuda(), torch.from_numpy(np.array(desired_horizon, dtype=np.float32).reshape(-1, 1)).cuda())",
                            "Call"
                        ],
                        [
                            "self.softmax(action_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_148": {
                "variable": {
                    "value": "dr",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(dr, dtype=np.float32).reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "variable": {
                    "value": "dh",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(dh, dtype=np.float32).reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "target",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_152": {
                "variable": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "(desired_return, desired_horizon)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_102": {
                "ndarray": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.env.reset()",
                            "Call"
                        ],
                        [
                            "next_state",
                            "Name"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.from_numpy(np.array(state)).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_103": {
                "ndarray": {
                    "value": "np.array(desired_return, dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_104": {
                "ndarray": {
                    "value": "np.array(desired_horizon, dtype=np.float32).reshape(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_182": {
                "obj": {
                    "value": "self.B.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(self.args.save_path, 'model.pkl')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}