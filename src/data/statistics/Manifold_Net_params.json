{
    "main_net_v3.py": {
        "tensorflow": {
            "list_physical_devices_42": {
                "variable": {
                    "value": "GPUs",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "create_file_writer_65": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(logdir, mode, model_id + '/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_89": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_107": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate_org",
                    "type": "variable",
                    "possible_values": [
                        [
                            "learning_rate",
                            "variable"
                        ]
                    ]
                }
            },
            "set_memory_growth_43": {
                "device": {
                    "value": "GPUs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "print_94": {
                "*inputs": {
                    "value": "dataset loaded.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "print_102": {
                "*inputs": {
                    "value": "network initialized.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(args.learning_rate[0])",
                            "Call"
                        ],
                        [
                            "learning_rate_org * learning_rate_decay ** (epoch + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_89": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scio.loadmat('/data1/wenqihuang/LplusSNet/mask_newdata/' + mask_pattern + '_' + mask_size + '_acc8.mat')['mask']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.constant(mask), tf.complex64)",
                            "Call"
                        ],
                        [
                            "scio.loadmat('/data1/wenqihuang/LplusSNet/mask_newdata/cartesian_' + mask_size + '_acc10.mat')['mask']",
                            "Subscript"
                        ],
                        [
                            "scio.loadmat('/data1/wenqihuang/LplusSNet/mask_newdata/' + mask_pattern + '_' + mask_size + '_acc12.mat')['mask']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "abs_132": {
                "variable": {
                    "value": "label_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_137": {
                "variable": {
                    "value": "recon_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(k0, csm)",
                            "Call"
                        ]
                    ]
                }
            },
            "print_162": {
                "*inputs": {
                    "value": "Epoch",
                    "type": "str",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "epoch + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GradientTape_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_147": {
                "name": {
                    "value": "loss/total",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss_mse.numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "step": {
                    "value": "total_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_step + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_153": {
                "variable": {
                    "value": "combine_video",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_abs[0:1, :, :, :], recon_abs[0:1, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model_net_v3.py": {
        "tensorflow": {
            "Sequential_23": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "self.mylayers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "complex_31": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "res[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "res[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layers": {
                    "value": "self.mylayers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_73": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_74": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_75": {
                "variable": {
                    "value": "x_sym",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_117": {
                "variable": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_118": {
                "variable": {
                    "value": "self.lambda_step_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda_2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_119": {
                "variable": {
                    "value": "self.soft_thr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.1, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "soft_thr",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_143": {
                "variable": {
                    "value": "lambda_step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(self.lambda_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_144": {
                "variable": {
                    "value": "lambda_step_2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(self.lambda_step_2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_159": {
                "variable": {
                    "value": "x_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.sign(x_3)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.nn.relu(tf.abs(x_3) - self.soft_thr)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "complex_173": {
                "variable": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "x_rec[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "x_rec[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nt, Nx * Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "svd_180": {
                "variable": {
                    "value": "(St, Ut, Vt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_191": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_193": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_194": {
                "variable": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Vt",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conj_195": {
                "variable": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_196": {
                "variable": {
                    "value": "US",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_197": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "US",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(Ut, St)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(Ut, St)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nt, Nx, Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_203": {
                "variable": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.relu(self.eta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_279": {
                "variable": {
                    "value": "r_n",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(x_rec), tf.math.imag(x_rec)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "complex_288": {
                "variable": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "x_rec[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "x_rec[:, :, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_297": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nt, Nx * Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "svd_298": {
                "variable": {
                    "value": "(St, Ut, Vt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_309": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_311": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_312": {
                "variable": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Vt",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conj_313": {
                "variable": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_314": {
                "variable": {
                    "value": "US",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(St - thres)",
                            "Call"
                        ],
                        [
                            "St * top1_mask",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.diag(St)",
                            "Call"
                        ],
                        [
                            "tf.dtypes.cast(St, tf.complex64)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_315": {
                "variable": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "US",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(Ut, St)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(Ut, St)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Vt_conj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Vt, perm=[0, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.math.conj(Vt_conj)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_316": {
                "variable": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "M",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_rec, [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(US, Vt_conj)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nt, Nx, Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_396": {
                "variable": {
                    "value": "grad_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(grad_sparse), tf.math.imag(grad_sparse)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multiply_397": {
                "variable": {
                    "value": "grad_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.lambda_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_transD(self.conv_D(x_k))",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(grad_sparse), tf.math.imag(grad_sparse)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.lambda_sparse, grad_sparse)",
                            "Call"
                        ],
                        [
                            "tf.complex(grad_sparse[..., 0], grad_sparse[..., 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "complex_398": {
                "variable": {
                    "value": "grad_sparse",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "grad_sparse[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "grad_sparse[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_414": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_415": {
                "variable": {
                    "value": "g_k",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_dc + grad_sparse",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(g_k, [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_429": {
                "variable": {
                    "value": "second_term_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "second_term_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(second_term_1, [batch, Nx, Ny * Nt])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_1, Ux)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_1, C_mode_x)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_1, C_mode_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(second_term_1, [batch, Nx, Ny, Nt])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, Ut, mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nx, Ny * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_432": {
                "variable": {
                    "value": "second_term_1",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "second_term_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(second_term_1, [batch, Nx, Ny * Nt])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_1, Ux)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_1, C_mode_x)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_1, C_mode_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(second_term_1, [batch, Nx, Ny, Nt])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, Ut, mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C_mode_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(C, [batch, Nx, Ny * Nt])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_433": {
                "variable": {
                    "value": "second_term_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "second_term_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(second_term_1, [batch, Nx, Ny * Nt])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_1, Ux)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_1, C_mode_x)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_1, C_mode_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(second_term_1, [batch, Nx, Ny, Nt])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_1, Ut, mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nx, Ny, Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_439": {
                "variable": {
                    "value": "second_term_2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(second_term_2, [0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Ny, Nx * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_442": {
                "variable": {
                    "value": "second_term_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "second_term_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(second_term_2, [0, 2, 1, 3]), [batch, Ny, Nx * Nt])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_2, Uy)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_2, C_mode_y)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_2, C_mode_y)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(second_term_2, [batch, Ny, Nx, Nt]), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, Ut, mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C_mode_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(C, [0, 2, 1, 3]), [batch, Ny, Nx * Nt])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_443": {
                "variable": {
                    "value": "second_term_2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(second_term_2, [batch, Ny, Nx, Nt])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_449": {
                "variable": {
                    "value": "second_term_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(second_term_3, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nt, Nx * Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_452": {
                "variable": {
                    "value": "second_term_3",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "second_term_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(second_term_3, [0, 3, 1, 2]), [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_3, Ut)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_3, C_mode_t)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_3, C_mode_t)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(second_term_3, [batch, Nt, Nx, Ny]), [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, Uy, mode_n=2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "C_mode_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(C, [0, 3, 1, 2]), [batch, Nt, Nx * Ny])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_453": {
                "variable": {
                    "value": "second_term_3",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(second_term_3, [batch, Nt, Nx, Ny])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_458": {
                "variable": {
                    "value": "t_k",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "t_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tangent_Module(g_k, x_k)",
                            "Call"
                        ],
                        [
                            "first_term + second_term_1 + second_term_2 + second_term_3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(t_k, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(t_k), tf.math.imag(t_k)], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_463": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(x_k), tf.math.imag(x_k)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_464": {
                "variable": {
                    "value": "t_k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(t_k), tf.math.imag(t_k)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "complex_466": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "x_k[..., 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "x_k[..., 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_469": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_488": {
                "variable": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_495": {
                "variable": {
                    "value": "mode_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nx, Ny * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_496": {
                "variable": {
                    "value": "mode_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(x_k, [0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Ny, Nx * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_497": {
                "variable": {
                    "value": "mode_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(x_k, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nt, Nx * Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "svd_499": {
                "variable": {
                    "value": "(Sx, Ux, Vx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mode_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x_k, [batch, Nx, Ny * Nt])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_500": {
                "variable": {
                    "value": "(Sy, Uy, Vy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mode_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(x_k, [0, 2, 1, 3]), [batch, Ny, Nx * Nt])",
                            "Call"
                        ]
                    ]
                }
            },
            "svd_501": {
                "variable": {
                    "value": "(St, Ut, Vt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mode_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(tf.transpose(x_k, [0, 3, 1, 2]), [batch, Nt, Nx * Ny])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_532": {
                "variable": {
                    "value": "C_mode_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(x_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nx, Ny * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_533": {
                "variable": {
                    "value": "C_mode_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(C, [0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Ny, Nx * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_534": {
                "variable": {
                    "value": "C_mode_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.transpose(C, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nt, Nx * Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_547": {
                "variable": {
                    "value": "second_term",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "second_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "second_term - tf.linalg.matmul(tf.linalg.matmul(U, tf.transpose(U, [0, 2, 1], conjugate=True)), second_term)",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.matmul(second_term, tf.linalg.matmul(tf.transpose(C_mode, [0, 2, 1], conjugate=True), tf.linalg.inv(tf.linalg.matmul(C_mode, tf.transpose(C_mode, [0, 2, 1], conjugate=True)))))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.linalg.matmul(tf.transpose(C_mode, [0, 2, 1], conjugate=True), tf.linalg.inv(tf.linalg.matmul(C_mode, tf.transpose(C_mode, [0, 2, 1], conjugate=True))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_555": {
                "variable": {
                    "value": "mask_1",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nx, top_kth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_556": {
                "variable": {
                    "value": "mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nx, Ny - top_kth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_557": {
                "variable": {
                    "value": "mask_top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[mask_1, mask_2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cast_558": {
                "variable": {
                    "value": "mask_top_k",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mask_1, mask_2], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_top_k, dtype=Uk.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "Uk.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_559": {
                "variable": {
                    "value": "Uk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Uk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(Uk, mask_top_k)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([mask_1, mask_2], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.cast(mask_top_k, dtype=Uk.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_27": {
                "variable": {
                    "value": "input2c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(input), tf.math.imag(input)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_29": {
                "variable": {
                    "value": "input2c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(input), tf.math.imag(input)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_153": {
                "variable": {
                    "value": "r_n",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(r_n), tf.math.imag(r_n)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_184": {
                "variable": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.thres_coef) * St[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(thres, -1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(self.thres_coef) * St[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(thres, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_185": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "St - thres",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_189": {
                "variable": {
                    "value": "top1_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "top1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones([self.nb, 1], dtype=np.float32), np.zeros([self.nb, self.nt - 1], dtype=np.float32)], 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(top1_mask)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones([self.nb, 1], dtype=np.float32), np.zeros([self.nb, self.nt - 1], dtype=np.float32)], 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(top1_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_302": {
                "variable": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(self.thres_coef) * St[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(thres, -1)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(self.thres_coef) * St[:, 0]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(thres, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_303": {
                "variable": {
                    "value": "St",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "St - thres",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_307": {
                "variable": {
                    "value": "top1_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "top1_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.concatenate([np.ones([self.nb, 1], dtype=np.float32), np.zeros([self.nb, self.nt - 1], dtype=np.float32)], 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(top1_mask)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones([self.nb, 1], dtype=np.float32), np.zeros([self.nb, self.nt - 1], dtype=np.float32)], 1)",
                            "Call"
                        ],
                        [
                            "tf.constant(top1_mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_377": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_378": {
                "variable": {
                    "value": "self.lambda_sparse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "lambda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_514": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(A, [batch, Nx, Ny * Nt])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_515": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(U, tf.reshape(A, [batch, Nx, Ny * Nt]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [batch, Nx, Ny, Nt])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(U, tf.reshape(tf.transpose(A, [0, 2, 1, 3]), [batch, Ny, Nx * Nt]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(out, [batch, Ny, Nx, Nt]), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(U, tf.reshape(tf.transpose(A, [0, 3, 1, 2]), [batch, Nt, Nx * Ny]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(out, [batch, Nt, Nx, Ny]), [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nx, Ny, Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Conv3D_14": {
                "filters": {
                    "value": "n_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_16": {
                "filters": {
                    "value": "n_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_18": {
                "filters": {
                    "value": "n_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_20": {
                "filters": {
                    "value": "n_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv3D_22": {
                "filters": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv3D_39": {
                "filters": {
                    "value": "n_f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "self.thres_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(-2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "thres_coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_101": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_103": {
                "variable": {
                    "value": "self.thres_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(-2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "thres_coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0.01, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "eta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_117": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_118": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_119": {
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_143": {
                "features": {
                    "value": "self.lambda_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_144": {
                "features": {
                    "value": "self.lambda_step_2",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_mul_149": {
                "scalar": {
                    "value": "lambda_step_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.relu(self.lambda_step_2), tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "x_rec + beta - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sign_159": {
                "x": {
                    "value": "x_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_3(x_2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_159": {
                "features": {
                    "value": "tf.abs(x_3) - self.soft_thr",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_203": {
                "features": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_204": {
                "x": {
                    "value": "eta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.relu(self.eta), tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "x_rec - t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_254": {
                "variable": {
                    "value": "self.thres_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(-2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "thres_coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_257": {
                "variable": {
                    "value": "self.thres_coef",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(-2, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "thres_coef",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_418": {
                "a": {
                    "value": "Ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ux, top_kth=int(Nx / self.Nx_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_419": {
                "a": {
                    "value": "Uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Uy, top_kth=int(Ny / self.Ny_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_420": {
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_427": {
                "a": {
                    "value": "Uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Uy, top_kth=int(Ny / self.Ny_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_428": {
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_437": {
                "a": {
                    "value": "Ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ux, top_kth=int(Nx / self.Nx_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_438": {
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_439": {
                "a": {
                    "value": "second_term_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(second_term_2, [0, 2, 1, 3]), [batch, Ny, Nx * Nt])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_2, Uy)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_2, C_mode_y)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_2, C_mode_y)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(second_term_2, [batch, Ny, Nx, Nt]), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, Ut, mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "tensor": {
                    "value": "second_term_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(second_term_2, [0, 2, 1, 3]), [batch, Ny, Nx * Nt])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_2, Uy)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_2, C_mode_y)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_2, C_mode_y)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(second_term_2, [batch, Ny, Nx, Nt]), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_2, Ut, mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Ny, Nx, Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_447": {
                "a": {
                    "value": "Ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ux, top_kth=int(Nx / self.Nx_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_448": {
                "a": {
                    "value": "Uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Uy, top_kth=int(Ny / self.Ny_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_449": {
                "a": {
                    "value": "second_term_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(second_term_3, [0, 3, 1, 2]), [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_3, Ut)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_3, C_mode_t)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_3, C_mode_t)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(second_term_3, [batch, Nt, Nx, Ny]), [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, Uy, mode_n=2)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_453": {
                "tensor": {
                    "value": "second_term_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(g_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.transpose(second_term_3, [0, 3, 1, 2]), [batch, Nt, Nx * Ny])",
                            "Call"
                        ],
                        [
                            "self.Projector(second_term_3, Ut)",
                            "Call"
                        ],
                        [
                            "self.Core_Multiply(second_term_3, C_mode_t)",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(second_term_3, C_mode_t)",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(second_term_3, [batch, Nt, Nx, Ny]), [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(second_term_3, Uy, mode_n=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nt, Nx, Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_465": {
                "x": {
                    "value": "self.eta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "t_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tangent_Module(g_k, x_k)",
                            "Call"
                        ],
                        [
                            "first_term + second_term_1 + second_term_2 + second_term_3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(t_k, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(t_k), tf.math.imag(t_k)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_480": {
                "a": {
                    "value": "Ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ux, top_kth=int(Nx / self.Nx_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_481": {
                "a": {
                    "value": "Uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Uy, top_kth=int(Ny / self.Ny_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_482": {
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_496": {
                "a": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_497": {
                "a": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_517": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(tf.transpose(A, [0, 2, 1, 3]), [batch, Ny, Nx * Nt])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_518": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(out, [batch, Ny, Nx, Nt])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_528": {
                "a": {
                    "value": "Ux",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ux, top_kth=int(Nx / self.Nx_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_529": {
                "a": {
                    "value": "Uy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Uy, top_kth=int(Ny / self.Ny_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_530": {
                "a": {
                    "value": "Ut",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SVT_U(Ut, top_kth=int(Nt / self.Nt_factor))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_533": {
                "a": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(x_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_534": {
                "a": {
                    "value": "C",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Mode_Multiply(x_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, tf.transpose(Ux, [0, 2, 1], conjugate=True), mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Uy, [0, 2, 1], conjugate=True), mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, tf.transpose(Ut, [0, 2, 1], conjugate=True), mode_n=3)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_539": {
                "a": {
                    "value": "tf.linalg.matmul(U, tf.transpose(U, [0, 2, 1], conjugate=True))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "second_term",
                    "type": "variable",
                    "possible_values": [
                        [
                            "second_term - tf.linalg.matmul(tf.linalg.matmul(U, tf.transpose(U, [0, 2, 1], conjugate=True)), second_term)",
                            "BinOp"
                        ],
                        [
                            "tf.linalg.matmul(second_term, tf.linalg.matmul(tf.transpose(C_mode, [0, 2, 1], conjugate=True), tf.linalg.inv(tf.linalg.matmul(C_mode, tf.transpose(C_mode, [0, 2, 1], conjugate=True)))))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_548": {
                "a": {
                    "value": "tf.transpose(C_mode, [0, 2, 1], conjugate=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.linalg.inv(tf.linalg.matmul(C_mode, tf.transpose(C_mode, [0, 2, 1], conjugate=True)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_mul_148": {
                "scalar": {
                    "value": "lambda_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.nn.relu(self.lambda_step), tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "ATAX_cplx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(self.E.mtimes(x_rec, inv=False, csm=csm) - d, inv=True, csm=csm)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_183": {
                "x": {
                    "value": "self.thres_coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_279": {
                "input": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "imag_279": {
                "input": {
                    "value": "x_rec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "x_6 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "self.sparse(x_rec, d)",
                            "Call"
                        ],
                        [
                            "x_5 + r_n",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_rec[:, :, :, :, 0], x_rec[:, :, :, :, 1])",
                            "Call"
                        ],
                        [
                            "self.lowrank(x_rec)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_rec, d)",
                            "Call"
                        ],
                        [
                            "tf.reshape(M, [batch, Nt, Nx, Ny])",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "self.E.mtimes(d, inv=True, csm=csm)",
                            "Call"
                        ],
                        [
                            "self.celllist[i](x_rec, d, d.shape)",
                            "Call"
                        ],
                        [
                            "ifft2c_mri(k_rec)",
                            "Call"
                        ],
                        [
                            "x_rec - ifft2c_mri(fft2c_mri(x_rec) * self.mask - d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_301": {
                "x": {
                    "value": "self.thres_coef",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_377": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_378": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_396": {
                "input": {
                    "value": "grad_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_transD(self.conv_D(x_k))",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(grad_sparse), tf.math.imag(grad_sparse)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.lambda_sparse, grad_sparse)",
                            "Call"
                        ],
                        [
                            "tf.complex(grad_sparse[..., 0], grad_sparse[..., 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_396": {
                "input": {
                    "value": "grad_sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_transD(self.conv_D(x_k))",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(grad_sparse), tf.math.imag(grad_sparse)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.multiply(self.lambda_sparse, grad_sparse)",
                            "Call"
                        ],
                        [
                            "tf.complex(grad_sparse[..., 0], grad_sparse[..., 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "real_463": {
                "input": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_463": {
                "input": {
                    "value": "x_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_1(x_rec)",
                            "Call"
                        ],
                        [
                            "self.Retraction_Module(x_k, t_k)",
                            "Call"
                        ],
                        [
                            "self.dc_layer(x_k, d)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_k), tf.math.imag(x_k)], axis=-1)",
                            "Call"
                        ],
                        [
                            "x_k - tf.multiply(self.eta, t_k)",
                            "BinOp"
                        ],
                        [
                            "tf.complex(x_k[..., 0], x_k[..., 1])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(C, Ux, mode_n=1)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Uy, mode_n=2)",
                            "Call"
                        ],
                        [
                            "self.Mode_Multiply(x_k, Ut, mode_n=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x_k, [0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                }
            },
            "real_464": {
                "input": {
                    "value": "t_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tangent_Module(g_k, x_k)",
                            "Call"
                        ],
                        [
                            "first_term + second_term_1 + second_term_2 + second_term_3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(t_k, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(t_k), tf.math.imag(t_k)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_464": {
                "input": {
                    "value": "t_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.Tangent_Module(g_k, x_k)",
                            "Call"
                        ],
                        [
                            "first_term + second_term_1 + second_term_2 + second_term_3",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(t_k, [0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(t_k), tf.math.imag(t_k)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_514": {
                "tensor": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nx, Ny * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_520": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(tf.transpose(A, [0, 3, 1, 2]), [batch, Nt, Nx * Ny])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_521": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(out, [batch, Nt, Nx, Ny])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_540": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(U, [0, 2, 1], conjugate=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_548": {
                "a": {
                    "value": "C_mode",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "inv_549": {
                "input": {
                    "value": "tf.linalg.matmul(C_mode, tf.transpose(C_mode, [0, 2, 1], conjugate=True))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "real_27": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_27": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "real_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_29": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_100": {
                "value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_101": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_103": {
                "value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_104": {
                "value": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_153": {
                "input": {
                    "value": "r_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_rec - tf.math.scalar_mul(lambda_step, ATAX_cplx) + tf.math.scalar_mul(lambda_step_2, x_rec + beta - t)",
                            "BinOp"
                        ],
                        [
                            "tf.stack([tf.math.real(r_n), tf.math.imag(r_n)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_rec), tf.math.imag(x_rec)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_153": {
                "input": {
                    "value": "r_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_rec - tf.math.scalar_mul(lambda_step, ATAX_cplx) + tf.math.scalar_mul(lambda_step_2, x_rec + beta - t)",
                            "BinOp"
                        ],
                        [
                            "tf.stack([tf.math.real(r_n), tf.math.imag(r_n)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.math.real(x_rec), tf.math.imag(x_rec)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_159": {
                "x": {
                    "value": "x_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv_3(x_2)",
                            "Call"
                        ],
                        [
                            "self.conv_3(x_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_254": {
                "value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_257": {
                "value": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_517": {
                "tensor": {
                    "value": "tf.transpose(A, [0, 2, 1, 3])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Ny, Nx * Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_518": {
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(U, tf.reshape(A, [batch, Nx, Ny * Nt]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [batch, Nx, Ny, Nt])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(U, tf.reshape(tf.transpose(A, [0, 2, 1, 3]), [batch, Ny, Nx * Nt]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(out, [batch, Ny, Nx, Nt]), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(U, tf.reshape(tf.transpose(A, [0, 3, 1, 2]), [batch, Nt, Nx * Ny]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(out, [batch, Nt, Nx, Ny]), [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Ny, Nx, Nt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_541": {
                "a": {
                    "value": "U",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_549": {
                "a": {
                    "value": "C_mode",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(C_mode, [0, 2, 1], conjugate=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_517": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_520": {
                "tensor": {
                    "value": "tf.transpose(A, [0, 3, 1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch, Nt, Nx * Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_521": {
                "tensor": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.matmul(U, tf.reshape(A, [batch, Nx, Ny * Nt]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(out, [batch, Nx, Ny, Nt])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(U, tf.reshape(tf.transpose(A, [0, 2, 1, 3]), [batch, Ny, Nx * Nt]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(out, [batch, Ny, Nx, Nt]), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.linalg.matmul(U, tf.reshape(tf.transpose(A, [0, 3, 1, 2]), [batch, Nt, Nx * Ny]))",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(out, [batch, Nt, Nx, Ny]), [0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, Nt, Nx, Ny]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_550": {
                "a": {
                    "value": "C_mode",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "conjugate": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_520": {
                "a": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "test_net_v3.py": {
        "tensorflow": {
            "list_physical_devices_32": {
                "variable": {
                    "value": "GPUs",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "create_file_writer_57": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "os.path.join(logdir, mode, TIMESTAMP + net_name + str(acc) + '/')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_92": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.constant(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_memory_growth_33": {
                "device": {
                    "value": "GPUs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_116": {
                "variable": {
                    "value": "label_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_125": {
                "variable": {
                    "value": "recon_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(k0, csm)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_92": {
                "value": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scio.loadmat('/data1/wenqihuang/LplusSNet/mask_newdata/' + mask_pattern + '_' + mask_size + '_acc8.mat')['mask']",
                            "Subscript"
                        ],
                        [
                            "tf.cast(tf.constant(mask), tf.complex64)",
                            "Call"
                        ],
                        [
                            "scio.loadmat('/data1/wenqihuang/LplusSNet/mask_newdata/cartesian_' + mask_size + '_acs4_acc10.mat')['mask']",
                            "Subscript"
                        ],
                        [
                            "scio.loadmat('/data1/wenqihuang/LplusSNet/mask_newdata/' + mask_pattern + '_' + mask_size + '_acc12.mat')['mask']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "print_129": {
                "*inputs": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "mse =",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_138": {
                "variable": {
                    "value": "combine_video",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[label_abs[0:1, :, :, :], recon_abs[0:1, :, :, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_133": {
                "a": {
                    "value": "recon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(k0, csm)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "tools/tools.py": {
        "tensorflow": {
            "constant_9": {
                "variable": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(name).numpy().decode('utf-8')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_88": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(y), tf.math.imag(y)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(y_), tf.math.imag(y_)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_91": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.math.square(pred - label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_150": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_151": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fft_152": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_155": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nx + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_156": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(ny + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_158": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_159": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fftshift_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ifft_168": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_169": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_171": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nx + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_172": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(ny + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_176": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_177": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_185": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(x ** 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_191": {
                "variable": {
                    "value": "x_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_193": {
                "variable": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "coef",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(x_abs - thres) / (x_abs + 1e-10)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(coef, tf.complex64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.complex64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_16": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_104": {
                "variable": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nt + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_120": {
                "variable": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nt + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(residual_cplx), tf.math.imag(residual_cplx)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_141": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "residual ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_144": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "residual ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fftshift_277": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_278": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fft_279": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_280": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_282": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nx + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_283": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(ny + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_285": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_286": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fftshift_293": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_294": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ifft_295": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_296": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 2, 4, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_298": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nx + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_299": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(ny + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_303": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_304": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fftshift_311": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_312": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fft_313": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_314": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_316": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nx + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_317": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(ny + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_319": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fft_320": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "fftshift_327": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_328": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ifft_329": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_330": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_332": {
                "variable": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(nx + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_333": {
                "variable": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.complex64(ny + 0j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fftshift_337": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ifft_338": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_91": {
                "x": {
                    "value": "pred - label",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "input_tensor": {
                    "value": "tf.square(y_sym)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ifft_109": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fft_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_123": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ifft_125": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 3, 4, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fft_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 4, 1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fftshift_157": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_157": {
                "x": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_160": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_160": {
                "x": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_174": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_174": {
                "x": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_178": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "x": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_185": {
                "x": {
                    "value": "x ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_192": {
                "features": {
                    "value": "x_abs - thres",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_25": {
                "name": {
                    "value": "name + '/grid'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "frames",
                    "type": "variable",
                    "possible_values": [
                        [
                            "video.transpose((1, 2, 0, 3, 4)).reshape((T, H, B * W, C))",
                            "Call"
                        ],
                        [
                            "video.transpose((0, 2, 1, 3, 4)).reshape((1, B * H, T * W, C))",
                            "Call"
                        ]
                    ]
                },
                "step": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "real_88": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_88": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "real_89": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "imag_89": {
                "input": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_95": {
                "x": {
                    "value": "y_sym",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "fftshift_284": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_284": {
                "x": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_287": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_287": {
                "x": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_301": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_301": {
                "x": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_305": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_305": {
                "x": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_318": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_318": {
                "x": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_321": {
                "x": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 4) / tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.transpose(X, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 2) / tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(X)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(X, 3) / tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_321": {
                "x": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_335": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_335": {
                "x": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nx + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "fftshift_339": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_339": {
                "x": {
                    "value": "ny",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(ny + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_111": {
                "x": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_117": {
                "x": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_127": {
                "x": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_133": {
                "x": {
                    "value": "nt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ],
                        [
                            "tf.constant(np.complex64(nt + 0j))",
                            "Call"
                        ]
                    ]
                }
            },
            "real_140": {
                "input": {
                    "value": "residual_cplx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon - label",
                            "BinOp"
                        ]
                    ]
                }
            },
            "imag_140": {
                "input": {
                    "value": "residual_cplx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "recon - label",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_260": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x * tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.transpose(input, perm=[0, 2, 3, 4, 1])",
                            "Call"
                        ],
                        [
                            "tf.signal.fft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 4, 1, 2, 3])",
                            "Call"
                        ],
                        [
                            "x / tf.sqrt(nt)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.math.reduce_sum(tf.abs(x ** 2), axis=1)",
                            "Call"
                        ],
                        [
                            "x ** (1.0 / 2)",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_singlecoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_singlecoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask[:, :, 0:b.shape[2], :, :])",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask[:, :, 0:b.shape[2], :, :]",
                            "BinOp"
                        ],
                        [
                            "self._ifft2c_mri_multicoil(b * self.mask)",
                            "Call"
                        ],
                        [
                            "x * tf.math.conj(csm)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(x, 1)",
                            "Call"
                        ],
                        [
                            "self._fft2c_mri_multicoil(b) * self.mask",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 2, 4, 3])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 4)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 4) * tf.sqrt(ny)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(X, 2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 2) * tf.sqrt(nx)",
                            "BinOp"
                        ],
                        [
                            "tf.signal.fftshift(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.signal.ifft(x)",
                            "Call"
                        ],
                        [
                            "tf.signal.fftshift(x, 3) * tf.sqrt(ny)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conj_259": {
                "x": {
                    "value": "csm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_262": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(b, 1) * csm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(b, 1) * csm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conj_267": {
                "x": {
                    "value": "csm",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "expand_dims_270": {
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(b, 1) * csm",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(b, 1) * csm",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tools/wavelet.py": {
        "tensorflow": {
            "convert_to_tensor_36": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "floordiv_74": {
                "variable": {
                    "value": "hcA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(y)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floordiv_75": {
                "variable": {
                    "value": "wcA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(y)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "AH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cA, cH]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "VD",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cV, cD]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[AH, VD]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_110": {
                "variable": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_147": {
                "variable": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_148": {
                "variable": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(x_2c), tf.math.imag(x_2c)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "complex_150": {
                "variable": {
                    "value": "dwtx",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "dwtx_2c[:, :, :, 0:nt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "dwtx_2c[:, :, :, nt:2 * nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_151": {
                "variable": {
                    "value": "dwtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "dwtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.complex(dwtx_2c[:, :, :, 0:nt], dwtx_2c[:, :, :, nt:2 * nt])",
                            "Call"
                        ],
                        [
                            "tf.transpose(dwtx, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_157": {
                "variable": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_158": {
                "variable": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.math.real(x_2c), tf.math.imag(x_2c)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "complex_160": {
                "variable": {
                    "value": "idwtx",
                    "type": "variable",
                    "possible_values": []
                },
                "real": {
                    "value": "idwtx_2c[:, :, :, 0:nt]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "imag": {
                    "value": "idwtx_2c[:, :, :, nt:2 * nt]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_161": {
                "variable": {
                    "value": "idwtx",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "idwtx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.complex(idwtx_2c[:, :, :, 0:nt], idwtx_2c[:, :, :, nt:2 * nt])",
                            "Call"
                        ],
                        [
                            "tf.transpose(idwtx, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_45": {
                "variable": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_47": {
                "variable": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x3d, int(x3d.shape.dims[4]), 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in x3d], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(y3d, kernel, output_shape=output_shape, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "int(x3d.shape.dims[4])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_49": {
                "variable": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a for a in x3d]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_51": {
                "variable": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x3d, int(x3d.shape.dims[4]), 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in x3d], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(y3d, kernel, output_shape=output_shape, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_53": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x3d, kernel, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(y3d, nc, 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y3d], 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "int(y3d.shape.dims[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a for a in y]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x.shape.dims[3])",
                            "Call"
                        ],
                        [
                            "int(x.shape.dims[3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([AH, VD], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.split(x3d, nc, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x for x in outputs], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (tf.shape(outputs)[0], tf.shape(outputs)[2], tf.shape(outputs)[3], nc))",
                            "Call"
                        ],
                        [
                            "outputs[:, s:2 * (tf.shape(y)[1] - 1) + np.shape(ll)[0] - s, s:2 * (tf.shape(y)[2] - 1) + np.shape(ll)[1] - s, :]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floordiv_114": {
                "variable": {
                    "value": "hcA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floordiv_115": {
                "variable": {
                    "value": "wcA",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_128": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_129": {
                "variable": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_130": {
                "variable": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x3d, kernel, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(y3d, nc, 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y3d], 1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x.shape.dims[3])",
                            "Call"
                        ],
                        [
                            "int(x.shape.dims[3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_131": {
                "variable": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a for a in y3d]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv3d_transpose_135": {
                "variable": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x3d, kernel, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(y3d, nc, 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y3d], 1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ],
                        [
                            "np.array([core], dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(kernel)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.shape(y)[0], tf.shape(y3d)[1], 2 * (tf.shape(y)[1] - 1) + np.shape(ll)[0], 2 * (tf.shape(y)[2] - 1) + np.shape(ll)[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_136": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(x3d, int(x3d.shape.dims[4]), 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in x3d], 1)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv3d_transpose(y3d, kernel, output_shape=output_shape, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(x.shape.dims[3])",
                            "Call"
                        ],
                        [
                            "int(x.shape.dims[3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_137": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x for x in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([AH, VD], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.split(x3d, nc, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x for x in outputs], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (tf.shape(outputs)[0], tf.shape(outputs)[2], tf.shape(outputs)[3], nc))",
                            "Call"
                        ],
                        [
                            "outputs[:, s:2 * (tf.shape(y)[1] - 1) + np.shape(ll)[0] - s, s:2 * (tf.shape(y)[2] - 1) + np.shape(ll)[1] - s, :]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(outputs)[0], tf.shape(outputs)[2], tf.shape(outputs)[3], nc)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "variable_scope_38": {
                "name_or_scope": {
                    "value": "dwt2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(cA, cH, cV, cD)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "x[:, :, :, c]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(channel, -1)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_62": {
                "variable": {
                    "value": "AH",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cA, cH]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "VD",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cV, cD]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_79": {
                "input": {
                    "value": "cA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0:hcA, 0:wcA, :]",
                            "Subscript"
                        ],
                        [
                            "wavedec2d(cA, level=level - 1, wave=wave)",
                            "Call"
                        ],
                        [
                            "cA[:, 0:hcA, 0:wcA, :]",
                            "Subscript"
                        ],
                        [
                            "channel[:, 0:hcA, 0:wcA, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_80": {
                "input": {
                    "value": "cA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, 0:hcA, 0:wcA, :]",
                            "Subscript"
                        ],
                        [
                            "wavedec2d(cA, level=level - 1, wave=wave)",
                            "Call"
                        ],
                        [
                            "cA[:, 0:hcA, 0:wcA, :]",
                            "Subscript"
                        ],
                        [
                            "channel[:, 0:hcA, 0:wcA, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "variable_scope_113": {
                "name_or_scope": {
                    "value": "idwt2d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_119": {
                "variable": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "channel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "variable"
                        ],
                        [
                            "x[:, :, :, c]",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(channel, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_124": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[cA, cH, cV, cD]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_40": {
                "value": {
                    "value": "[[0, 0], [p, p + 1], [p, p + 1], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_74": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_148": {
                "input": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_148": {
                "input": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_158": {
                "input": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_158": {
                "input": {
                    "value": "x_2c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.math.real(x_2c), tf.math.imag(x_2c)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_41": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_42": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "concat_64": {
                "values": {
                    "value": "[AH, VD]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_114": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_115": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(x, tf.constant([[0, 0], [p, p + 1], [p, p + 1], [0, 0]]))",
                            "Call"
                        ],
                        [
                            "x[:, 0:xh, 0:xw, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_132": {
                "input": {
                    "value": "y3d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv3d(x3d, kernel, padding='VALID', strides=[1, 1, 2, 2, 1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(y, 1)",
                            "Call"
                        ],
                        [
                            "tf.split(y3d, nc, 4)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y3d], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_56": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_138": {
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(outputs, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([AH, VD], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.split(x3d, nc, 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([x for x in outputs], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(outputs, (tf.shape(outputs)[0], tf.shape(outputs)[2], tf.shape(outputs)[3], nc))",
                            "Call"
                        ],
                        [
                            "outputs[:, s:2 * (tf.shape(y)[1] - 1) + np.shape(ll)[0] - s, s:2 * (tf.shape(y)[2] - 1) + np.shape(ll)[1] - s, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "shape_133": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_134": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_139": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_140": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(y3d, int(y3d.shape.dims[1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.concat([a for a in y], 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (tf.shape(y)[0], tf.shape(y)[2], tf.shape(y)[3], 4 * nc))",
                            "Call"
                        ],
                        [
                            "dwt2d(x, wave=wave)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(y, axis=-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}