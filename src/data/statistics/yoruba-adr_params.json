{
    "src/onmt/bin/preprocess.py": {
        "torch": {
            "save_226": {
                "obj": {
                    "value": "fields",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_fields_vocab(fields, counters, opt.data_type, opt.share_vocab, opt.vocab_size_multiple, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab_size, opt.tgt_words_min_frequency)",
                            "Call"
                        ],
                        [
                            "existing_fields",
                            "Name"
                        ],
                        [
                            "inputters.build_vocab(train_dataset, fields, opt.data_type, opt.share_vocab, opt.src_vocab, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab, opt.tgt_vocab_size, opt.tgt_words_min_frequency, vocab_size_multiple=opt.vocab_size_multiple)",
                            "Call"
                        ],
                        [
                            "inputters.get_fields(opt.data_type, src_nfeats, tgt_nfeats, dynamic_dict=opt.dynamic_dict, with_align=opt.train_align[0] is not None, src_truncate=opt.src_seq_length_trunc, tgt_truncate=opt.tgt_seq_length_trunc)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "vocab_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ],
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_242": {
                "seed": {
                    "value": "opt.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_215": {
                "obj": {
                    "value": "fields",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_build_fields_vocab(fields, counters, opt.data_type, opt.share_vocab, opt.vocab_size_multiple, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab_size, opt.tgt_words_min_frequency)",
                            "Call"
                        ],
                        [
                            "existing_fields",
                            "Name"
                        ],
                        [
                            "inputters.build_vocab(train_dataset, fields, opt.data_type, opt.share_vocab, opt.src_vocab, opt.src_vocab_size, opt.src_words_min_frequency, opt.tgt_vocab, opt.tgt_vocab_size, opt.tgt_words_min_frequency, vocab_size_multiple=opt.vocab_size_multiple)",
                            "Call"
                        ],
                        [
                            "inputters.get_fields(opt.data_type, src_nfeats, tgt_nfeats, dynamic_dict=opt.dynamic_dict, with_align=opt.train_align[0] is not None, src_truncate=opt.src_seq_length_trunc, tgt_truncate=opt.tgt_seq_length_trunc)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "vocab_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ],
                        [
                            "opt.save_data + '.vocab.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_116": {
                "variable": {
                    "value": "existing_fields",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.src_vocab",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/bin/train.py": {
        "torch": {
            "load_28": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_33": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data + '.vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_122": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_123": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_121": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_124": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_126": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_128": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_118": {
                "type": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(nb_gpu)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/decoders/cnn_decoder.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embeddings.embedding_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[GatedConv(hidden_size, cnn_kernel_width, dropout, True) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_38": {
                "variable": {
                    "value": "self.attn_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvMultiStepAttention(hidden_size) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "x.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.cnn_kernel_width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.state['previous_input'], tgt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "new_target_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pad, x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_121": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/decoders/decoder.py": {
        "torch": {
            "Dropout_95": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_231": {
                "variable": {
                    "value": "dec_outs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "dec_outs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(dec_outs)",
                            "Call"
                        ],
                        [
                            "rnn_output",
                            "Name"
                        ],
                        [
                            "self.context_gate(emb.view(-1, emb.size(2)), rnn_output.view(-1, rnn_output.size(2)), dec_outs.view(-1, dec_outs.size(2)))",
                            "Call"
                        ],
                        [
                            "dec_outs.view(tgt_len, tgt_batch, self.hidden_size)",
                            "Call"
                        ],
                        [
                            "self.dropout(dec_outs)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "dec_outs + [decoder_output]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_390": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[emb_t.squeeze(0), input_feed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_166": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[hidden[0:hidden.size(0):2], hidden[1:hidden.size(0):2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_235": {
                "variable": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attns[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/decoders/ensemble.py": {
        "torch": {
            "ModuleList_37": {
                "variable": {
                    "value": "self.model_encoders",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_encoders",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "model_decoders",
                    "type": "variable",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_decoders",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn.ModuleList(model_decoders)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_93": {
                "variable": {
                    "value": "self.model_generators",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "model_generators",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_102": {
                "variable": {
                    "value": "distributions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mg(h) if attn is None else mg(h, attn, src_map) for (h, mg) in zip(hidden, self.model_generators)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_120": {
                "variable": {
                    "value": "self.models",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_72": {
                "variable": {
                    "value": "result[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn[key] for attn in attns if attn[key] is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "variable": {
                    "value": "result[key]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_107": {
                "input": {
                    "value": "torch.exp(distributions).mean(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_107": {
                "input": {
                    "value": "distributions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([mg(h) if attn is None else mg(h, attn, src_map) for (h, mg) in zip(hidden, self.model_generators)])",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_107": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/decoders/transformer.py": {
        "torch": {
            "LayerNorm_44": {
                "variable": {
                    "value": "self.layer_norm_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LayerNorm_45": {
                "variable": {
                    "value": "self.layer_norm_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_192": {
                "variable": {
                    "value": "self.transformer_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerDecoderLayer(d_model, heads, d_ff, dropout, attention_dropout, self_attn_type=self_attn_type, max_relative_positions=max_relative_positions, aan_useffn=aan_useffn, full_context_alignment=full_context_alignment, alignment_heads=alignment_heads) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_205": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_107": {
                "variable": {
                    "value": "future_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[tgt_len, tgt_len]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "tgt_pad_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gt_117": {
                "variable": {
                    "value": "dec_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tgt_pad_mask + future_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_308": {
                "variable": {
                    "value": "layer_cache[prev_g]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, 1, depth)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "memory_bank.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/encoders/audio_encoder.py": {
        "torch": {
            "Linear_60": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "enc_rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dec_rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_61": {
                "variable": {
                    "value": "self.batchnorm_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "enc_rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_69": {
                "variable": {
                    "value": "self.pool_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "enc_pooling[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_57": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm1d_71": {
                "variable": {
                    "value": "batchnorm",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "enc_rnn_size",
                    "type": "variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_81": {
                "kernel_size": {
                    "value": "enc_pooling[l + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/encoders/cnn_encoder.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings.embedding_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/encoders/encoder.py": {
        "torch": {}
    },
    "src/onmt/encoders/image_encoder.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.layer1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "image_chanel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.layer2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.layer3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.layer4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.batch_norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.batch_norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.batch_norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LSTM_45": {
                "variable": {
                    "value": "self.rnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout[0] if type(dropout) is list else dropout",
                            "IfExp"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_49": {
                "variable": {
                    "value": "self.pos_lut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                }
            },
            "relu_79": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer1(src[:, :, :, :] - 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_82": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_86": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer2(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_89": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm1(self.layer3(src))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_98": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.layer4(src)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_101": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_106": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm2(self.layer5(src))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_109": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.layer1(src[:, :, :, :] - 0.5), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer2(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 2), stride=(2, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm1(self.layer3(src)), True)",
                            "Call"
                        ],
                        [
                            "F.relu(self.layer4(src), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(1, 2), stride=(1, 2))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm2(self.layer5(src)), True)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(src, kernel_size=(2, 1), stride=(2, 1))",
                            "Call"
                        ],
                        [
                            "F.relu(self.batch_norm3(self.layer6(src)), True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_112": {
                "variable": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batch_norm3(self.layer6(src))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_119": {
                "variable": {
                    "value": "row_vec",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "with_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_emb.view(1, pos_emb.size(0), pos_emb.size(1)), inp)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/encoders/mean_encoder.py": {
        "torch": {
            "bmm_38": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_38": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/encoders/rnn_encoder.py": {
        "torch": {
            "ModuleList_95": {
                "variable": {
                    "value": "self.bridge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(self.total_hidden_dim, self.total_hidden_dim, bias=True) for _ in range(number_of_states)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "relu_108": {
                "input": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(states.view(-1, self.total_hidden_dim))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_95": {
                "in_features": {
                    "value": "self.total_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.total_hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/encoders/transformer.py": {
        "torch": {
            "LayerNorm_34": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_96": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[TransformerEncoderLayer(d_model, heads, d_ff, dropout, attention_dropout, max_relative_positions=max_relative_positions) for i in range(num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_101": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/inputters/audio_dataset.py": {
        "torch": {
            "full_175": {
                "variable": {
                    "value": "sounds",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(minibatch), 1, nfft, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_205": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(1) for x in minibatch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.int, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/inputters/dataset_base.py": {
        "torch": {
            "save_154": {
                "obj": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/inputters/image_dataset.py": {
        "torch": {
            "zeros_96": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data[0].size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(1) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(2) for t in data])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/inputters/inputter.py": {
        "torch": {
            "zeros_46": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "src_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "src_vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.max() for t in data]) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "alignment",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max([t.size(0) for t in data])",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "align_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sparse_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda' if opt.gpu_ranks else 'cpu'",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_455": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "paths",
                            "Name"
                        ],
                        [
                            "paths",
                            "Name"
                        ]
                    ]
                }
            },
            "load_682": {
                "variable": {
                    "value": "temp_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.iterables[0]._paths[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_747": {
                "variable": {
                    "value": "cur_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "paths",
                            "Name"
                        ],
                        [
                            "paths",
                            "Name"
                        ]
                    ]
                }
            },
            "load_430": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "src_vocab_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/inputters/text_dataset.py": {
        "torch": {
            "stack_130": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "levels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[base_data] + feats",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/inputters/vec_dataset.py": {
        "torch": {
            "full_104": {
                "variable": {
                    "value": "feats",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(len(minibatch), max_len, nfeats, feat_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.pad_token",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x.size(0) for x in minibatch]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.int, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "VecSeqField(pad_index=0, include_lengths=True)",
                            "Call"
                        ],
                        [
                            "np.load(vec_path)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/model_builder.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.models[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "device_167": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_180": {
                "variable": {
                    "value": "generator",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(model_opt.dec_rnn_size, len(fields['tgt'].base_field.vocab))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_169": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LogSoftmax_179": {
                "variable": {
                    "value": "gen_func",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_171": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "in_features": {
                    "value": "model_opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(fields['tgt'].base_field.vocab)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/models/model.py": {
        "torch": {}
    },
    "src/onmt/models/model_saver.py": {
        "torch": {
            "save_130": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': model_state_dict, 'generator': generator_state_dict, 'vocab': vocab, 'opt': self.model_opt, 'optim': self.optim.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'%s_step_%d.pt' % (self.base_path, step)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/models/sru.py": {
        "torch": {
            "device_361": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_362": {
                "variable": {
                    "value": "tmp_",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_507": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_in, self.size_per_dir * 2 if bidirectional else self.size_per_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_511": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(n_out * 4 if bidirectional else n_out * 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_600": {
                "variable": {
                    "value": "self.rnn_lst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "grad_last",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(grad_last[0], grad_last[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_644": {
                "variable": {
                    "value": "fh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lstc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_646": {
                "variable": {
                    "value": "fh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "lstc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_435": {
                "variable": {
                    "value": "last_hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c[-1, :, :d], c[0, :, d:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "current_stream_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/models/stacked_rnn.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_33": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(c_1)",
                            "Call"
                        ],
                        [
                            "c_1 + [c_1_i]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_49": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "h_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ],
                        [
                            "h_1 + [h_1_i]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(h_1)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTMCell_19": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_52": {
                "input_size": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rnn_size",
                            "Name"
                        ],
                        [
                            "rnn_size",
                            "Name"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "rnn_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/average_attn.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "self.gating_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tril_46": {
                "variable": {
                    "value": "triangle",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(inputs_len, inputs_len, dtype=torch.float, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "chunk_107": {
                "variable": {
                    "value": "(input_gate, forget_gate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "gating_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gating_layer(torch.cat((inputs, average_outputs), -1))",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(input_gate) * inputs + torch.sigmoid(forget_gate) * average_outputs",
                            "BinOp"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_48": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "inputs_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_49": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "inputs_len + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "input": {
                    "value": "mask.to(inputs.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "(inputs, average_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "input": {
                    "value": "input_gate",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_109": {
                "input": {
                    "value": "forget_gate",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/conv_multi_step_attention.py": {
        "torch": {
            "transpose_16": {
                "input": {
                    "value": "h.view(batch, length, hidden_size, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_67": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_68": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_69": {
                "variable": {
                    "value": "pre_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(base_target_emb + preatt) * SCALE_WEIGHT",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(target, 3)",
                            "Call"
                        ],
                        [
                            "torch.transpose(target, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "encoder_out_top",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "softmax_74": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pre_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(target, encoder_out_top)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_76": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(pre_attn, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.transpose(encoder_out_combine, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_78": {
                "variable": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.unsqueeze(context_output, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_14": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "input": {
                    "value": "encoder_out_combine",
                    "type": "variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_79": {
                "input": {
                    "value": "context_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(attn, torch.transpose(encoder_out_combine, 1, 2))",
                            "Call"
                        ],
                        [
                            "torch.transpose(torch.unsqueeze(context_output, 3), 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/copy_generator.py": {
        "torch": {
            "Linear_91": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.linear_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_120": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear(hidden)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.linear_copy(hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mul_125": {
                "variable": {
                    "value": "out_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.softmax(logits, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - p_copy",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_126": {
                "variable": {
                    "value": "mul_attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "p_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(self.linear_copy(hidden))",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_127": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mul_attn.view(-1, batch, slen).transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "src_map.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_127": {
                "variable": {
                    "value": "copy_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "non_copy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "align == self.unk_index",
                            "Compare"
                        ],
                        [
                            "non_copy | (target != self.unk_index)",
                            "BinOp"
                        ]
                    ]
                },
                "x": {
                    "value": "copy_tok_probs + vocab_probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "copy_tok_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.gather(1, copy_ix).squeeze(1)",
                            "Call"
                        ],
                        [
                            "copy_tok_probs + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_34": {
                "variable": {
                    "value": "blank",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "fill",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "[out_prob, copy_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_257": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-probs.log()",
                            "UnaryOp"
                        ],
                        [
                            "self.criterion(scores, align, target)",
                            "Call"
                        ],
                        [
                            "loss + coverage_loss",
                            "BinOp"
                        ],
                        [
                            "loss.view(-1, batch.batch_size).sum(0)",
                            "Call"
                        ],
                        [
                            "torch.div(loss, tgt_lens).sum()",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "tgt_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch.tgt[:, :, 0].ne(self.padding_idx).sum(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_257": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/embeddings.py": {
        "torch": {
            "zeros_26": {
                "variable": {
                    "value": "pe",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_27": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_27": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_28": {
                "variable": {
                    "value": "div_term",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(0, dim, 2, dtype=torch.float) * -(math.log(10000.0) / dim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_30": {
                "variable": {
                    "value": "pe[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_31": {
                "variable": {
                    "value": "pe[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "position.float() * div_term",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_35": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "vec_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "variable": {
                    "value": "self.make_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "mlp",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_dim, word_vec_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_250": {
                "variable": {
                    "value": "pretrained",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "emb_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_171": {
                "num_embeddings": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": []
                },
                "sparse": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_28": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_193": {
                "in_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sum(emb_dims)",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "word_vec_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/gate.py": {
        "torch": {
            "Linear_33": {
                "variable": {
                    "value": "self.gate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embeddings_size + decoder_size + attention_size",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_34": {
                "variable": {
                    "value": "self.sig",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.source_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "attention_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.target_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_size + decoder_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_40": {
                "variable": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(prev_emb, dec_state, attn_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_56": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_72": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tanh_87": {
                "variable": {
                    "value": "self.tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "(prev_emb, dec_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/global_attention.py": {
        "torch": {
            "Linear_92": {
                "variable": {
                    "value": "self.linear_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "out_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.attn_type == 'mlp'",
                            "Compare"
                        ]
                    ]
                }
            },
            "bmm_194": {
                "variable": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(align.view(batch * target_l, source_l), -1)",
                            "Call"
                        ],
                        [
                            "sparsemax(align.view(batch * target_l, source_l), -1)",
                            "Call"
                        ],
                        [
                            "align_vectors.view(batch, target_l, source_l)",
                            "Call"
                        ],
                        [
                            "align_vectors.squeeze(1)",
                            "Call"
                        ],
                        [
                            "align_vectors.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank + self.linear_cover(cover).view_as(memory_bank)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(memory_bank)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_197": {
                "variable": {
                    "value": "concat_c",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c, source]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_85": {
                "variable": {
                    "value": "self.linear_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.linear_cover",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_134": {
                "variable": {
                    "value": "wquh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "wq + uh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_175": {
                "variable": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "memory_bank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "memory_bank + self.linear_cover(cover).view_as(memory_bank)",
                            "BinOp"
                        ],
                        [
                            "torch.tanh(memory_bank)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "align_vectors",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "align.view(batch * target_l, source_l)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_200": {
                "variable": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_out(concat_c).view(batch, target_l, dim)",
                            "Call"
                        ],
                        [
                            "torch.tanh(attn_h)",
                            "Call"
                        ],
                        [
                            "attn_h.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_h.transpose(0, 1).contiguous()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_87": {
                "variable": {
                    "value": "self.linear_context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dim",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bmm_122": {
                "input": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_t_.view(tgt_batch, tgt_len, tgt_dim)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "h_s_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "h_s.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/modules/multi_headed_attn.py": {
        "torch": {
            "Linear_60": {
                "variable": {
                    "value": "self.linear_keys",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.linear_values",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "self.linear_query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "head_count * self.dim_per_head",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Softmax_66": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Dropout_67": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "model_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "variable": {
                    "value": "query_key",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "self.linear_query(query)",
                            "Call"
                        ],
                        [
                            "shape(query)",
                            "Call"
                        ],
                        [
                            "query / math.sqrt(dim_per_head)",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "key.transpose(2, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "variable": {
                    "value": "context_original",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "drop_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout(attn)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.linear_values(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ],
                        [
                            "torch.cat((layer_cache['self_values'], value), dim=2)",
                            "Call"
                        ],
                        [
                            "shape(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_74": {
                "variable": {
                    "value": "self.relative_positions_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_relative_positions * 2 + 1",
                            "BinOp"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "self.dim_per_head",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_140": {
                "variable": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_keys'], key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(layer_cache['self_values'], value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/position_ffn.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.w_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.w_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_ff",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LayerNorm_20": {
                "variable": {
                    "value": "self.layer_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dropout_21": {
                "variable": {
                    "value": "self.dropout_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_22": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_23": {
                "variable": {
                    "value": "self.dropout_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/modules/sparse_activations.py": {
        "torch": {
            "arange_15": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_32": {
                "variable": {
                    "value": "(input_srt, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input - max_val",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ctx.dim",
                            "Attribute"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_73": {
                "variable": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "grad_input - v_hat",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "grad_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad_output.clone()",
                            "Call"
                        ],
                        [
                            "torch.where(output != 0, grad_input - v_hat, grad_input)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_97": {
                "input": {
                    "value": "sparsemax(input, self.dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/sparse_losses.py": {
        "torch": {
            "where_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "support",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input > tau_z",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "input ** 2 - tau_z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "torch.tensor(0.0, device=input.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_23": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_36": {
                "variable": {
                    "value": "sparsemax_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input - tau_z",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_37": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sparsemax_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(input - tau_z, min=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_31": {
                "input": {
                    "value": "x / 2 - z_k + 0.5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_25": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/structured_attention.py": {
        "torch": {
            "eye_22": {
                "n": {
                    "value": "input.size(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ne_22": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_23": {
                "input": {
                    "value": "lap.sum(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_37": {
                "input": {
                    "value": "roots_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input[b].diag().exp().mul(inv_laplacian.transpose(0, 1)[0])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/modules/util_class.py": {
        "torch": {
            "cat_30": {
                "tensors": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[f(x) for (f, x) in zip(self, inputs_)]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/modules/weight_norm.py": {
        "torch": {
            "Parameter_50": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_94": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(namespace, var_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_158": {
                "variable": {
                    "value": "scalar",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v.view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_167": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(v.size()) - 2)).expand_as(v) * v",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv_transpose2d_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar.view(self.out_channels, *[1] * (len(v.size()) - 1)).expand_as(v) * v",
                            "BinOp"
                        ],
                        [
                            "scalar.view(self.in_channels, self.out_channels, *[1] * (len(v.size()) - 2)).expand_as(v) * v",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "*size": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_115": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "self.V.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_190": {
                "*size": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "linear_74": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V.data / self.V.data.norm(2, 1).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.view(self.out_channels, -1).norm(2, 1).view(self.out_channels, *[1] * (len(self.kernel_size) + 1)).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.transpose(0, 1).contiguous().view(self.out_channels, -1).norm(2, 1).view(self.in_channels, self.out_channels, *[1] * len(self.kernel_size)).expand_as(self.V.data)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_80": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_95": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "getattr(namespace, var_name)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_95": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_132": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V.data / self.V.data.norm(2, 1).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.view(self.out_channels, -1).norm(2, 1).view(self.out_channels, *[1] * (len(self.kernel_size) + 1)).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.transpose(0, 1).contiguous().view(self.out_channels, -1).norm(2, 1).view(self.in_channels, self.out_channels, *[1] * len(self.kernel_size)).expand_as(self.V.data)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_140": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv_transpose2d_208": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.linear(x, v)",
                            "Call"
                        ],
                        [
                            "scalar.view(1, -1).expand_as(x) * x + b.view(1, -1).expand_as(x)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, w, b, self.stride, self.padding, self.dilation, self.groups)",
                            "Call"
                        ],
                        [
                            "F.conv_transpose2d(x, w, b, self.stride, self.padding, self.output_padding, self.groups)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "v_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.V.data / self.V.data.norm(2, 1).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.view(self.out_channels, -1).norm(2, 1).view(self.out_channels, *[1] * (len(self.kernel_size) + 1)).expand_as(self.V.data)",
                            "BinOp"
                        ],
                        [
                            "self.V.data / self.V.data.transpose(0, 1).contiguous().view(self.out_channels, -1).norm(2, 1).view(self.in_channels, self.out_channels, *[1] * len(self.kernel_size)).expand_as(self.V.data)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "self.output_padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_219": {
                "input": {
                    "value": "v_init + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_238": {
                "input": {
                    "value": "v.transpose(0, 1).contiguous().view(self.out_channels, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_238": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_68": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_127": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_202": {
                "*size": {
                    "value": "self.V.data.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_attention.py": {
        "torch": {
            "randn_25": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_lengths.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "source_lengths.max()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "source_lengths.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/tests/test_audio_dataset.py": {
        "torch": {
            "randint_35": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "params['max_len']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(params['batch_size'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_47": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_len']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(bs,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_50": {
                "variable": {
                    "value": "fake_input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(bs, 1, nfeats, max_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "init_case['pad_index']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_53": {
                "variable": {
                    "value": "fake_input[b, :, :, :lengths[b]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, nfeats, lengths[b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_192": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "int(50000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "high": {
                    "value": "int(1500000.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(cls._N_EXAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "(params['nfeats'], lengths[b])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_148": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randint(1, params['max_len'], (params['batch_size'],)).tolist()",
                            "Call"
                        ],
                        [
                            "torch.randint(1, max_len, (bs,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.int)",
                            "Call"
                        ],
                        [
                            "torch.randint(int(50000.0), int(1500000.0), (cls._N_EXAMPLES,))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_195": {
                "*size": {
                    "value": "(cls._N_CHANNELS, lengths[i])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "data": {
                    "value": "float(init_case['pad_index'])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_beam_search.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_230": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_289": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_293": {
                "variable": {
                    "value": "inp_lens",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_383": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 4, 5, 3, 2, 1]], dtype=torch.float)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_401": {
                "variable": {
                    "value": "scores_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 1.5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.49, 0.48, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_433": {
                "variable": {
                    "value": "scores_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5000, 0.48, 0, 0], [0, 0, 50, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_472": {
                "variable": {
                    "value": "scores_3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([[0, 0, 5000, 0, 5000, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5000, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 50, 0, 0.2, 0.2, 0.2, 0.2]])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_513": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_532": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_173": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_177": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_182": {
                "variable": {
                    "value": "device_init",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_243": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_269": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_304": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_330": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_379": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.BATCH_SZ * self.BEAM_SZ",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.INP_SEQ_LEN",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "*size": {
                    "value": "(1, cov.shape[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_46": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_78": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_127": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_140": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_187": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz * beam_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_205": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz * beam_sz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_240": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_289": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_383": {
                "data": {
                    "value": "[[0, 0, 0, 4, 5, 3, 2, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_401": {
                "data": {
                    "value": "[[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 1.5, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0.49, 0.48, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_433": {
                "data": {
                    "value": "[[0, 0, 0, 0.3, 0, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 5000, 0.48, 0, 0], [0, 0, 50, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_472": {
                "data": {
                    "value": "[[0, 0, 5000, 0, 5000, 0.51, 0.2, 0], [0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 5000, 0, 0], [0, 0, 0, 0.2, 0.2, 0.2, 0.2, 0.2], [0, 0, 50, 0, 0.2, 0.2, 0.2, 0.2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "randint_514": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.BATCH_SZ,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_533": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.BATCH_SZ,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_43": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "expected_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0] + [-float('inf')] * (beam_sz - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_75": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_124": {
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_163": {
                "data": {
                    "value": "self.BLOCKED_SCORE",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_copy_generator.py": {
        "torch": {
            "randn_28": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'], init_case['input_size'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'], params['max_seq_len'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_32": {
                "variable": {
                    "value": "src_map",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['max_seq_len'], params['batch_size'], params['n_extra_words'])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_96": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'], init_case['vocab_size'] + n_unique_src_words)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn((params['batch_size'] * params['tgt_max_len'], init_case['vocab_size'] + n_unique_src_words))",
                            "Call"
                        ],
                        [
                            "softmax(scores, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_99": {
                "variable": {
                    "value": "align",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "n_unique_src_words",
                    "type": "variable",
                    "possible_values": [
                        [
                            "13",
                            "Constant"
                        ]
                    ]
                },
                "size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_101": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "init_case['vocab_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(params['batch_size'] * params['tgt_max_len'],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "variable": {
                    "value": "dummy_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_57": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_embeddings.py": {
        "torch": {
            "randint_70": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "max_seq_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['max_seq_len']",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "empty_72": {
                "variable": {
                    "value": "inps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_seq_len, batch_size, len(voc_sizes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_76": {
                "variable": {
                    "value": "inps[:len_, b, f]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "voc_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(len_,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "SGD_142": {
                "variable": {
                    "value": "dummy_optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "trainable_params.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_greedy_search.py": {
        "torch": {
            "log_softmax_20": {
                "variable": {
                    "value": "valid_score_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_24": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_31": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_40": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_60": {
                "variable": {
                    "value": "valid_score_dist_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_62": {
                "variable": {
                    "value": "valid_score_dist_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_65": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "full_72": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_81": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_95": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz - 1, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_102": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_112": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz - 2, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_117": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_132": {
                "variable": {
                    "value": "valid_score_dist_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 5.0, 4.0, 3.0, 2.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_134": {
                "variable": {
                    "value": "valid_score_dist_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([6.0, 1.0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randint_137": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[6.0, 5.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_145": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_154": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_174": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_sz - 1, n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_181": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_197": {
                "variable": {
                    "value": "word_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(samp.alive_seq.shape[0], n_words)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-float('inf')",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_202": {
                "variable": {
                    "value": "attns",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 3]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ],
                        [
                            "[1, 13]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "53",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_62": {
                "data": {
                    "value": "[6.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_69": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_132": {
                "data": {
                    "value": "[6.0, 5.0, 4.0, 3.0, 2.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_134": {
                "data": {
                    "value": "[6.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_image_dataset.py": {
        "torch": {
            "randint_50": {
                "variable": {
                    "value": "cls.n_rows",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "314",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(cls._N_EXAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_51": {
                "variable": {
                    "value": "cls.n_cols",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "314",
                    "type": "int",
                    "possible_values": []
                },
                "size": {
                    "value": "(cls._N_EXAMPLES,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_models.py": {
        "torch": {
            "ones_37": {
                "variable": {
                    "value": "test_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "test_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "test_length",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_44": {
                "variable": {
                    "value": "test_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ],
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "17",
                            "MethodArgument"
                        ],
                        [
                            "17",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_45": {
                "variable": {
                    "value": "test_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_53": {
                "variable": {
                    "value": "test_src",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "nfft",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(sample_rate * window_size / 2) + 1)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "37",
                            "MethodArgument"
                        ],
                        [
                            "37",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ones_54": {
                "variable": {
                    "value": "test_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ],
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "7",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_55": {
                "variable": {
                    "value": "test_length",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_102": {
                "variable": {
                    "value": "test_hid",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.enc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.enc_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_103": {
                "variable": {
                    "value": "test_out",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "outputsize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_172": {
                "variable": {
                    "value": "outputsize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "outputsize",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "tgt_l - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.dec_rnn_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[test_src, test_src]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "compare_to",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.src_word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "compare_to",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "source_l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "bsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "opt.src_word_vec_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_structured_attention.py": {
        "torch": {
            "rand_10": {
                "variable": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_13": {
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/tests/test_translation_server.py": {
        "torch": {
            "is_available_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_device_57": {
                "device": {
                    "value": "torch.device('cuda', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_73": {
                "device": {
                    "value": "torch.device('cuda', 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_57": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_73": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_91": {
                "device": {
                    "value": "torch.device('cuda', 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/train_single.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.train_from",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "vocab",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.data + '.vocab.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "set_device_38": {
                "device": {
                    "value": "device_id",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/trainer.py": {
        "torch": {
            "no_grad_308": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/beam_search.py": {
        "torch": {
            "zeros_76": {
                "variable": {
                    "value": "self.top_beam_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_82": {
                "variable": {
                    "value": "self._batch_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_119": {
                "variable": {
                    "value": "self.best_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-10000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_121": {
                "variable": {
                    "value": "self._beam_offset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.batch_size * self.beam_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_124": {
                "variable": {
                    "value": "self.topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0] + [float('-inf')] * (self.beam_size - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_128": {
                "variable": {
                    "value": "self.topk_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_130": {
                "variable": {
                    "value": "self.topk_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.beam_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_132": {
                "variable": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, self.beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_194": {
                "variable": {
                    "value": "self.alive_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_seq.index_select(0, self.select_indices), self.topk_ids.view(_B * self.beam_size, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_278": {
                "variable": {
                    "value": "non_finished",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "non_finished_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "topk_179": {
                "input": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs / length_penalty",
                            "BinOp"
                        ],
                        [
                            "curr_scores.reshape(_B, self.beam_size * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "self.beam_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "out": {
                    "value": "(self.topk_scores, self.topk_ids)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mul_185": {
                "input": {
                    "value": "self.topk_scores",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "length_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_scorer.length_penalty(step + 1, alpha=self.global_scorer.alpha)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self.topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "div_188": {
                "input": {
                    "value": "self.topk_ids",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs.size(-1)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "self._batch_index",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "self.alive_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_attn, current_attn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_203": {
                "variable": {
                    "value": "self._prev_penalty",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.topk_log_probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/decode_strategy.py": {
        "torch": {
            "full_90": {
                "variable": {
                    "value": "self.alive_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "[self.batch_size * self.parallel_paths, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self.bos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_93": {
                "variable": {
                    "value": "self.is_finished",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.batch_size, self.parallel_paths]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_89": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/greedy_search.py": {
        "torch": {
            "div_40": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sampling_temp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Multinomial_52": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ]
                    ]
                },
                "total_count": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_54": {
                "variable": {
                    "value": "topk_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.sample()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "self.select_indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_110": {
                "variable": {
                    "value": "self.original_batch_idx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mb_device",
                            "Name"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_142": {
                "variable": {
                    "value": "self.alive_seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_seq, topk_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "topk_43": {
                "variable": {
                    "value": "(top_values, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "keep_topk",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "lt_49": {
                "variable": {
                    "value": "ignore",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(logits, sampling_temp)",
                            "Call"
                        ],
                        [
                            "logits.masked_fill(ignore, -10000)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "kth_best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_values[:, -1].view([-1, 1])",
                            "Call"
                        ],
                        [
                            "kth_best.repeat([1, logits.shape[1]]).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_147": {
                "variable": {
                    "value": "self.alive_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.alive_attn, attn]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/penalties.py": {
        "torch": {
            "max_76": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sum_76": {
                "variable": {
                    "value": "penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "variable": {
                    "value": "none",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "cov.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_71": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_71": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/translation.py": {
        "torch": {
            "sort_79": {
                "variable": {
                    "value": "(inds, perm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "batch.indices",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/translation_server.py": {
        "torch": {
            "set_device_528": {
                "device": {
                    "value": "self.opt.gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_cache_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_524": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/translator.BAK.DEBUG.py": {
        "torch": {
            "full_543": {
                "variable": {
                    "value": "bos_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[paded_tgt.size(0), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_545": {
                "variable": {
                    "value": "full_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bos_tensor, paded_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_640": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_150": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self._gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_151": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_540": {
                "data": {
                    "value": "list(zip_longest(*flatten_tgt, fillvalue=pad))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_598": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/translate/translator.py": {
        "torch": {
            "full_554": {
                "variable": {
                    "value": "bos_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[paded_tgt.size(0), 1]",
                    "type": "List",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_556": {
                "variable": {
                    "value": "full_tgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(bos_tensor, paded_tgt)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_651": {
                "variable": {
                    "value": "src_lengths",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_150": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "self._gpu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_151": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_551": {
                "data": {
                    "value": "list(zip_longest(*flatten_tgt, fillvalue=pad))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/alignment.py": {
        "torch": {
            "ones_18": {
                "variable": {
                    "value": "value_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_fill]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_coo_tensor_19": {
                "variable": {
                    "value": "dense_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "index_tensor.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "values": {
                    "value": "value_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([n_fill], dtype=torch.float)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "threshold_24": {
                "input": {
                    "value": "row_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dense_tensor.sum(-1, keepdim=True)",
                            "Call"
                        ]
                    ]
                },
                "threshold": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/cnn_factory.py": {
        "torch": {
            "unsqueeze_15": {
                "input": {
                    "value": "torch.transpose(x, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ],
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_45": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_15": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x + conv(x)",
                            "BinOp"
                        ],
                        [
                            "x * SCALE_WEIGHT",
                            "BinOp"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_33": {
                "input": {
                    "value": "gate",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/distributed.py": {
        "torch": {}
    },
    "src/onmt/utils/loss.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if onmt.utils.misc.use_gpu(opt) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "full_206": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(tgt_vocab_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "smoothing_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label_smoothing / (tgt_vocab_size - 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "min_304": {
                "variable": {
                    "value": "covloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std_attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_304": {
                "variable": {
                    "value": "covloss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_221": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "model_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.one_hot.repeat(target.size(0), 1)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "backward_381": {
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "grad_tensors": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "NLLLoss_45": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "padding_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tgt_field.vocab.stoi[tgt_field.pad_token]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_327": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_378": {
                "tensor": {
                    "value": "state[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "shard_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/onmt/utils/misc.py": {
        "torch": {
            "clamp_111": {
                "variable": {
                    "value": "distance_mat_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(-length + 1, 1, 1).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "range_mat - range_mat.transpose(0, 1)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-max_relative_positions",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "max_relative_positions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_49": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_len or lengths.max()",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "lengths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lt_49": {
                "input": {
                    "value": "lengths.unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_106": {
                "variable": {
                    "value": "distance_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-length + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_106": {
                "variable": {
                    "value": "distance_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_108": {
                "variable": {
                    "value": "range_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.shape[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z.transpose(1, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_130": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_t.reshape(length, heads * batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/optimizers.py": {
        "torch": {
            "SGD_38": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adagrad_40": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_accumulator_value": {
                    "value": "opt.adagrad_accumulator_init",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adadelta_45": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_418": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__359": {
                "parameters": {
                    "value": "group['params']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self._max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_508": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_avg_sq_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_C']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "exp_avg_sq_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_R']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "div_518": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "exp_avg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg']",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - beta1_t ** state['step']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_523": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(exp_avg_sq_c, exp_avg_sq_r).div_(torch.sum(exp_avg_sq_r))",
                            "Call"
                        ],
                        [
                            "exp_avg_sq",
                            "Name"
                        ],
                        [
                            "exp_avg_sq_hat",
                            "Name"
                        ]
                    ]
                },
                "other": {
                    "value": "1 - beta2_t ** state['step']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "div_526": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "torch.div(exp_avg, 1 - beta1_t ** state['step'])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v.sqrt()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_663": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_665": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[p for p in model.parameters() if p.requires_grad]",
                            "ListComp"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.adam_beta1, opt.adam_beta2]",
                            "List"
                        ],
                        [
                            "(0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_445": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shape[0], shape[1] * shape[2])",
                            "Tuple"
                        ],
                        [
                            "(shape[0] * functools.reduce(operator.mul, temp_shape[tmp_div:], 1), shape[1] * functools.reduce(operator.mul, temp_shape[:tmp_div], 1))",
                            "Tuple"
                        ],
                        [
                            "p.data.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_451": {
                "variable": {
                    "value": "state[exp_avg_sq_R]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, new_shape[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_455": {
                "variable": {
                    "value": "state[exp_avg_sq_C]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "(new_shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_459": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shape[0], shape[1] * shape[2])",
                            "Tuple"
                        ],
                        [
                            "(shape[0] * functools.reduce(operator.mul, temp_shape[tmp_div:], 1), shape[1] * functools.reduce(operator.mul, temp_shape[:tmp_div], 1))",
                            "Tuple"
                        ],
                        [
                            "p.data.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_464": {
                "variable": {
                    "value": "state[exp_avg_sq_hat]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(shape[0], shape[1] * shape[2])",
                            "Tuple"
                        ],
                        [
                            "(shape[0] * functools.reduce(operator.mul, temp_shape[tmp_div:], 1), shape[1] * functools.reduce(operator.mul, temp_shape[:tmp_div], 1))",
                            "Tuple"
                        ],
                        [
                            "p.data.size()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "p.grad.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_521": {
                "input": {
                    "value": "exp_avg_sq_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_hat']",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "exp_avg_sq_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_hat']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_672": {
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_501": {
                "input": {
                    "value": "torch.mul(grad, grad).add_(group['eps1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_505": {
                "input": {
                    "value": "torch.mul(grad, grad).add_(group['eps1'])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_509": {
                "input": {
                    "value": "exp_avg_sq_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state['exp_avg_sq_R']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_523": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mul_501": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "mul_505": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                },
                "other": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.view(new_shape)",
                            "Call"
                        ],
                        [
                            "p.grad.data",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Adam_70": {
                "params": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.adam_beta1, opt.adam_beta2]",
                            "List"
                        ],
                        [
                            "(0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SparseAdam_75": {
                "params": {
                    "value": "sparse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "opt.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "betas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[opt.adam_beta1, opt.adam_beta2]",
                            "List"
                        ],
                        [
                            "(0.9",
                            "MethodArgument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/parse.py": {
        "torch": {
            "is_available_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/report_manager.py": {
        "torch": {
            "SummaryWriter_19": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "tensorboard_log_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt.tensorboard_log_dir",
                            "Attribute"
                        ],
                        [
                            "tensorboard_log_dir + datetime.now().strftime('/%b-%d_%H-%M-%S')",
                            "BinOp"
                        ]
                    ]
                },
                "comment": {
                    "value": "Unmt",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/onmt/utils/rnn_factory.py": {
        "torch": {}
    },
    "src/onmt/utils/statistics.py": {
        "torch": {}
    },
    "src/release_model.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_25": {
                "obj": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(opt.model)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "opt.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}