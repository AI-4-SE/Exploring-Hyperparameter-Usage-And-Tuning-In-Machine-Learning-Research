{
    "libs/models/s2g.py": {
        "torch": {
            "tensor_116": {
                "variable": {
                    "value": "target_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[self.convert_to_new_id(x.item()) for x in y] for y in target_tokens]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "source_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "num_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "num_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(num_mask, dtype=torch.bool, device=source_mask.device)",
                            "Call"
                        ],
                        [
                            "source_tokens.new_zeros(1, len(num_pos) + self.num_constants, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_255": {
                "variable": {
                    "value": "all_node_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_317": {
                "variable": {
                    "value": "out_score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((op, num_score), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_318": {
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "libs/models/s2gkg.py": {
        "torch": {
            "Embedding_98": {
                "variable": {
                    "value": "self.kg_embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.nodes)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self.problem_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.GNN_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_145": {
                "variable": {
                    "value": "target_tokens",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[self.convert_to_new_id(x.item()) for x in y] for y in target_tokens]",
                            "ListComp"
                        ],
                        [
                            "[x.pop() if len(x) > 0 else target_tokens.new_zeros([1, self.GNN_out]) for x in all_knowledge_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[x.pop() for x in all_knowledge_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "source_tokens.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_168": {
                "variable": {
                    "value": "num_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "num_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(num_mask, dtype=torch.bool, device=source_mask.device)",
                            "Call"
                        ],
                        [
                            "source_tokens.new_zeros(1, len(num_pos) + self.num_constants, dtype=torch.bool)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "source_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "problem_types",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.problem_classifier(problem_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_295": {
                "variable": {
                    "value": "all_node_outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_node_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_node_outputs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_476": {
                "variable": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "self.edges",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "t_476": {
                "variable": {
                    "value": "edge_index",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_481": {
                "variable": {
                    "value": "kg_nodes",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "self.nodes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_198": {
                "variable": {
                    "value": "knowledge_representations",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[self.convert_to_new_id(x.item()) for x in y] for y in target_tokens]",
                            "ListComp"
                        ],
                        [
                            "[x.pop() if len(x) > 0 else target_tokens.new_zeros([1, self.GNN_out]) for x in all_knowledge_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[x.pop() for x in all_knowledge_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_203": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_334": {
                "variable": {
                    "value": "problem_types",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.problem_classifier(problem_output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_362": {
                "variable": {
                    "value": "knowledge_representations",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[self.convert_to_new_id(x.item()) for x in y] for y in target_tokens]",
                            "ListComp"
                        ],
                        [
                            "[x.pop() if len(x) > 0 else target_tokens.new_zeros([1, self.GNN_out]) for x in all_knowledge_embeddings]",
                            "ListComp"
                        ],
                        [
                            "[x.pop() for x in all_knowledge_embeddings]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_368": {
                "variable": {
                    "value": "out_score",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((op, num_score), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_369": {
                "tensors": {
                    "value": "(op, num_score)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "libs/models/sequence_to_tree_base.py": {
        "torch": {}
    },
    "libs/modules/GNNs.py": {
        "torch": {
            "relu_37": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_38": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_41": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.conv1(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ],
                        [
                            "F.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(x, edge_index)",
                            "Call"
                        ],
                        [
                            "F.relu(x)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "libs/modules/child_state_generators.py": {
        "torch": {
            "Dropout_92": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.generate_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_95": {
                "variable": {
                    "value": "self.generate_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_97": {
                "variable": {
                    "value": "self.generate_lg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.generate_rg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tanh_117": {
                "variable": {
                    "value": "l_child",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_l(torch.cat((current_state, current_context, current_input), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "variable": {
                    "value": "l_child_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_lg(torch.cat((current_state, current_context, current_input), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_121": {
                "variable": {
                    "value": "r_child",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_r(torch.cat((current_state, current_context, current_input), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "r_child_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.generate_rg(torch.cat((current_state, current_context, current_input), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "child_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(l_child.unsqueeze(-2), r_child.unsqueeze(-2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GRUCell_161": {
                "variable": {
                    "value": "self._generator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_162": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_186": {
                "variable": {
                    "value": "child_states",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "child_states",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat((l_child.unsqueeze(-2), r_child.unsqueeze(-2)), -2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(child_states).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_186": {
                "variable": {
                    "value": "child_states",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "[current_state, current_context]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "(current_state, current_context, current_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "tensors": {
                    "value": "(current_state, current_context, current_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "(current_state, current_context, current_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "tensors": {
                    "value": "(current_state, current_context, current_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "libs/modules/decoder.py": {
        "torch": {
            "Dropout_17": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_19": {
                "variable": {
                    "value": "self.embedding_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_23": {
                "variable": {
                    "value": "self.concat_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_24": {
                "variable": {
                    "value": "self.concat_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.concat_lg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_26": {
                "variable": {
                    "value": "self.concat_rg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + GNN_out",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "op_nums",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "current_node",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_node_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_75": {
                "variable": {
                    "value": "embedding_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding_weight, num_pades)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "leaf_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_node, current_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "leaf_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(leaf_input, know_representations.squeeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_106": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "energy_in",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_131": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_132": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "energy_in",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_145": {
                "variable": {
                    "value": "score_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "variable": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(score_feature)",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attn_energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tanh_48": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_l(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_lg(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_r(torch.cat((ld, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_55": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_rg(torch.cat((ld, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_118": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_54": {
                "tensors": {
                    "value": "(ld, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_55": {
                "tensors": {
                    "value": "(ld, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "libs/modules/gts_modules.py": {
        "torch": {
            "Embedding_20": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Name",
                    "possible_values": []
                },
                "padding_idx": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GRU_23": {
                "variable": {
                    "value": "self.gru_pade",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": null,
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_30": {
                "variable": {
                    "value": "packed",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.embedding(input_seqs)",
                            "Call"
                        ],
                        [
                            "self.em_dropout(embedded)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "input_lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_34": {
                "variable": {
                    "value": "(pade_outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "pade_outputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pade_outputs[:, :, :self.hidden_size] + pade_outputs[:, :, self.hidden_size:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Dropout_59": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_61": {
                "variable": {
                    "value": "self.embedding_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, input_size, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "self.concat_l",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_66": {
                "variable": {
                    "value": "self.concat_r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.concat_lg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_68": {
                "variable": {
                    "value": "self.concat_rg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.ops",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "op_nums",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "current_node",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "current_node_temp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_117": {
                "variable": {
                    "value": "embedding_weight",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedding_weight, num_pades)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "leaf_input",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_node, current_context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_145": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_154": {
                "variable": {
                    "value": "energy_in",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, num_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_169": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size + input_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "variable": {
                    "value": "self.score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_181": {
                "variable": {
                    "value": "energy_in",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(hidden, encoder_outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_184": {
                "variable": {
                    "value": "score_feature",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_191": {
                "variable": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_energies",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.score(score_feature)",
                            "Call"
                        ],
                        [
                            "attn_energies.squeeze(1)",
                            "Call"
                        ],
                        [
                            "attn_energies.view(max_len, this_batch_size).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "attn_energies.masked_fill_(seq_mask, -1000000000000.0)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(attn_energies, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_208": {
                "variable": {
                    "value": "self.em_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_209": {
                "variable": {
                    "value": "self.merge",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.merge_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * 2 + embedding_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tanh_217": {
                "variable": {
                    "value": "sub_tree",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_219": {
                "variable": {
                    "value": "sub_tree_g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.merge_g(torch.cat((node_embedding, sub_tree_1, sub_tree_2), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_62": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "input_size",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tanh_89": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_l(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_90": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_lg(c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_r(torch.cat((ld, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_96": {
                "variable": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.concat_rg(torch.cat((ld, c), 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_156": {
                "input": {
                    "value": "self.attn(energy_in)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_220": {
                "tensors": {
                    "value": "(node_embedding, sub_tree_1, sub_tree_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_95": {
                "tensors": {
                    "value": "(ld, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "tensors": {
                    "value": "(ld, c)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "libs/tools/gts_utils.py": {
        "torch": {
            "arange_108": {
                "variable": {
                    "value": "seq_range",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "max_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sequence_length.data.max()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_softmax_136": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_176": {
                "variable": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_flat + 1e-12",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_140": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_181": {
                "input": {
                    "value": "log_probs_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functional.log_softmax(logits_flat, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.log(logits_flat + 1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "index": {
                    "value": "target_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}