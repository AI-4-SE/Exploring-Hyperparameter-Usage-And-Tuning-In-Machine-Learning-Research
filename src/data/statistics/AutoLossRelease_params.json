{
    "dataio/gen_cls_data.py": {
        "sklearn": {
            "make_classification_47": {
                "variable": {
                    "value": "cls_set",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_train_ctrl + num_valid_ctrl + num_train_task + num_valid_task + num_test",
                            "BinOp"
                        ]
                    ]
                },
                "n_features": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "config.dim_input_task",
                            "Attribute"
                        ]
                    ]
                },
                "n_informative": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_clusters_per_class": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_redundant": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "dataio/dataset.py": {
        "tensorflow": {}
    },
    "dataio/dataset_cifar10.py": {
        "tensorflow": {}
    },
    "dataio/dataset_mnist.py": {
        "tensorflow": {}
    },
    "models/basic_model.py": {
        "tensorflow": {
            "Graph_21": {
                "variable": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_23": {
                "variable": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_24": {
                "variable": {
                    "value": "configProto",
                    "type": "Variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_25": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "configProto",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_checkpoint_state_44": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "checkpoint_dir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.checkpoint_dir",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "models/cls.py": {
        "tensorflow": {
            "truncated_normal_19": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'b'",
                            "MethodArgument"
                        ],
                        [
                            "'b'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "constant_23": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'b'",
                            "MethodArgument"
                        ],
                        [
                            "'b'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Variable_20": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1, name=name)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_24": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1, name=name)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape, name=name)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_89": {
                "variable": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_101": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(self.x_plh, w1) + b1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "self.loss_ce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.y_plh, logits=self.pred, name='loss')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_115": {
                "variable": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_type": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_116": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(self.pred, 1, output_type=tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_118": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_121": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.lr_task",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_initializer_139": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_140": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_105": {
                "a": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(self.x_plh, w1) + b1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([h_size, y_size], name='w2')",
                            "Call"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_110": {
                "labels": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_118": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(y_, self.y_plh)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_101": {
                "a": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([x_size, h_size], name='w1')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/controller_ppo.py": {
        "tensorflow": {
            "stack_39": {
                "variable": {
                    "value": "a_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(tf.shape(self.action)[0], dtype=tf.int32), self.action]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_nd_41": {
                "variable": {
                    "value": "pi_wrt_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pi + 1e-08",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.pi, {self.state: states})[0]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "a_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.shape(self.action)[0], dtype=tf.int32), self.action], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "pi_wrt_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_nd_42": {
                "variable": {
                    "value": "old_pi_wrt_a",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "old_pi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "old_pi + 1e-08",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "a_indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.shape(self.action)[0], dtype=tf.int32), self.action], axis=1)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "old_pi_wrt_a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_50": {
                "variable": {
                    "value": "adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.target_value - value",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(adv, name='critic_adv_stop_gradient')",
                            "Call"
                        ],
                        [
                            "self.target_value - value",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(adv, name='actor_adv_stop_gradient')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "critic_adv_stop_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_60": {
                "variable": {
                    "value": "adv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.target_value - value",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(adv, name='critic_adv_stop_gradient')",
                            "Call"
                        ],
                        [
                            "self.target_value - value",
                            "BinOp"
                        ],
                        [
                            "tf.stop_gradient(adv, name='actor_adv_stop_gradient')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "actor_adv_stop_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_78": {
                "variable": {
                    "value": "optimizer1",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_79": {
                "variable": {
                    "value": "optimizer2",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_83": {
                "variable": {
                    "value": "self.tvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.exp_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variables_initializer_85": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.tvars",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_86": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "var_list": {
                    "value": "self.tvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_54": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self.target_value - value)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_68": {
                "input_tensor": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_177": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_s]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_182": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "reward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "self.target_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_187": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_207": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.fully_connected(inputs=hidden, num_outputs=dim_a, activation_fn=None, trainable=trainable, scope='fc2')",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_209": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'{}/{}'.format(self.exp_name, scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_227": {
                "variable": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.value, feed_dict)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.fully_connected(inputs=hidden, num_outputs=1, activation_fn=None, scope='fc2')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(value)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_collection_229": {
                "variable": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'{}/{}'.format(self.exp_name, scope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "critic_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "actor_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "assign_76": {
                "ref": {
                    "value": "oldp",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_169": {
                "name_or_scope": {
                    "value": "exp_name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'MlpPPO'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_176": {
                "name_or_scope": {
                    "value": "placeholder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "range_39": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_54": {
                "x": {
                    "value": "self.target_value - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_64": {
                "t": {
                    "value": "ratio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pi_wrt_a / old_pi_wrt_a",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1.0 - cliprange",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + cliprange",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "tf.reduce_sum(pi * tf.log(pi), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_70": {
                "input_tensor": {
                    "value": "tf.minimum(pg_losses1, pg_losses2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_67": {
                "input_tensor": {
                    "value": "pi * tf.log(pi)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "minimum_70": {
                "x": {
                    "value": "pg_losses1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adv * ratio",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pg_losses2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "adv * tf.clip_by_value(ratio, 1.0 - cliprange, 1.0 + cliprange)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_39": {
                "input": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_52": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "square_68": {
                "x": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_67": {
                "x": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pi + 1e-08",
                            "BinOp"
                        ],
                        [
                            "self.sess.run(self.pi, {self.state: states})[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/controller_reinforce.py": {
        "tensorflow": {
            "placeholder_29": {
                "variable": {
                    "value": "self.state_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, s]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.reward_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_32": {
                "variable": {
                    "value": "self.action_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.lr_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_81": {
                "variable": {
                    "value": "self.chosen_action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_82": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(self.action_plh, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gather_85": {
                "variable": {
                    "value": "self.responsible_outputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "tf.reshape(self.output, [-1])",
                    "type": "Call",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.indexes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lr_plh",
                            "Attribute"
                        ]
                    ]
                }
            },
            "trainable_variables_92": {
                "variable": {
                    "value": "self.tvars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_103": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_104": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "placeholder",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "str(idx) + '_plh'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits / config.logit_clipping_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_82": {
                "input": {
                    "value": "self.action_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "input_tensor": {
                    "value": "tf.log(self.responsible_outputs) * self.reward_plh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_71": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[x_size, a_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer(uniform=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_73": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[a_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_76": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits / config.logit_clipping_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_87": {
                "x": {
                    "value": "self.responsible_outputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_83": {
                "input": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "self.state_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', shape=[x_size, a_size], dtype=tf.float32, initializer=initializer)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/gan.py": {
        "tensorflow": {
            "placeholder_82": {
                "variable": {
                    "value": "self.real_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_x]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_84": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_86": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "real_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.real_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "disc_cost_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_114": {
                "variable": {
                    "value": "disc_cost_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real, labels=tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_121": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_125": {
                "variable": {
                    "value": "gen_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake)))",
                            "Call"
                        ],
                        [
                            "self.extra_info['gen_cost']",
                            "Subscript"
                        ]
                    ]
                },
                "xs": {
                    "value": "gen_tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tvars if 'Generator' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_126": {
                "variable": {
                    "value": "disc_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "disc_cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(disc_cost_fake + disc_cost_real) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "disc_tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tvars if 'Discriminator' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_127": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.lr_task",
                            "Attribute"
                        ],
                        [
                            "config.lr_task",
                            "Attribute"
                        ],
                        [
                            "config.lr_task",
                            "Attribute"
                        ]
                    ]
                },
                "beta1": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.beta1",
                            "Attribute"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.beta2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Saver_135": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_136": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 7 * 7 * 2 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7, 7, 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7 * 7 * 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7, 7, 2 * dim_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_188": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 7 * 7 * 2 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7, 7, 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7 * 7 * 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN3')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_212": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 7 * 7 * 2 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7, 7, 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7 * 7 * 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 2 * dim_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_190": {
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 7 * 7 * 2 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7, 7, 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7 * 7 * 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 28 * 28]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_208": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_226": {
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 7 * 7 * 2 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7, 7, 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 28, 28, 1])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 7 * 7 * 2 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN3')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_105": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_110": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_115": {
                "logits": {
                    "value": "disc_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_106": {
                "input": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_111": {
                "input": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_116": {
                "input": {
                    "value": "disc_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/gan_cifar10.py": {
        "tensorflow": {
            "placeholder_53": {
                "variable": {
                    "value": "self.real_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_x]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "noise",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_57": {
                "variable": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_58": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_70": {
                "variable": {
                    "value": "real_data_NCHW",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "real_data_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * (tf.cast(self.real_data, tf.float32) / 255.0 - 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 3, 32, 32]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_71": {
                "variable": {
                    "value": "real_data_NHWC",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "real_data_NCHW",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(real_data_t, [-1, 3, 32, 32])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "real_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "real_data_NHWC",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.transpose(real_data_NCHW, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_77": {
                "variable": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_82": {
                "variable": {
                    "value": "disc_cost_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.zeros_like(disc_fake))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "variable": {
                    "value": "disc_cost_real",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_real, labels=tf.ones_like(disc_real))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gradients_98": {
                "variable": {
                    "value": "gen_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "gen_cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.nn.sigmoid_cross_entropy_with_logits(logits=disc_fake, labels=tf.ones_like(disc_fake)))",
                            "Call"
                        ]
                    ]
                },
                "xs": {
                    "value": "gen_tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tvars if 'Generator' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_99": {
                "variable": {
                    "value": "disc_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "disc_cost",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(disc_cost_fake + disc_cost_real) / 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "disc_tvars",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[v for v in tvars if 'Discriminator' in v.name]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "AdamOptimizer_100": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.lr_task",
                            "Attribute"
                        ]
                    ]
                },
                "beta1": {
                    "value": "beta1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.beta1",
                            "Attribute"
                        ]
                    ]
                },
                "beta2": {
                    "value": "beta2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.beta2",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Saver_108": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_109": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 4 * 4 * 4 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4, 4, 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 32, 32, 3])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 4 * dim_c, name='Conv3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4, 4, 4 * dim_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_168": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 4 * 4 * 4 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4, 4, 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 32, 32, 3])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 4 * dim_c, name='Conv3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN4')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_192": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 32, 32, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_209": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 4 * 4 * 4 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4, 4, 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 32, 32, 3])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 4 * dim_c, name='Conv3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 4 * 4 * 4 * dim_c]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "Generator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 4 * 4 * 4 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4, 4, 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 32, 32, 3])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 4 * dim_c, name='Conv3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 32 * 32 * 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_188": {
                "name_or_scope": {
                    "value": "Discriminator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "tensor": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "layers.linear(input, 4 * 4 * 4 * dim_c, name='LN1')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4, 4, 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Decovn3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.deconv2d(output, output_shape, name='Deconv4')",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [-1, 32, 32, 3])",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, dim_c, name='Conv1')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 2 * dim_c, name='Conv2')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN2')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "layers.conv2d(output, 4 * dim_c, name='Conv3')",
                            "Call"
                        ],
                        [
                            "layers.batchnorm(output, is_training=self.is_training, name='BN3')",
                            "Call"
                        ],
                        [
                            "activation_fn(output)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [-1, 4 * 4 * 4 * dim_c])",
                            "Call"
                        ],
                        [
                            "layers.linear(output, 1, name='LN4')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_78": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_83": {
                "logits": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.zeros_like(disc_fake)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_cross_entropy_with_logits_88": {
                "logits": {
                    "value": "disc_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(real_data)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "tf.ones_like(disc_real)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_69": {
                "x": {
                    "value": "self.real_data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_79": {
                "input": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_84": {
                "input": {
                    "value": "disc_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(fake_data, reuse=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_89": {
                "input": {
                    "value": "disc_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.discriminator(real_data)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/layers.py": {
        "tensorflow": {
            "shape_61": {
                "variable": {
                    "value": "input_shape_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[2, 2, 2, 2], [1, 1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_108": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[2, 2, 2, 2], [1, 1, 1, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_111": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_18": {
                "name": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'LN'",
                            "MethodArgument"
                        ],
                        [
                            "'BN'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_39": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_uniform(np.sqrt(2.0 / (input_size + output_size)), (input_size, output_size))",
                            "Call"
                        ],
                        [
                            "weight_values * gain",
                            "BinOp"
                        ],
                        [
                            "_normal(stdev, (input_size, output_size))",
                            "Call"
                        ],
                        [
                            "_uniform(np.sqrt(4.0 / (fan_in + fan_out)), (k_h, k_w, output_shape[-1], input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "_normal(stdev, (k_h, k_w, output_shape[-1], input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "_uniform(np.sqrt(4.0 / (fan_in + fan_out)), (k_h, k_w, input_shape[-1], output_dim))",
                            "Call"
                        ],
                        [
                            "_normal(stdev, (k_h, k_w, input_shape[-1], output_dim))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_75": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_uniform(np.sqrt(2.0 / (input_size + output_size)), (input_size, output_size))",
                            "Call"
                        ],
                        [
                            "weight_values * gain",
                            "BinOp"
                        ],
                        [
                            "_normal(stdev, (input_size, output_size))",
                            "Call"
                        ],
                        [
                            "_uniform(np.sqrt(4.0 / (fan_in + fan_out)), (k_h, k_w, output_shape[-1], input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "_normal(stdev, (k_h, k_w, output_shape[-1], input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "_uniform(np.sqrt(4.0 / (fan_in + fan_out)), (k_h, k_w, input_shape[-1], output_dim))",
                            "Call"
                        ],
                        [
                            "_normal(stdev, (k_h, k_w, input_shape[-1], output_dim))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_transpose_77": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[2, 2, 2, 2], [1, 1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.run(tvars)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "output_shape": {
                    "value": "output_shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_79": {
                "variable": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "deconv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d_transpose(input, w, output_shape=output_shape, strides=[1, s_h, s_w, 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(deconv, b)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_bias_variable('b', [output_size])",
                            "Call"
                        ],
                        [
                            "_bias_variable('b', [output_shape[-1]])",
                            "Call"
                        ],
                        [
                            "_bias_variable('b', [output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_99": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_values",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_uniform(np.sqrt(2.0 / (input_size + output_size)), (input_size, output_size))",
                            "Call"
                        ],
                        [
                            "weight_values * gain",
                            "BinOp"
                        ],
                        [
                            "_normal(stdev, (input_size, output_size))",
                            "Call"
                        ],
                        [
                            "_uniform(np.sqrt(4.0 / (fan_in + fan_out)), (k_h, k_w, output_shape[-1], input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "_normal(stdev, (k_h, k_w, output_shape[-1], input_shape[-1]))",
                            "Call"
                        ],
                        [
                            "_uniform(np.sqrt(4.0 / (fan_in + fan_out)), (k_h, k_w, input_shape[-1], output_dim))",
                            "Call"
                        ],
                        [
                            "_normal(stdev, (k_h, k_w, input_shape[-1], output_dim))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "conv2d_101": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[2, 2, 2, 2], [1, 1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.run(tvars)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s_h, s_w, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'LN'",
                            "MethodArgument"
                        ],
                        [
                            "'BN'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'LN'",
                            "MethodArgument"
                        ],
                        [
                            "'BN'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'LN'",
                            "MethodArgument"
                        ],
                        [
                            "'BN'",
                            "MethodArgument"
                        ],
                        [
                            "'deconv'",
                            "MethodArgument"
                        ],
                        [
                            "'conv'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_102": {
                "value": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(input, w, strides=[1, s_h, s_w, 1], padding='SAME')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "_bias_variable('b', [output_size])",
                            "Call"
                        ],
                        [
                            "_bias_variable('b', [output_shape[-1]])",
                            "Call"
                        ],
                        [
                            "_bias_variable('b', [output_dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_18": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_41": {
                "a": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.constant([[2, 2, 2, 2], [1, 1, 1, 1]], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.run(tvars)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('W', initializer=weight_values, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models/mnist.py": {
        "tensorflow": {
            "truncated_normal_26": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_30": {
                "variable": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['input']",
                            "Subscript"
                        ],
                        [
                            "data['input']",
                            "Subscript"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_22": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data['input']",
                            "Subscript"
                        ],
                        [
                            "data['input']",
                            "Subscript"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_27": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_31": {
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_54": {
                "variable": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_55": {
                "variable": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_56": {
                "variable": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_60": {
                "variable": {
                    "value": "x_image",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "h_conv1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(x_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "h_conv2",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_84": {
                "variable": {
                    "value": "h_fc1",
                    "type": "Variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_88": {
                "variable": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "h_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.nn.softmax_cross_entropy_with_logits(labels=self.y_plh, logits=y_conv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "train_step",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "equal_100": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(y_conv, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(self.y_plh, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "variable": {
                    "value": "accuracy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_106": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_107": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_94": {
                "a": {
                    "value": "h_fc1_drop",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(h_fc1, self.keep_prob)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_97": {
                "labels": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "y_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_100": {
                "input": {
                    "value": "y_conv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(h_fc1_drop, W_fc2) + b_fc2",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_101": {
                "input": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_102": {
                "x": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(y_conv, 1), tf.argmax(self.y_plh, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight_variable([7 * 7 * 64, 1024])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/nmt.py": {
        "tensorflow": {
            "Variable_43": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                }
            },
            "merge_all_87": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_95": {
                "variable": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "encoder_inputs_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_137": {
                "variable": {
                    "value": "self.keep_prob_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_collection_439": {
                "variable": {
                    "value": "t_vars_encoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'/'.join([self.exp_name, 'encoder'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_collection_443": {
                "variable": {
                    "value": "t_vars_decoder",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "'/'.join([self.exp_name, 'decoder_{}'.format(task)])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_449": {
                "variable": {
                    "value": "opt",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.lr_task",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_453": {
                "variable": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss[task_num]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "trainable_params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "t_vars_encoder + t_vars_decoder",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_456": {
                "variable": {
                    "value": "(clip_gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.gradients(self.loss[task_num], trainable_params)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "config.max_gradient_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_106": {
                "variable": {
                    "value": "decoder_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder_inputs_{}'.format(task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "decoder_inputs_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder_inputs_length_{}'.format(task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "decoder_inputs_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoder_start_token, decoder_inputs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder_inputs_train_{}'.format(task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_127": {
                "variable": {
                    "value": "decoder_targets_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoder_inputs, decoder_end_token]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "'decoder_targets_train_{}'.format(task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DropoutWrapper_148": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_type(config.encoder_hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "cell_type(self.hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.keep_prob_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ResidualWrapper_151": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_type(config.encoder_hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "cell_type(self.hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultiRNNCell_157": {
                "cells": {
                    "value": "[self._build_single_cell() for i in range(config.encoder_depth)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "map_structure_172": {
                "variable": {
                    "value": "encoder_last_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda s: seq2seq.tile_batch(s, config.beam_width)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "self.encoder_last_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_199": {
                "variable": {
                    "value": "_input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.attn_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "attn_input_feeding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_239": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-sqrt3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "sqrt3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.sqrt(3)",
                            "Call"
                        ],
                        [
                            "math.sqrt(3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_242": {
                "variable": {
                    "value": "self.encoder_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_encoder_symbols, config.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-sqrt3, sqrt3, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(-sqrt3, sqrt3, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_247": {
                "variable": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.encoder_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_252": {
                "variable": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.encoder_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dynamic_rnn_261": {
                "variable": {
                    "value": "(self.encoder_outputs, self.encoder_last_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "self.encoder_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.encoder_inputs_embedded",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.encoder_inputs_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "time_major": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_278": {
                "variable": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "-sqrt3",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "sqrt3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "math.sqrt(3)",
                            "Call"
                        ],
                        [
                            "math.sqrt(3)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_280": {
                "variable": {
                    "value": "decoder_embeddings",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[config.num_decoder_symbols[task_num], config.embedding_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_uniform_initializer(-sqrt3, sqrt3, dtype=self.dtype)",
                            "Call"
                        ],
                        [
                            "tf.random_uniform_initializer(-sqrt3, sqrt3, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_286": {
                "variable": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.decoder_hidden_units",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "input_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_290": {
                "variable": {
                    "value": "output_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "units": {
                    "value": "config.num_decoder_symbols[task_num]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "output_projection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DropoutWrapper_471": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_type(config.encoder_hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "cell_type(self.hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "self.keep_prob_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ResidualWrapper_474": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "cell_type(config.encoder_hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ],
                        [
                            "cell_type(self.hidden_units)",
                            "Call"
                        ],
                        [
                            "DropoutWrapper(cell, dtype=self.dtype, output_keep_prob=self.keep_prob_placeholder)",
                            "Call"
                        ],
                        [
                            "ResidualWrapper(cell)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "self.exp_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_98": {
                "input": {
                    "value": "self.encoder_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiRNNCell_228": {
                "cells": {
                    "value": "self.decoder_cell_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_233": {
                "name_or_scope": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_272": {
                "name_or_scope": {
                    "value": "'decoder_{}'.format(task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "embedding_lookup_295": {
                "variable": {
                    "value": "decoder_inputs_embedded",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "decoder_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='embedding', shape=[config.num_decoder_symbols[task_num], config.embedding_size], initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "self.decoder_inputs_train[task_num]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_max_313": {
                "variable": {
                    "value": "max_decoder_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.decoder_inputs_length_train[task_num]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "identity_330": {
                "variable": {
                    "value": "decoder_logits_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_outputs_train.rnn_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_332": {
                "variable": {
                    "value": "decoder_pred_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_logits_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.identity(decoder_outputs_train.rnn_output)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "decoder_pred_train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sequence_mask_336": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "self.decoder_inputs_length_train[task_num]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "maxlen": {
                    "value": "max_decoder_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(self.decoder_inputs_length_train[task_num])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "masks",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_349": {
                "variable": {
                    "value": "decoder_pred_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_pred_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(decoder_logits_train, axis=-1, name='decoder_pred_train')",
                            "Call"
                        ],
                        [
                            "tf.cast(decoder_pred_train, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_350": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_pred_train",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.argmax(decoder_logits_train, axis=-1, name='decoder_pred_train')",
                            "Call"
                        ],
                        [
                            "tf.cast(decoder_pred_train, tf.int32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.decoder_targets_train[task_num]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_352": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "correct_prediction",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.equal(decoder_pred_train, self.decoder_targets_train[task_num])",
                            "Call"
                        ],
                        [
                            "tf.cast(correct_prediction, self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_353": {
                "variable": {
                    "value": "masked_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "correct_prediction * masks",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "divide_354": {
                "variable": {
                    "value": "acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "masked_sum",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(correct_prediction * masks)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reduce_sum(masks)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "'acc_{}'.format(task)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "global_variables_initializer_572": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_113": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_115": {
                "shape": {
                    "value": "[self.batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_201": {
                "values": {
                    "value": "[inputs, attention]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "scalar_361": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seq2seq.sequence_loss(logits=decoder_logits_train, targets=self.decoder_targets_train[task_num], weights=masks, average_across_timesteps=True, average_across_batch=True, name='loss_{}'.format(task))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_354": {
                "input_tensor": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(lengths=self.decoder_inputs_length_train[task_num], maxlen=max_decoder_length, dtype=self.dtype, name='masks')",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_427": {
                "variable": {
                    "value": "decoder_pred_decode",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoder_outputs_decode.sample_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_369": {
                "shape": {
                    "value": "[self.batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_373": {
                "params": {
                    "value": "decoder_embeddings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='embedding', shape=[config.num_decoder_symbols[task_num], config.embedding_size], initializer=initializer, dtype=self.dtype)",
                            "Call"
                        ]
                    ]
                },
                "ids": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "samples['input']",
                            "Subscript"
                        ],
                        [
                            "samples['input']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "models/reg.py": {
        "tensorflow": {
            "placeholder_77": {
                "variable": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "self.y_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=[x_size, 1], stddev=0.1, seed=1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[x_size, x_size], stddev=0.01, seed=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "sum1",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "w1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_95": {
                "variable": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.random_normal(shape=[x_size, 1], stddev=0.1, seed=1)",
                            "Call"
                        ],
                        [
                            "tf.random_normal(shape=[x_size, x_size], stddev=0.01, seed=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "variable": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(self.x_plh, [-1, x_size, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(self.x_plh, [-1, 1, x_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_98": {
                "variable": {
                    "value": "sum2",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(xx, [-1, x_size * x_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.reshape(w2, [x_size * x_size, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "self.loss_mse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(tf.squeeze(self.pred) - self.y_plh)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_122": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.config.lr_task",
                            "Attribute"
                        ]
                    ]
                }
            },
            "global_variables_initializer_139": {
                "variable": {
                    "value": "self.init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_140": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_96": {
                "tensor": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, x_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "self.x_plh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 1, x_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "tensor": {
                    "value": "xx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(self.x_plh, [-1, x_size, 1]), tf.reshape(self.x_plh, [-1, 1, x_size]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, x_size * x_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_99": {
                "tensor": {
                    "value": "w2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.Variable(initial)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_size * x_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_111": {
                "x": {
                    "value": "tf.squeeze(self.pred) - self.y_plh",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_111": {
                "input": {
                    "value": "self.pred",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer.py": {
        "tensorflow": {}
    },
    "utils/inception_score.py": {
        "tensorflow": {
            "Graph_61": {
                "variable": {
                    "value": "graph",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GraphDef_82": {
                "variable": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_84": {
                "variable": {
                    "value": "_",
                    "type": "Variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_103": {
                "variable": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_104": {
                "variable": {
                    "value": "pool3_new",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool3",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[shape[0], shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_106": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "pool3_new",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool3, [shape[0], shape[-1]])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_107": {
                "variable": {
                    "value": "softmax",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tf.matmul(pool3_new, w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_80": {
                "name": {
                    "value": "os.path.join(MODEL_DIR, 'classify_image_graph_def.pb')",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorShape_101": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "utils/inception_score_mnist.py": {
        "tensorflow": {}
    }
}