{
    "log_polar/tf_test.py": {
        "tensorflow": {
            "expand_dims_91": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(600, 400)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([10]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([10, 2, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(600, 400)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([10]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([10, 2, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_93": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(600, 400)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([10]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([10, 2, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tf.stack([10])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(600, 400)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(grid, 0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "tf.tile(grid, tf.stack([10]))",
                            "Call"
                        ],
                        [
                            "tf.reshape(grid, tf.stack([10, 2, -1]))",
                            "Call"
                        ],
                        [
                            "tf.concat(axis=0, values=[x_t_flat, y_t_flat])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([10, 2, -1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_96": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.ones(shape=tf.stack([height, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "variable": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.ones(shape=tf.stack([1, width]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.ones(shape=tf.stack([height, 1])), tf.transpose(tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1), [1, 0]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.expand_dims(tf.linspace(-1.0, 1.0, height), 1), tf.ones(shape=tf.stack([1, width])))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "values": {
                    "value": "[x_t_flat, y_t_flat]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_19": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_20": {
                "variable": {
                    "value": "height_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_21": {
                "variable": {
                    "value": "width_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_25": {
                "variable": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_26": {
                "variable": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(im)[2] - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_33": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_35": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_by_value_38": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_39": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[2] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_40": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_value_41": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.zeros([], dtype='int32')",
                            "Call"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(im)[1] - 1, 'int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.stack([-1, channels])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_55": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gather_56": {
                "variable": {
                    "value": "Ia",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_57": {
                "variable": {
                    "value": "Ib",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_58": {
                "variable": {
                    "value": "Ic",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y0 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "gather_59": {
                "variable": {
                    "value": "Id",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(im, tf.stack([-1, channels]))",
                            "Call"
                        ],
                        [
                            "tf.cast(im_flat, 'float32')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "idx_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_y1 + x1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_62": {
                "variable": {
                    "value": "x0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(x), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_63": {
                "variable": {
                    "value": "x1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "y0_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.floor(y), 'int32')",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cast_65": {
                "variable": {
                    "value": "y1_f",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_66": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_67": {
                "variable": {
                    "value": "wb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x1_f - x) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "variable": {
                    "value": "wc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y1_f - y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(x - x0_f) * (y - y0_f)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "add_n_72": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[wa * Ia, wb * Ib, wc * Ic, wd * Id]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_93": {
                "values": {
                    "value": "[10]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_94": {
                "values": {
                    "value": "[10, 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_11": {
                "name_or_scope": {
                    "value": "_interpolate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_76": {
                "shape": {
                    "value": "tf.stack([height, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "a": {
                    "value": "tf.expand_dims(tf.linspace(-1.0, 1.0, width), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_78": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, height)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_79": {
                "shape": {
                    "value": "tf.stack([1, width])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_14": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_15": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_16": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_33": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(x, 'float32')",
                            "Call"
                        ],
                        [
                            "(x + 1.0) * width_f / 2.0",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_35": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(y, 'float32')",
                            "Call"
                        ],
                        [
                            "(y + 1.0) * height_f / 2.0",
                            "BinOp"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_54": {
                "values": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_77": {
                "input": {
                    "value": "tf.linspace(-1.0, 1.0, width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_78": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[1]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_76": {
                "values": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_77": {
                "start": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(im)[2]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_79": {
                "values": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_25": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_26": {
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "data/data_utils.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "gt_tensor_self",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_49": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "variable": {
                    "value": "scaling_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.random.rand() * 0.2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_53": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_54": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset.py": {
        "torch": {
            "tensor_23": {
                "variable": {
                    "value": "gt_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "gt_rots",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_rot[idx]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "tensor_29": {
                "variable": {
                    "value": "gt_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_30": {
                "variable": {
                    "value": "gt_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "gt_trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_trans[idx]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(gt_trans)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_51": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimDataset(2000, transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SimDataset(1000, transform=trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "data/dataset_DPCN.py": {
        "torch": {
            "from_numpy_149": {
                "variable": {
                    "value": "gt_rot_train_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_rot_train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_rot_list[:train_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_rot_train_list)",
                            "Call"
                        ],
                        [
                            "gt_rot_train_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_150": {
                "variable": {
                    "value": "gt_rot_val_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_rot_val_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_rot_list[train_upper:val_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_rot_val_list)",
                            "Call"
                        ],
                        [
                            "gt_rot_val_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "gt_scale_train_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_scale_train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_scale_list[:train_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_scale_train_list)",
                            "Call"
                        ],
                        [
                            "gt_scale_train_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_156": {
                "variable": {
                    "value": "gt_scale_val_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_scale_val_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_scale_list[train_upper:val_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_scale_val_list)",
                            "Call"
                        ],
                        [
                            "gt_scale_val_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_161": {
                "variable": {
                    "value": "gt_x_train_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_x_train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_x_list[:train_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_x_train_list)",
                            "Call"
                        ],
                        [
                            "gt_x_train_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "gt_x_val_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_x_val_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_x_list[train_upper:val_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_x_val_list)",
                            "Call"
                        ],
                        [
                            "gt_x_val_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_167": {
                "variable": {
                    "value": "gt_y_train_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_y_train_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_y_list[:train_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_y_train_list)",
                            "Call"
                        ],
                        [
                            "gt_y_train_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_168": {
                "variable": {
                    "value": "gt_y_val_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "gt_y_val_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gt_y_list[train_upper:val_upper]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(gt_y_val_list)",
                            "Call"
                        ],
                        [
                            "gt_y_val_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "variable": {
                    "value": "rot_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rot_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_rot_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(rot_gt)",
                            "Call"
                        ],
                        [
                            "self.gt_rot_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(rot_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_81": {
                "variable": {
                    "value": "gt_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array((trans_y / (h_original / this_template.size(1)), trans_x / (w_original / this_template.size(1))))",
                            "Call"
                        ],
                        [
                            "np.array((trans_y / (h_original / this_template.size(1)), trans_x / (w_original / this_template.size(1))))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "rot_gt",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rot_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_rot_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(rot_gt)",
                            "Call"
                        ],
                        [
                            "self.gt_rot_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(rot_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "gt_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "trans",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array((trans_y / (h_original / this_template.size(1)), trans_x / (w_original / this_template.size(1))))",
                            "Call"
                        ],
                        [
                            "np.array((trans_y / (h_original / this_template.size(1)), trans_x / (w_original / this_template.size(1))))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_179": {
                "dataset": {
                    "value": "train_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AeroGroundDataset_train(template_train_list, source_train_list, gt_rot_train_list, gt_scale_train_list, gt_x_train_list, gt_y_train_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_180": {
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AeroGroundDataset_val(template_val_list, source_val_list, gt_rot_val_list, gt_scale_val_list, gt_x_val_list, gt_y_val_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "scale_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_scale_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(scale_gt) * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "self.gt_scale_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(scale_gt) * scaling_factor",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "data": {
                    "value": "scale_gt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gt_scale_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(scale_gt) * scaling_factor",
                            "BinOp"
                        ],
                        [
                            "self.gt_scale_list[index]",
                            "Subscript"
                        ],
                        [
                            "torch.tensor(scale_gt) * scaling_factor",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "detect.py": {
        "torch": {
            "device_69": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "optimizer_ft_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_template.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "optimizer_ft_src",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_source.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "optimizer_c2s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_corr2softmax.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer_trans_ft_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_template.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_86": {
                "variable": {
                    "value": "optimizer_trans_ft_src",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_source.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_87": {
                "variable": {
                    "value": "optimizer_trans_c2s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_corr2softmax.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_26": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "log_polar/log_polar.py": {
        "torch": {
            "ones_24": {
                "variable": {
                    "value": "rep",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_repeats",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_repeats",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (-1, 1))",
                            "Call"
                        ],
                        [
                            "x * rep",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.double()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_50": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (-1, 1))",
                            "Call"
                        ],
                        [
                            "x * rep",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.double()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "floor_52": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "y.double()",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_55": {
                "variable": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(x).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(x0, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.shape[2] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_56": {
                "variable": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x1, zero, max_x)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.shape[2] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_57": {
                "variable": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.floor(y).long()",
                            "Call"
                        ],
                        [
                            "torch.clamp(y0, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.shape[1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_58": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y0 + 1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(y1, zero, max_y)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "max_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.shape[1] - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_75": {
                "variable": {
                    "value": "im_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_108": {
                "variable": {
                    "value": "x_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones([height, 1]) * torch.linspace(0.0, 1.0 * width - 1, width).unsqueeze(1).permute(1, 0)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "y_t_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.linspace(0.0, 1.0, height).unsqueeze(1) * torch.ones([1, width])",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_t_flat, y_t_flat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_123": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_t_flat, y_t_flat), 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "grid.repeat(num_batch)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grid, [num_batch, 2, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_125": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((x_t_flat, y_t_flat), 0)",
                            "Call"
                        ],
                        [
                            "_meshgrid(out_height, out_width)",
                            "Call"
                        ],
                        [
                            "grid.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grid, [-1])",
                            "Call"
                        ],
                        [
                            "grid.repeat(num_batch)",
                            "Call"
                        ],
                        [
                            "torch.reshape(grid, [num_batch, 2, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch, 2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_dim.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.double",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_137": {
                "variable": {
                    "value": "logbase",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(W * EXCESS_CONST / 2) / W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "variable": {
                    "value": "t_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta).unsqueeze(1) * torch.ones([1, out_width])",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(t_s, (1, -1))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "x_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_s * torch.cos(t_s) + W / 2",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "y_s_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "r_s * torch.sin(t_s) + W / 2",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_160": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_interpolate(input_dim, x_s_flat, y_s_flat, out_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_batch, out_height, out_width, num_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_28": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(x, (-1, 1))",
                            "Call"
                        ],
                        [
                            "x * rep",
                            "BinOp"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.double()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_142": {
                "variable": {
                    "value": "r_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logbase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_transform(U, out_size)",
                            "Call"
                        ],
                        [
                            "torch.exp(torch.log(W * EXCESS_CONST / 2) / W)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "grid[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "[height, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_105": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0 * width - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.shape[2]",
                            "Subscript"
                        ],
                        [
                            "width",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_105": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_105": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_106": {
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "steps": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im.shape[1]",
                            "Subscript"
                        ],
                        [
                            "height",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_106": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_106": {
                "*size": {
                    "value": "[1, width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.linspace(0.0, np.pi, input_dim.shape[1], endpoint=False) * -1.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_149": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_149": {
                "*size": {
                    "value": "[1, out_width]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "range_62": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "num_batch - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "int",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_137": {
                "input": {
                    "value": "W * EXCESS_CONST / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_153": {
                "input": {
                    "value": "t_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta).unsqueeze(1) * torch.ones([1, out_width])",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(t_s, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_154": {
                "input": {
                    "value": "t_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(theta).unsqueeze(1) * torch.ones([1, out_width])",
                            "BinOp"
                        ],
                        [
                            "torch.reshape(t_s, (1, -1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "log_polar/polarizeLayer.py": {
        "torch": {
            "randn_2": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_3": {
                "variable": {
                    "value": "polar",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_10": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Cart_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([x - center[0], -(y - center[1])])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Cart_coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([x - center[0], -(y - center[1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_10": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_10": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_10": {
                "variable": {
                    "value": "rho",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "atan2_11": {
                "variable": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Cart_coord[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "Cart_coord[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "phase_correlation/phase_corr.py": {
        "torch": {
            "rfft_22": {
                "variable": {
                    "value": "G_a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rfft_23": {
                "variable": {
                    "value": "G_b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "b",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ifft_40": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor(G_a.shape[0], G_a.shape[1], G_a.shape[2], 2).to(device)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_43": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_real ** 2 + r_imag ** 2 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_55": {
                "variable": {
                    "value": "angle_resize_out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softargmax_input.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "scale_reszie_out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softargmax_input.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "argmax_58": {
                "variable": {
                    "value": "angle_out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "angle_resize_out_tensor.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_59": {
                "variable": {
                    "value": "scale_out_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale_reszie_out_tensor.clone().detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_82": {
                "variable": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linspace(-np.pi / 2.0, np.pi / 2.0, shape[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_83": {
                "variable": {
                    "value": "i2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.linspace(-np.pi / 2.0, np.pi / 2.0, shape[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "i1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cos(torch.linspace(-np.pi / 2.0, np.pi / 2.0, shape[0]))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_101": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - np.cos(rads) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(filt)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_36": {
                "input": {
                    "value": "real_b ** 2 + imag_b ** 2 + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_76": {
                "input": {
                    "value": "logbase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logbase.to(device)",
                            "Call"
                        ],
                        [
                            "logbase",
                            "Method Argument"
                        ],
                        [
                            "logbase",
                            "Method Argument"
                        ]
                    ]
                },
                "exponent": {
                    "value": "sca_f.float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_82": {
                "start": {
                    "value": "-np.pi / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "np.pi / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "linspace_83": {
                "start": {
                    "value": "-np.pi / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "np.pi / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "trainDPCN.py": {
        "torch": {
            "device_211": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if not args.cpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "optimizer_ft_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_template.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_228": {
                "variable": {
                    "value": "optimizer_ft_src",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_source.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_229": {
                "variable": {
                    "value": "optimizer_c2s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_corr2softmax.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamW_230": {
                "variable": {
                    "value": "optimizer_trans_ft_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_trans_template.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamW_231": {
                "variable": {
                    "value": "optimizer_trans_ft_src",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_trans_source.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.004",
                    "type": "float",
                    "possible_values": []
                }
            },
            "AdamW_232": {
                "variable": {
                    "value": "optimizer_trans_c2s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_trans_corr2softmax.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_234": {
                "variable": {
                    "value": "exp_lr_scheduler_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model_template.parameters()), lr=0.004)",
                            "Call"
                        ],
                        [
                            "load_checkpoint(checkpoint_path, model_template, model_source, model_corr2softmax, model_trans_template, model_trans_source, model_trans_corr2softmax, optimizer_ft_temp, optimizer_ft_src, optimizer_c2s, optimizer_trans_ft_temp, optimizer_trans_ft_src, optimizer_trans_c2s, device)",
                            "Call"
                        ],
                        [
                            "load_rot_checkpoint(checkpoint_path, model_template, model_source, model_corr2softmax, optimizer_ft_temp, optimizer_ft_src, optimizer_c2s, device)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_235": {
                "variable": {
                    "value": "exp_lr_scheduler_src",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_ft_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(filter(lambda p: p.requires_grad, model_source.parameters()), lr=0.004)",
                            "Call"
                        ],
                        [
                            "load_checkpoint(checkpoint_path, model_template, model_source, model_corr2softmax, model_trans_template, model_trans_source, model_trans_corr2softmax, optimizer_ft_temp, optimizer_ft_src, optimizer_c2s, optimizer_trans_ft_temp, optimizer_trans_ft_src, optimizer_trans_c2s, device)",
                            "Call"
                        ],
                        [
                            "load_rot_checkpoint(checkpoint_path, model_template, model_source, model_corr2softmax, optimizer_ft_temp, optimizer_ft_src, optimizer_c2s, device)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_236": {
                "variable": {
                    "value": "exp_lr_scheduler_trans_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_trans_ft_temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.AdamW(filter(lambda p: p.requires_grad, model_trans_template.parameters()), lr=0.004)",
                            "Call"
                        ],
                        [
                            "load_checkpoint(checkpoint_path, model_template, model_source, model_corr2softmax, model_trans_template, model_trans_source, model_trans_corr2softmax, optimizer_ft_temp, optimizer_ft_src, optimizer_c2s, optimizer_trans_ft_temp, optimizer_trans_ft_src, optimizer_trans_c2s, device)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_237": {
                "variable": {
                    "value": "exp_lr_scheduler_trans_src",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer_trans_ft_src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.AdamW(filter(lambda p: p.requires_grad, model_trans_source.parameters()), lr=0.004)",
                            "Call"
                        ],
                        [
                            "load_checkpoint(checkpoint_path, model_template, model_source, model_corr2softmax, model_trans_template, model_trans_source, model_trans_corr2softmax, optimizer_ft_temp, optimizer_ft_src, optimizer_c2s, optimizer_trans_ft_temp, optimizer_trans_ft_src, optimizer_trans_c2s, device)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.8",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_detect_anomaly_89": {
                "mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "detect_anomaly_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "unet/loss.py": {
        "torch": {}
    },
    "unet/pytorch_DPCN.py": {
        "torch": {
            "rfft_40": {
                "variable": {
                    "value": "median_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "onesided": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_45": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "median_output_r ** 2 + median_output_i ** 2 + 1e-15",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_75": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_76": {
                "variable": {
                    "value": "self.upsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_83": {
                "variable": {
                    "value": "self.conv_last",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_class",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, conv1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_122": {
                "variable": {
                    "value": "self.softmax_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "softmax_w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(weight, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "self.softmax_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "softmax_b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(bias, requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "utils/detect_utils.py": {
        "torch": {
            "CrossEntropyLoss_85": {
                "variable": {
                    "value": "compute_loss_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_99": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_128": {
                "variable": {
                    "value": "logbase_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "corr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_141": {
                "variable": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_y.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_143": {
                "variable": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_c, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_144": {
                "variable": {
                    "value": "transformation_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_c * indices_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_147": {
                "variable": {
                    "value": "corr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_150": {
                "variable": {
                    "value": "input_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_x.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "indices_r",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_r, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_154": {
                "variable": {
                    "value": "transformation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_r * indices_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_159": {
                "variable": {
                    "value": "trans_mat_affine",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_102": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_103": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/train_utils.py": {
        "torch": {
            "sum_92": {
                "variable": {
                    "value": "corr_final_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_result_rot.clone()",
                            "Call"
                        ],
                        [
                            "torch.sum(corr_final_rot, 2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_rot(corr_final_rot)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_95": {
                "variable": {
                    "value": "input_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_rot.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "indice_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indice_rot, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_98": {
                "variable": {
                    "value": "rot_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_rot * indice_rot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_106": {
                "variable": {
                    "value": "corr_final_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_result_rot.clone()",
                            "Call"
                        ],
                        [
                            "torch.sum(corr_final_scale, 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_rot(corr_final_scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_154": {
                "variable": {
                    "value": "compute_loss_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_155": {
                "variable": {
                    "value": "compute_loss_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_156": {
                "variable": {
                    "value": "compute_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_157": {
                "variable": {
                    "value": "compute_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_188": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_214": {
                "variable": {
                    "value": "logbase_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "set_grad_enabled_25": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "Tensor_126": {
                "variable": {
                    "value": "ACC_rot",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_129": {
                "variable": {
                    "value": "ACC_scale",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_grad_enabled_175": {
                "mode": {
                    "value": "phase == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_224": {
                "variable": {
                    "value": "corr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_228": {
                "variable": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_y.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "variable": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_c, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_231": {
                "variable": {
                    "value": "tranformation_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_c * indices_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_234": {
                "variable": {
                    "value": "corr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_237": {
                "variable": {
                    "value": "input_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_x.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_239": {
                "variable": {
                    "value": "indices_r",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_r, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_241": {
                "variable": {
                    "value": "tranformation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_r * indices_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_271": {
                "variable": {
                    "value": "compute_loss_y",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_272": {
                "variable": {
                    "value": "compute_loss_x",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_277": {
                "variable": {
                    "value": "compute_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_278": {
                "variable": {
                    "value": "compute_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_293": {
                "variable": {
                    "value": "corr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_298": {
                "variable": {
                    "value": "corr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_337": {
                "variable": {
                    "value": "compute_loss_y",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_338": {
                "variable": {
                    "value": "compute_loss_x",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_343": {
                "variable": {
                    "value": "compute_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_344": {
                "variable": {
                    "value": "compute_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_191": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_192": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "filt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - np.cos(rads) ** 2",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(filt).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "unbind_60": {
                "variable": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "roll_n(x, axis=dim, n=n_shift)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_76": {
                "input": {
                    "value": "torch.exp(input).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_91": {
                "variable": {
                    "value": "input_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "beta_t * input_orig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_104": {
                "variable": {
                    "value": "indices_r",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_r, (-1, h * w))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_105": {
                "variable": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_c, (-1, h * w))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "result_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(h - 1) * input_d * indices_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "result_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(w - 1) * input_d * indices_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_110": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[result_r, result_c]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_121": {
                "variable": {
                    "value": "input_d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1000 * input_orig",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_166": {
                "variable": {
                    "value": "bce",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_168": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.sigmoid(pred)",
                            "Call"
                        ],
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_49": {
                "tensors": {
                    "value": "[back, front]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": [
                        [
                            "axis",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_67": {
                "tensors": {
                    "value": "(real, imag)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_dir + 'checkpoint.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_257": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_259": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_285": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_287": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_fpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ],
                        [
                            "checkpoint_fpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_300": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_rpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_rpath",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_302": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_rpath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint_rpath",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_88": {
                "input": {
                    "value": "input_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.reshape(*_, h * w)",
                            "Call"
                        ],
                        [
                            "input.reshape(*_, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_120": {
                "input": {
                    "value": "input_orig",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.reshape(*_, h * w)",
                            "Call"
                        ],
                        [
                            "input.reshape(*_, h * w)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_255": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_283": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_298": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log10_140": {
                "input": {
                    "value": "logbase",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logbase",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_257": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_285": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_300": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_76": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h * w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.squeeze(0)",
                            "Call"
                        ],
                        [
                            "input.reshape(1, h * w)",
                            "Call"
                        ],
                        [
                            "input * 6000",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/validate_utils.py": {
        "torch": {
            "sum_105": {
                "variable": {
                    "value": "corr_final_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_rot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_result_rot.clone()",
                            "Call"
                        ],
                        [
                            "torch.sum(corr_final_rot, 2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_rot(corr_final_rot)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_110": {
                "variable": {
                    "value": "corr_final_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_result_rot.clone()",
                            "Call"
                        ],
                        [
                            "torch.sum(corr_final_scale, 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_rot(corr_final_scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_156": {
                "variable": {
                    "value": "compute_loss_rot",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_157": {
                "variable": {
                    "value": "compute_loss_scale",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_158": {
                "variable": {
                    "value": "compute_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_159": {
                "variable": {
                    "value": "compute_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_193": {
                "variable": {
                    "value": "center",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_227": {
                "variable": {
                    "value": "logbase_trans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_238": {
                "variable": {
                    "value": "corr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_242": {
                "variable": {
                    "value": "input_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_y.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "indices_c",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_c, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "tranformation_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_c * indices_c",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_246": {
                "variable": {
                    "value": "tranformation_y_show",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(corr_final_trans.clone(), 2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_trans(corr_y)",
                            "Call"
                        ],
                        [
                            "torch.sum(corr_final_trans.clone(), 2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_trans(corr_y)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_248": {
                "variable": {
                    "value": "corr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_251": {
                "variable": {
                    "value": "input_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_x.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_253": {
                "variable": {
                    "value": "indices_r",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "np.reshape(indices_r, (-1, 256))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_254": {
                "variable": {
                    "value": "tranformation_x_show",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(corr_final_trans.clone(), 1, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model_corr2softmax_trans(corr_x)",
                            "Call"
                        ],
                        [
                            "torch.sum(corr_final_trans.clone(), 1, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_255": {
                "variable": {
                    "value": "tranformation_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(256 - 1) * input_r * indices_r",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_339": {
                "variable": {
                    "value": "compute_loss_y",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_340": {
                "variable": {
                    "value": "compute_loss_x",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_346": {
                "variable": {
                    "value": "compute_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_347": {
                "variable": {
                    "value": "compute_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_364": {
                "variable": {
                    "value": "corr_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_369": {
                "variable": {
                    "value": "corr_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_final_trans.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_456": {
                "variable": {
                    "value": "compute_loss_y",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_457": {
                "variable": {
                    "value": "compute_loss_x",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MSELoss_463": {
                "variable": {
                    "value": "compute_mse",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_464": {
                "variable": {
                    "value": "compute_l1",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_196": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_197": {
                "*size": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "argmax_297": {
                "variable": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_top5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_318": {
                "variable": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_top5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_414": {
                "variable": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_top5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "argmax_435": {
                "variable": {
                    "value": "max_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_top5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_x.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ],
                        [
                            "corr_y.clone().detach().cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "round_306": {
                "input": {
                    "value": "arg_x[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_307": {
                "input": {
                    "value": "arg_x[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_327": {
                "input": {
                    "value": "arg_y[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_328": {
                "input": {
                    "value": "arg_y[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_423": {
                "input": {
                    "value": "arg_x[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_424": {
                "input": {
                    "value": "arg_x[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_444": {
                "input": {
                    "value": "arg_y[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "round_445": {
                "input": {
                    "value": "arg_y[i][batch_num].float()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "validate.py": {
        "torch": {
            "device_108": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if not args_val.cpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Adam_129": {
                "variable": {
                    "value": "optimizer_ft_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_template.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer_ft_src",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_source.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer_c2s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_corr2softmax.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer_trans_ft_temp",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_template.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "variable": {
                    "value": "optimizer_trans_ft_src",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_source.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer_trans_c2s",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model_corr2softmax.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}