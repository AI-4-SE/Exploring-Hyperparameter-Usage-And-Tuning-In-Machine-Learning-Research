{
    "examples/plot_alpha_vs_gamma.py": {
        "sklearn": {
            "make_regression_40": {
                "variable": {
                    "value": "(X, y, coef_true)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "int"
                        ]
                    ]
                },
                "effective_rank": {
                    "value": "effective_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "n_targets": {
                    "value": "n_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "coef": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "noise": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_52": {
                "variable": {
                    "value": "(X_train, X_test, y_train, y_test)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "RidgeCV_61": {
                "variable": {
                    "value": "srr",
                    "type": "variable",
                    "possible_values": []
                },
                "alphas": {
                    "value": "srr_alphas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.logspace(-10, 10, n_alphas)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_81": {
                "variable": {
                    "value": "frr_r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_frr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frr.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_82": {
                "variable": {
                    "value": "srr_r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(X, y)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "pred_srr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "srr.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "LinearRegression_111": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/plot_paths_cv_curves.py": {
        "sklearn": {
            "load_diabetes_40": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "return_X_y": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_val_predict_72": {
                "variable": {
                    "value": "fr_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "FR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "FracRidgeRegressor(fracs=fracs, fit_intercept=True)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.load_diabetes(return_X_y=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.load_diabetes(return_X_y=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "r2_score_97": {
                "variable": {
                    "value": "rr_r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(y, (fr_pred.shape[-1], 1)).T",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "rr_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((y.shape[-1], n_alphas))",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "raw_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_98": {
                "variable": {
                    "value": "fr_r2",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "test_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(y, (fr_pred.shape[-1], 1)).T",
                            "Attribute"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "fr_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cross_val_predict(FR, X, y)",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "raw_values",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Ridge_57": {
                "variable": {
                    "value": "RR",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "rr_alphas[aa]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "np.logspace(-10, 10, n_alphas)",
                            "Call"
                        ]
                    ]
                },
                "fit_intercept": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_val_predict_60": {
                "variable": {
                    "value": "rr_pred[:, aa]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "estimator": {
                    "value": "RR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ridge(alpha=rr_alphas[aa], fit_intercept=True)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.load_diabetes(return_X_y=True)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.load_diabetes(return_X_y=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "examples/plot_pipeline.py": {
        "sklearn": {
            "make_regression_35": {
                "variable": {
                    "value": "(X, y, coef_true)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "250",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "n_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "int"
                        ]
                    ]
                },
                "effective_rank": {
                    "value": "effective_rank",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "int"
                        ]
                    ]
                },
                "n_targets": {
                    "value": "n_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "15",
                            "int"
                        ]
                    ]
                },
                "coef": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "noise": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PCA_52": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_components",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_components in range(2, X.shape[-1], 5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Pipeline_54": {
                "variable": {
                    "value": "pipeline",
                    "type": "variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "[('pca', pca), ('fracridgecv', frcv)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "fracridge/fracridge.py": {
        "sklearn": {
            "check_X_y_297": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, y_numeric=True, multi_output=True)",
                            "Call"
                        ],
                        [
                            "_preprocess_data(X, y, fit_intercept=self.fit_intercept, normalize=self.normalize, copy=self.copy_X, sample_weight=sample_weight, check_input=True)",
                            "Call"
                        ],
                        [
                            "outs[0]",
                            "Subscript"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=sample_weight)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=None)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "y[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "check_X_y(X, y, y_numeric=True, multi_output=True)",
                            "Call"
                        ],
                        [
                            "_preprocess_data(X, y, fit_intercept=self.fit_intercept, normalize=self.normalize, copy=self.copy_X, sample_weight=sample_weight, check_input=True)",
                            "Call"
                        ],
                        [
                            "outs[1]",
                            "Subscript"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=sample_weight)",
                            "Call"
                        ],
                        [
                            "y[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.broadcast_to(y, y_pred.shape)",
                            "Call"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=None)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_numeric": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "multi_output": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "check_array_329": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "array": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "check_X_y(X, y, y_numeric=True, multi_output=True)",
                            "Call"
                        ],
                        [
                            "_preprocess_data(X, y, fit_intercept=self.fit_intercept, normalize=self.normalize, copy=self.copy_X, sample_weight=sample_weight, check_input=True)",
                            "Call"
                        ],
                        [
                            "outs[0]",
                            "Subscript"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=sample_weight)",
                            "Call"
                        ],
                        [
                            "check_array(X, accept_sparse=True)",
                            "Call"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=None)",
                            "Call"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ],
                        [
                            "X",
                            "Method Argument"
                        ]
                    ]
                },
                "accept_sparse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GridSearchCV_449": {
                "variable": {
                    "value": "gs",
                    "type": "variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "FracRidgeRegressor(fit_intercept=self.fit_intercept, normalize=self.normalize, copy_X=self.copy_X, tol=self.tol, jit=self.jit)",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'fracs': frac_grid}",
                            "Dict"
                        ]
                    ]
                },
                "cv": {
                    "value": "self.cv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scoring": {
                    "value": "self.scoring",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "check_is_fitted_330": {
                "estimator": {
                    "value": "self",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ],
                        [
                            "self",
                            "Method Argument"
                        ]
                    ]
                },
                "attributes": {
                    "value": "is_fitted_",
                    "type": "str",
                    "possible_values": []
                }
            },
            "r2_score_364": {
                "y_true": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "y[:, np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "check_X_y(X, y, y_numeric=True, multi_output=True)",
                            "Call"
                        ],
                        [
                            "_preprocess_data(X, y, fit_intercept=self.fit_intercept, normalize=self.normalize, copy=self.copy_X, sample_weight=sample_weight, check_input=True)",
                            "Call"
                        ],
                        [
                            "outs[1]",
                            "Subscript"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=sample_weight)",
                            "Call"
                        ],
                        [
                            "y[..., np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "np.broadcast_to(y, y_pred.shape)",
                            "Call"
                        ],
                        [
                            "self._validate_input(X, y, sample_weight=None)",
                            "Call"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ],
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(X)",
                            "Call"
                        ]
                    ]
                },
                "sample_weight": {
                    "value": "sample_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_check_sample_weight(sample_weight, X, dtype=X.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "fracridge/tests/test_fracridge.py": {
        "sklearn": {
            "parametrize_with_checks_9": {
                "estimators": {
                    "value": "[FracRidgeRegressor(), FracRidgeRegressorCV()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Ridge_127": {
                "variable": {
                    "value": "RR",
                    "type": "variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "FRCV.alpha_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "fit_intercept",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "fit_intercept",
                            "Method Argument"
                        ],
                        [
                            "fit_intercept",
                            "Method Argument"
                        ],
                        [
                            "fit_intercept",
                            "Method Argument"
                        ],
                        [
                            "fit_intercept",
                            "Method Argument"
                        ],
                        [
                            "fit_intercept",
                            "Method Argument"
                        ]
                    ]
                },
                "solver": {
                    "value": "svd",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}