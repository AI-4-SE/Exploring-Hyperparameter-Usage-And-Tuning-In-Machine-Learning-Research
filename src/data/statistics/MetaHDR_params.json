{
    "eval.py": {
        "sklearn": {
            "train_test_split_104": {
                "variable": {
                    "value": "(tr, ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(1, cfg.EVAL.NUM_EXPOSURES + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "train_test_split_155": {
                "variable": {
                    "value": "(tr, ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(1, cfg.EVAL.NUM_EXPOSURES + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_64": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(source_directory, 'model_last.pth.tar')",
                            "Call"
                        ],
                        [
                            "osp.join(source_directory, 'model_best.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_name_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_56": {
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset/dataloader.py": {
        "sklearn": {
            "train_test_split_72": {
                "variable": {
                    "value": "(tr, ts)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(1, self.num_exposures + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "demo.py": {
        "torch": {
            "load_90": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./data/demo_weights/model_demo.pth.tar'",
                            "str"
                        ]
                    ]
                }
            },
            "is_available_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/core/loss.py": {
        "torch": {
            "CosineSimilarity_38": {
                "variable": {
                    "value": "self.similarity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-20",
                    "type": "float",
                    "possible_values": []
                }
            },
            "L1Loss_39": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_50": {
                "variable": {
                    "value": "self.l2_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_74": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "L1Loss_88": {
                "variable": {
                    "value": "self.l1_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models/UNet.py": {
        "torch": {
            "ReLU_11": {
                "variable": {
                    "value": "activation_function",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_26": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_41": {
                "variable": {
                    "value": "f4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bb, c4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_43": {
                "variable": {
                    "value": "f3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e4, c3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e3, c2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e2, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.top(f1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.top(f1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_59": {
                "variable": {
                    "value": "activation_function",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_83": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "f4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[bb, c3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_97": {
                "variable": {
                    "value": "f3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e4, c2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_99": {
                "variable": {
                    "value": "f2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e3, c1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[e2, c0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.top(f1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ],
                        [
                            "self.top(f1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/metaHDR.py": {
        "torch": {
            "from_numpy_27": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_27": {
                "variable": {
                    "value": "input_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_28": {
                "variable": {
                    "value": "input_label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "permute_28": {
                "variable": {
                    "value": "input_label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train).to(device)",
                            "Call"
                        ],
                        [
                            "dg.sample_batch('meta_train', cfg.TRAIN.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train).to(device)",
                            "Call"
                        ],
                        [
                            "train",
                            "Method Argument"
                        ],
                        [
                            "train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test).to(device)",
                            "Call"
                        ],
                        [
                            "dg.sample_batch('meta_train', cfg.TRAIN.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test).to(device)",
                            "Call"
                        ],
                        [
                            "test",
                            "Method Argument"
                        ],
                        [
                            "test",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "meta_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg.TRAIN.META_LR",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_176": {
                "variable": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(train).to(device)",
                            "Call"
                        ],
                        [
                            "dg.sample_batch('meta_train', cfg.TRAIN.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(train).to(device)",
                            "Call"
                        ],
                        [
                            "train",
                            "Method Argument"
                        ],
                        [
                            "train",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_177": {
                "variable": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(test).to(device)",
                            "Call"
                        ],
                        [
                            "dg.sample_batch('meta_train', cfg.TRAIN.BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(test).to(device)",
                            "Call"
                        ],
                        [
                            "test",
                            "Method Argument"
                        ],
                        [
                            "test",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_37": {
                "input": {
                    "value": "input_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label).to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_253": {
                "variable": {
                    "value": "val_test",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "val_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dg.sample_batch('meta_val', cfg.TRAIN.VAL_BATCH_SIZE)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(val_test).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_38": {
                "input": {
                    "value": "input_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label).to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_39": {
                "input": {
                    "value": "input_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(label).to(device).permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_51": {
                "input": {
                    "value": "input_label[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_51": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_80": {
                "input": {
                    "value": "adaptation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "train[1, batch_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_87": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_118": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_217": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_88": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_89": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_101": {
                "input": {
                    "value": "evaluation_labels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_101": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_119": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_189": {
                "input": {
                    "value": "adaptation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "train[1, batch_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_201": {
                "input": {
                    "value": "adaptation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "train[1, batch_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_209": {
                "input": {
                    "value": "adaptation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "train[1, batch_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_229": {
                "input": {
                    "value": "adaptation_labels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_229": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_236": {
                "input": {
                    "value": "evaluation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_idx, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "test[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_194": {
                "input": {
                    "value": "adaptation_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "train[1, batch_idx, ...]",
                            "Subscript"
                        ],
                        [
                            "train[1, batch_index, ...].permute(0, 3, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/utils.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "block",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolution_block(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_24": {
                "variable": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolution_block(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "bottom",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolution_block(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "expand",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolution_block(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolution_block(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "top",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "convolution_block(in_dim, out_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_9": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_12": {
                "in_channels": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "save_104": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'unet_state_dict': model.state_dict(), 'performance': performance}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'unet_state_dict': model.state_dict(), 'performance': performance}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(logdir, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "osp.join(logdir, 'model_last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_122": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'unet_state_dict': model.state_dict(), 'performance': performance}",
                            "Dict"
                        ],
                        [
                            "{'epoch': epoch, 'unet_state_dict': model.state_dict(), 'performance': performance}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(logdir, 'model_best.pth.tar')",
                            "Call"
                        ],
                        [
                            "osp.join(logdir, 'model_last.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_25": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "in_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ],
                        [
                            "in_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "in_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_53": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_56": {
                "num_features": {
                    "value": "out_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_75": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_78": {
                "num_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ],
                        [
                            "out_dim",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "get_device_name_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_properties_13": {
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}