{
    "Experiment.py": {
        "tensorflow": {
            "load_model_25": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.getcwd(), results_folder, experiment_name, 'final_model']",
                            "List"
                        ],
                        [
                            "os.path.sep.join(model_path)",
                            "Call"
                        ],
                        [
                            "[os.getcwd(), results_folder, experiment_name, 'final_model']",
                            "List"
                        ],
                        [
                            "os.path.sep.join(model_path)",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'NormalizedMeanSquaredError': NMSE}",
                            "Dict"
                        ],
                        [
                            "{'NormalizedMeanSquaredError2D': NMSE2}",
                            "Dict"
                        ]
                    ]
                }
            },
            "band_part_46": {
                "variable": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.Operator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "L_upper",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_47": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "utm + tf.transpose(utm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "L",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.u_enc(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_81": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.F_enc(F)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_135": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.u_enc(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_136": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.F_enc(F)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_138": {
                "variable": {
                    "value": "Lv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "variable": {
                    "value": "f_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "f[None] + f[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, f.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "variable": {
                    "value": "Lv_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Lv[None] + Lv[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, Lv.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_model_186": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[os.getcwd(), results_folder, experiment_name, 'final_model']",
                            "List"
                        ],
                        [
                            "os.path.sep.join(model_path)",
                            "Call"
                        ],
                        [
                            "[os.getcwd(), results_folder, experiment_name, 'final_model']",
                            "List"
                        ],
                        [
                            "os.path.sep.join(model_path)",
                            "Call"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'NormalizedMeanSquaredError': NMSE}",
                            "Dict"
                        ],
                        [
                            "{'NormalizedMeanSquaredError2D': NMSE2}",
                            "Dict"
                        ]
                    ]
                }
            },
            "band_part_207": {
                "variable": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model.Operator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "L_upper",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_208": {
                "variable": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "utm + tf.transpose(utm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "L",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_241": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.u_enc(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_242": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.F_enc(F)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_295": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.u_enc(u)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_296": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self.F_enc(F)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "self.model.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_298": {
                "variable": {
                    "value": "Lv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ],
                        [
                            "tf.matmul(self.u_enc(u), self.model.u_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.L",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_304": {
                "variable": {
                    "value": "f_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "f[None] + f[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, f.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_305": {
                "variable": {
                    "value": "Lv_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Lv[None] + Lv[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, Lv.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_47": {
                "a": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.band_part(self.model.Operator, 0, -1, name='L_upper')",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(self.model.Operator, 0, -1, name='L_upper')",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_208": {
                "a": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.band_part(self.model.Operator, 0, -1, name='L_upper')",
                            "Call"
                        ],
                        [
                            "tf.linalg.band_part(self.model.Operator, 0, -1, name='L_upper')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "architecture/Conv2DEncoderDecoder.py": {
        "tensorflow": {
            "Conv2D_25": {
                "variable": {
                    "value": "self.proj_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "num_filters[-1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[8",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2 ** (len(num_filters) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "strides": {
                    "value": "2 ** (len(num_filters) - 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_33": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_80": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.init_size[0], self.init_size[1], self.init_size[2])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_tensor, axis=-1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x + proj",
                            "BinOp"
                        ],
                        [
                            "tf.keras.layers.Flatten()(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(input_tensor, shape=(-1, self.init_size[0], self.init_size[1], self.init_size[2]))",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=self.output_size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "variable": {
                    "value": "proj",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2D_17": {
                "filters": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[8",
                            "MethodArgument"
                        ],
                        [
                            "[32",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Flatten_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2DTranspose_68": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2DTranspose_73": {
                "filters": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_21": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[1:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_37": {
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "architecture/ConvEncoderDecoder.py": {
        "tensorflow": {
            "expand_dims_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_98": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_tensor, axis=-1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x + input_tensor",
                            "BinOp"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, self.init_size, self.num_filters[0]))",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=2)",
                            "Call"
                        ],
                        [
                            "self.conv2dtranspose(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.init_size, self.num_filters[0])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2DTranspose_119": {
                "variable": {
                    "value": "self.conv2dtranspose",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[1:]",
                            "Subscript"
                        ],
                        [
                            "num_filters[1:]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(kernel_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(strides, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'VALID')",
                            "MethodArgument"
                        ],
                        [
                            "'SAME'",
                            "MethodArgument"
                        ],
                        [
                            "'valid'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_124": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_tensor, axis=-1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x + input_tensor",
                            "BinOp"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, self.init_size, self.num_filters[0]))",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=2)",
                            "Call"
                        ],
                        [
                            "self.conv2dtranspose(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(input_tensor, axis=-1)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x + input_tensor",
                            "BinOp"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, self.init_size, self.num_filters[0]))",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=2)",
                            "Call"
                        ],
                        [
                            "self.conv2dtranspose(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1D_19": {
                "filters": {
                    "value": "num_filters[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[8",
                            "MethodArgument"
                        ],
                        [
                            "[64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Flatten_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_28": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_30": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_77": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_78": {
                "units": {
                    "value": "init_size * num_filters[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Flatten_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv1D_23": {
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_filters[1:]",
                            "Subscript"
                        ],
                        [
                            "num_filters[1:]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "architecture/Dense2DEncoderDecoder.py": {
        "tensorflow": {
            "reshape_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, self.units_full))",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x + input_tensor",
                            "BinOp"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, math.isqrt(self.units_full), math.isqrt(self.units_full)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, self.units_full)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, self.units_full))",
                            "Call"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "x + input_tensor",
                            "BinOp"
                        ],
                        [
                            "input_tensor",
                            "Name"
                        ],
                        [
                            "layer(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, shape=(-1, math.isqrt(self.units_full), math.isqrt(self.units_full)))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, math.isqrt(self.units_full), math.isqrt(self.units_full))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_23": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_34": {
                "tensor": {
                    "value": "input_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, self.units_full)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_68": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_20": {
                "units": {
                    "value": "units_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_65": {
                "units": {
                    "value": "units_hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "architecture/DenseEncoderDecoder.py": {
        "tensorflow": {
            "Dense_21": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_18": {
                "units": {
                    "value": "units_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "architecture/DiagGreenNet.py": {
        "tensorflow": {
            "Variable_29": {
                "variable": {
                    "value": "self.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_full, units_latent)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "self.u_Expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_latent, units_full)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_full, units_latent)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.F_Expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_latent, units_full)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "self.Operator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random.uniform(shape=[units_latent])",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "Operator",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_58": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u_encoder(u_input)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "variable": {
                    "value": "v_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_encoded, self.u_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.u_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_64": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "F_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.F_encoder(F_input)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "variable": {
                    "value": "f_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(F_encoded, self.F_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.F_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_69": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "self.Operator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "L",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "Lv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_encoded, self.u_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(self.Operator, name='L')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_73": {
                "variable": {
                    "value": "Lv_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Lv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, L)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.F_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_77": {
                "variable": {
                    "value": "f_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(F_encoded, self.F_Reduce)",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_78": {
                "variable": {
                    "value": "Linvf_T",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.diag(self.Operator, name='L')",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "f_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(f)",
                            "Call"
                        ]
                    ]
                },
                "adjoint": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "Linvf",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Linvf_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.solve(L, f_T, adjoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "Linvf_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Linvf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Linvf_T)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.u_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "f_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "f[None] + f[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, f.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "Lv_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Lv[None] + Lv[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, Lv.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "uniform_44": {
                "shape": {
                    "value": "[units_latent]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "architecture/GreenNet.py": {
        "tensorflow": {
            "Variable_29": {
                "variable": {
                    "value": "self.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_full, units_latent)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "self.u_Expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_latent, units_full)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "self.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_full, units_latent)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_39": {
                "variable": {
                    "value": "self.F_Expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.I_seed(units_latent, units_full)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "self.Operator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "abs(operator_initializer(op_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "u_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.u_encoder(u_input)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.u_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "variable": {
                    "value": "v_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_encoded, self.u_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.u_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "variable": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "F_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.F_encoder(F_input)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.F_Reduce",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "f_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(F_encoded, self.F_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.F_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "band_part_71": {
                "variable": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.Operator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "L_upper",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_72": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "utm + tf.transpose(utm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "L",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "Lv",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(u_encoded, self.u_Reduce)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(0.5, utm + tf.transpose(utm), name='L')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "Lv_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Lv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(v, L)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.F_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_80": {
                "variable": {
                    "value": "f_T",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(F_encoded, self.F_Reduce)",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_81": {
                "variable": {
                    "value": "Linvf_T",
                    "type": "variable",
                    "possible_values": []
                },
                "matrix": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(0.5, utm + tf.transpose(utm), name='L')",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "f_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(f)",
                            "Call"
                        ]
                    ]
                },
                "adjoint": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "transpose_82": {
                "variable": {
                    "value": "Linvf",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Linvf_T",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.solve(L, f_T, adjoint=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "variable": {
                    "value": "Linvf_expand",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Linvf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Linvf_T)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.u_Expand",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_92": {
                "variable": {
                    "value": "f_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "f[None] + f[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, f.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "variable": {
                    "value": "Lv_sums",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Lv[None] + Lv[:, None]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, Lv.shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Identity_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "transpose_72": {
                "a": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.band_part(self.Operator, 0, -1, name='L_upper')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "architecture/NormalizedMeanSquaredError.py": {
        "tensorflow": {
            "reduce_mean_25": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_pred - y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_26": {
                "variable": {
                    "value": "true_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truediv_38": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(y_pred - y_true), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_mean(tf.square(y_pred - y_true), axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(y_true), axis=-1)",
                            "Call"
                        ],
                        [
                            "true_norm + self.denom_nonzero",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_mean(tf.square(y_true), axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_67": {
                "input_tensor": {
                    "value": "tf.square(y_pred - y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_68": {
                "input_tensor": {
                    "value": "tf.square(y_true)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "truediv_80": {
                "variable": {
                    "value": "err",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(y_pred - y_true), axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_mean(tf.square(y_pred - y_true), axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "true_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.square(y_true), axis=-1)",
                            "Call"
                        ],
                        [
                            "true_norm + self.denom_nonzero",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_mean(tf.square(y_true), axis=-1), axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_25": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_26": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "square_67": {
                "x": {
                    "value": "y_pred - y_true",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_68": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "architecture/sdg_matrix.py": {
        "tensorflow": {
            "normal_7": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[size[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_8": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=[size[0]])",
                            "Call"
                        ],
                        [
                            "tf.abs(rows)",
                            "Call"
                        ],
                        [
                            "tf.sort(rows, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_9": {
                "variable": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=[size[0]])",
                            "Call"
                        ],
                        [
                            "tf.abs(rows)",
                            "Call"
                        ],
                        [
                            "tf.sort(rows, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                },
                "direction": {
                    "value": "DESCENDING",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LinearOperatorToeplitz_14": {
                "variable": {
                    "value": "operator_1",
                    "type": "variable",
                    "possible_values": []
                },
                "col": {
                    "value": "cols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * size[0]",
                            "BinOp"
                        ]
                    ]
                },
                "row": {
                    "value": "rows",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.normal(shape=[size[0]])",
                            "Call"
                        ],
                        [
                            "tf.abs(rows)",
                            "Call"
                        ],
                        [
                            "tf.sort(rows, direction='DESCENDING')",
                            "Call"
                        ]
                    ]
                }
            },
            "band_part_17": {
                "variable": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "operator_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LinearOperatorToeplitz(cols, rows)",
                            "Call"
                        ],
                        [
                            "operator_1.to_dense()",
                            "Call"
                        ]
                    ]
                },
                "num_lower": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "name": {
                    "value": "utm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_18": {
                "variable": {
                    "value": "L",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "utm + tf.transpose(utm)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_18": {
                "a": {
                    "value": "utm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linalg.band_part(operator_1, 0, -1, name='utm')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/Appendix-Sys0-xxx.py": {
        "tensorflow": {
            "VarianceScaling_31": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_32": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys1-RandomInitialize.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "he_uniform_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys1-ToeplitzInitialize.py": {
        "tensorflow": {
            "VarianceScaling_28": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_29": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys3-NoResNet-a.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys3-NoResNet-b.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys3-NoResNet-c.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys3-ResNet-a.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys3-ResNet-b.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Appendix-Sys3-ResNet-c.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Sys0-Experiment.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Sys1-Experiment.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Sys2-Experiment.py": {
        "tensorflow": {
            "VarianceScaling_31": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_32": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "list_physical_devices_6": {
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_7": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.config.experimental.list_physical_devices('GPU')",
                            "Call"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/Sys3-Experiment.py": {
        "tensorflow": {
            "VarianceScaling_27": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "l1_l2_28": {
                "variable": {
                    "value": "regularizer",
                    "type": "variable",
                    "possible_values": []
                },
                "l1": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "l2": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Identity_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiments/utils.py": {
        "tensorflow": {
            "load_model_155": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_prefix + 'model_{}'.format(i)",
                            "BinOp"
                        ],
                        [
                            "save_prefix + 'final_model'",
                            "BinOp"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_model_188": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_prefix + 'model_{}'.format(i)",
                            "BinOp"
                        ],
                        [
                            "save_prefix + 'final_model'",
                            "BinOp"
                        ]
                    ]
                },
                "custom_objects": {
                    "value": "custom_objects",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clear_session_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModelCheckpoint_162": {
                "filepath": {
                    "value": "checkpoint_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_prefix + 'checkpoint_final'",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_86": {
                "filepath": {
                    "value": "checkpoint_path_aec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_prefix + 'checkpoint_aec_{}'.format(i)",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_107": {
                "filepath": {
                    "value": "checkpoint_path_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "save_prefix + 'checkpoint_{}'.format(i)",
                            "BinOp"
                        ]
                    ]
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "figure_functions.py": {
        "tensorflow": {}
    }
}