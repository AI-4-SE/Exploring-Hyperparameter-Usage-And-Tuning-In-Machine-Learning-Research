{
    "attack.py": {
        "sklearn": {
            "roc_auc_score_214": {
                "variable": {
                    "value": "MI_attack_auc",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "MI_y_test_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(MI_y_test_all)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attack_model(MI_x_train_cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "attack_model(MI_x_test_cuda).cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(MI_predicted_y_test_blind)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_223": {
                "variable": {
                    "value": "MI_blind_attack_auc",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "MI_y_test_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(MI_y_test_all)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attack_model(MI_x_train_cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "attack_model(MI_x_test_cuda).cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(MI_predicted_y_test_blind)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "BCELoss_197": {
                "variable": {
                    "value": "criterion",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_198": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "attack_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "variable": {
                    "value": "MI_x_train_cuda",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "MI_x_train_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(MI_x_train_all)",
                            "Call"
                        ],
                        [
                            "MI_x_train_all[shuffle_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_200": {
                "variable": {
                    "value": "MI_y_train_cuda",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "MI_y_train_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(MI_y_train_all)",
                            "Call"
                        ],
                        [
                            "MI_y_train_all[shuffle_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "MI_x_test_cuda",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "MI_x_test_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(MI_x_test_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_202": {
                "variable": {
                    "value": "MI_y_test_cuda",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "MI_y_test_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(MI_y_test_all)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "attack_model",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_classes * (model_index_counter + 1), 128)",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_206": {
                "variable": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attack_model(MI_x_train_cuda)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(y_pred)",
                            "Call"
                        ],
                        [
                            "attack_model(MI_x_test_cuda).cpu().detach().numpy()",
                            "Call"
                        ],
                        [
                            "np.array(MI_predicted_y_test_blind)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "attack_model",
                    "type": "Name",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(num_classes, 128)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_187": {
                "in_features": {
                    "value": "num_classes * (model_index_counter + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_188": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_188": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_190": {
                "in_features": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_191": {
                "in_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sigmoid_191": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "confusion_matrix_99": {
                "variable": {
                    "value": "CM",
                    "type": "Name",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_true",
                    "type": "Name",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "save_outputs.py": {
        "torch": {
            "DataLoader_87": {
                "variable": {
                    "value": "trainloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataloader(root='./data', split='train', download=True, transform=transform_train)",
                            "Call"
                        ],
                        [
                            "dataloader(root='./data', train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "testloader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataloader(root='./data', split='test', download=True, transform=transform_test)",
                            "Call"
                        ],
                        [
                            "dataloader(root='./data', train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}