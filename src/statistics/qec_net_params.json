{
    "logger.py": {
        "tensorflow": {
            "FileWriter_15": {
                "variable": {
                    "value": "self.writer",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "possible_values": []
                }
            },
            "Summary_19": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.compat.v1.Summary.Value(tag=tag, simple_value=value)]",
                    "possible_values": []
                }
            },
            "Summary_42": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "img_summaries",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "HistogramProto_52": {
                "variable": {
                    "value": "hist",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Summary_69": {
                "variable": {
                    "value": "summary",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.compat.v1.Summary.Value(tag=tag, histo=hist)]",
                    "possible_values": []
                }
            }
        }
    },
    "models/pytorch-autograd-solver/setup.py": {
        "torch": {}
    },
    "models/pytorch-autograd-solver/test.py": {
        "torch": {
            "randn_11": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "Parameter_12": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(30, 10)",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "linear_13": {
                "variable": {
                    "value": "xw",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "torch.randn(30, 10)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "possible_values": [
                        [
                            "nn.Parameter(torch.rand(30, 10), requires_grad=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_20": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "5",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "possible_values": []
                }
            },
            "tensor_27": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.96, 0.0, 0.0, 0.0, 0.0], [-6.49, 3.8, 0.0, 0.0, 0.0], [-0.47, -6.39, 4.17, 0.0, 0.0], [-7.2, 1.5, -1.51, 5.7, 0.0], [-0.65, -6.34, 2.67, 1.8, -7.1]]",
                    "possible_values": []
                }
            },
            "t_27": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "symeig_33": {
                "variable": {
                    "value": "(w, v)",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "possible_values": [
                        [
                            "torch.tensor([[1.96, 0.0, 0.0, 0.0, 0.0], [-6.49, 3.8, 0.0, 0.0, 0.0], [-0.47, -6.39, 4.17, 0.0, 0.0], [-7.2, 1.5, -1.51, 5.7, 0.0], [-0.65, -6.34, 2.67, 1.8, -7.1]]).t()",
                            "Call"
                        ]
                    ]
                },
                "eigenvectors": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_39": {
                "variable": {
                    "value": "xs",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "symeig_42": {
                "variable": {
                    "value": "(eigenValues, eigenVectors)",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[0]",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "randn_49": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "*size": {
                    "value": "8 * 64 * 32",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "randn_66": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_q",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ],
                        [
                            "80",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_67": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lrf",
                    "possible_values": [
                        [
                            "torch.randn(num_q, 8, 4).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(input_lrf, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "input_lrf.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "F.normalize(input1, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "input_lrf.view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "bmm_69": {
                "variable": {
                    "value": "test",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lrf.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input_lrf.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "sum_71": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "input": {
                    "value": "test",
                    "possible_values": [
                        [
                            "torch.bmm(input_lrf.unsqueeze(2), input_lrf.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "test.view(num_q, 8, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "averaged_Q4",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_q",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ],
                        [
                            "80",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "randn_106": {
                "variable": {
                    "value": "input1",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_q",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ],
                        [
                            "80",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_110": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "input": {
                    "value": "input1",
                    "possible_values": [
                        [
                            "input.clone()",
                            "Call"
                        ],
                        [
                            "torch.randn(num_q, 8, 4).cuda()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "bmm_112": {
                "variable": {
                    "value": "input_cov",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lrf.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input_lrf.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "input_cov_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cov",
                    "possible_values": [
                        [
                            "torch.bmm(input_lrf.unsqueeze(2), input_lrf.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "input_cov.view(num_q, 8, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "rand_127": {
                "variable": {
                    "value": "averaged_Q4",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_q",
                    "possible_values": [
                        [
                            "800",
                            "Constant"
                        ],
                        [
                            "80",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_129": {
                "variable": {
                    "value": "input_lrf2",
                    "possible_values": []
                },
                "input": {
                    "value": "input2",
                    "possible_values": [
                        [
                            "input1.clone()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "bmm_131": {
                "variable": {
                    "value": "input_cov2",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lrf2.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input_lrf2.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "sum_133": {
                "variable": {
                    "value": "input_cov_sum2",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cov2",
                    "possible_values": [
                        [
                            "torch.bmm(input_lrf2.unsqueeze(2), input_lrf2.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "input_cov2.view(num_q, 8, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "tensor_187": {
                "variable": {
                    "value": "test1",
                    "possible_values": []
                },
                "data": {
                    "value": "[[2.7378, -2.7378, -0.4963, -0.2952], [-2.7378, 2.7378, 0.4963, 0.2952], [-0.4963, 0.4963, 1.8648, 1.1091], [-0.2952, 0.2952, 1.1091, 0.6596]]",
                    "possible_values": []
                }
            },
            "manual_seed_212": {
                "seed": {
                    "value": "manualSeed",
                    "possible_values": [
                        [
                            "4041",
                            "Constant"
                        ]
                    ]
                }
            },
            "eig_91": {
                "variable": {
                    "value": "(eigenValues, eigenVectors)",
                    "possible_values": []
                },
                "input": {
                    "value": "input3[i]",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_92": {
                "variable": {
                    "value": "(e_values, e_indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "eigenValues",
                    "possible_values": []
                }
            },
            "symeig_135": {
                "variable": {
                    "value": "(eigenValues, eigenVectors)",
                    "possible_values": []
                },
                "input": {
                    "value": "input_cov_sum2[i]",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "max_136": {
                "variable": {
                    "value": "(e_values, e_indices)",
                    "possible_values": []
                },
                "input": {
                    "value": "eigenValues",
                    "possible_values": []
                }
            },
            "rand_12": {
                "*size": {
                    "value": "30",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "gradcheck_23": {
                "func": {
                    "value": "S.BasicSymeig(upper=upper)",
                    "possible_values": []
                },
                "inputs": {
                    "value": "(input,)",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-06",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.0001",
                    "possible_values": []
                }
            },
            "abs_82": {
                "input": {
                    "value": "v_max[:, 0]",
                    "possible_values": []
                }
            },
            "abs_119": {
                "input": {
                    "value": "v_max[:, 0]",
                    "possible_values": []
                }
            }
        }
    },
    "models/pytorch-autograd-solver/test_speed.py": {
        "torch": {
            "rand_11": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "*size": {
                    "value": "65535",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            }
        }
    },
    "models/pytorch-autograd-solver/torch_autograd_solver/__init__.py": {
        "torch": {
            "BasicSymeig_10": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.upper": {
                    "value": "upper",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchSymeig_68": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.upper": {
                    "value": "upper",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.tol": {
                    "value": "tol",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_sweeps": {
                    "value": "max_sweeps",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GeneralizedSymeig_101": {
                "base_class_0": {
                    "value": "torch.autograd.Function",
                    "possible_values": []
                },
                "self.tol": {
                    "value": "tol",
                    "possible_values": [
                        [
                            "1e-07",
                            "MethodArgument"
                        ],
                        [
                            "1e-07",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.max_sweeps": {
                    "value": "max_sweeps",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "symeig_51": {
                "variable": {
                    "value": "(w, v)",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "possible_values": []
                },
                "eigenvectors": {
                    "value": "True",
                    "possible_values": []
                },
                "upper": {
                    "value": "self.upper",
                    "possible_values": []
                }
            },
            "from_numpy_128": {
                "variable": {
                    "value": "w",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "w",
                    "possible_values": [
                        [
                            "torch.from_numpy(w)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "V",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "V",
                    "possible_values": [
                        [
                            "torch.from_numpy(V)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/pytorch-cusolver/setup.py": {
        "torch": {}
    },
    "models/pytorch-cusolver/test.py": {
        "torch": {
            "randn_13": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_q",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "8",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_14": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lrf",
                    "possible_values": [
                        [
                            "torch.randn(num_q, 8, 4).cuda()",
                            "Call"
                        ],
                        [
                            "F.normalize(input_lrf, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "input_lrf.view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "bmm_16": {
                "variable": {
                    "value": "test",
                    "possible_values": []
                },
                "input": {
                    "value": "input_lrf.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "input_lrf.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "sum_18": {
                "variable": {
                    "value": "A",
                    "possible_values": []
                },
                "input": {
                    "value": "test",
                    "possible_values": [
                        [
                            "torch.bmm(input_lrf.unsqueeze(2), input_lrf.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "test.view(num_q, 8, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "models/qec_module.py": {
        "torch": {
            "QecModule_11": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.in_channels": {
                    "value": "in_channels",
                    "possible_values": []
                },
                "self.out_channels": {
                    "value": "out_channels",
                    "possible_values": []
                },
                "self.num_iterations": {
                    "value": "num_iterations",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_neighbours": {
                    "value": "num_neighbours",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_patches": {
                    "value": "num_patches",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "Linear_24": {
                    "variable": {
                        "value": "self.quater_gen1",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "3 * self.in_channels",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Linear_25": {
                    "variable": {
                        "value": "self.quater_gen2",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "self.out_channels",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "self.out_channels * self.in_channels * 4",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "Parameter_27": {
                    "variable": {
                        "value": "self.alpha",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(1)",
                        "possible_values": []
                    }
                },
                "Parameter_28": {
                    "variable": {
                        "value": "self.beta",
                        "possible_values": []
                    },
                    "data": {
                        "value": "torch.FloatTensor(1)",
                        "possible_values": []
                    }
                }
            },
            "bmm_39": {
                "variable": {
                    "value": "cov_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "_input_lrf.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "_input_lrf.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "mean_41": {
                "variable": {
                    "value": "cov_matrix_ave",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_matrix",
                    "possible_values": [
                        [
                            "torch.bmm(_input_lrf.unsqueeze(2), _input_lrf.unsqueeze(1))",
                            "Call"
                        ],
                        [
                            "cov_matrix.view(num_q, self.num_neighbours, 4, 4)",
                            "Call"
                        ],
                        [
                            "torch.bmm(pose.unsqueeze(2), pose.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sign_44": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(_input_a)",
                    "possible_values": []
                }
            },
            "sum_45": {
                "variable": {
                    "value": "mask_4_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "torch.sign(torch.abs(_input_a))",
                            "Call"
                        ],
                        [
                            "torch.sign(torch.abs(input_a))",
                            "Call"
                        ],
                        [
                            "torch.sign(torch.abs(w_sum))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "variable": {
                    "value": "v_max",
                    "possible_values": []
                },
                "*size": {
                    "value": "(cov_matrix_ave.size(0), 4)",
                    "possible_values": []
                },
                "device": {
                    "value": "cov_matrix_ave.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "sign_58": {
                "variable": {
                    "value": "vmax_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "v_max[:, 0]",
                    "possible_values": []
                }
            },
            "sign_66": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(input_a)",
                    "possible_values": []
                }
            },
            "normalize_68": {
                "variable": {
                    "value": "weights",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "b_ij.float()",
                            "Call"
                        ],
                        [
                            "weights * mask",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weights, p=1, dim=-1)",
                            "Call"
                        ],
                        [
                            "weights.contiguous().view(-1, 1, 1)",
                            "Call"
                        ],
                        [
                            "weights.expand(pose.size(0), 4, 4).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "pose",
                    "possible_values": [
                        [
                            "pose.view(-1, self.num_neighbours * self.in_channels, 4)",
                            "Call"
                        ],
                        [
                            "pose.view(-1, 4)",
                            "Call"
                        ],
                        [
                            "pose[:, :, :, None, :].expand_as(vote)",
                            "Call"
                        ],
                        [
                            "pose[:, :, :, None, :].expand_as(vote)",
                            "Call"
                        ],
                        [
                            "self.mean(vote, b_ij, activation)",
                            "Call"
                        ],
                        [
                            "self.mean(vote_detached, b_ij, activation)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "bmm_79": {
                "variable": {
                    "value": "cov_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "pose.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pose.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "sum_83": {
                "variable": {
                    "value": "cov_matrix_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "weighted_cov",
                    "possible_values": [
                        [
                            "weights * cov_matrix",
                            "BinOp"
                        ],
                        [
                            "weighted_cov.view(num_q, self.num_neighbours * self.in_channels, 4, 4)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "variable": {
                    "value": "v_max",
                    "possible_values": []
                },
                "*size": {
                    "value": "(cov_matrix_sum.size(0), 4)",
                    "possible_values": []
                },
                "device": {
                    "value": "cov_matrix_sum.device",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "possible_values": []
                }
            },
            "sign_94": {
                "variable": {
                    "value": "vmax_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "v_max[:, 0]",
                    "possible_values": []
                }
            },
            "normalize_130": {
                "variable": {
                    "value": "t_ij",
                    "possible_values": []
                },
                "input": {
                    "value": "t_ij",
                    "possible_values": [
                        [
                            "self.quater_gen2(t_ij1).float()",
                            "Call"
                        ],
                        [
                            "t_ij.view(batch_size, self.num_patches, self.num_neighbours, 4, self.in_channels, self.out_channels)",
                            "Call"
                        ],
                        [
                            "t_ij.transpose(-1, -3).contiguous()",
                            "Call"
                        ],
                        [
                            "F.normalize(t_ij, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "t_ij * t_ij_mask",
                            "BinOp"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sign_132": {
                "variable": {
                    "value": "t_ij_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "t_ij[:, :, :, :, :, 0]",
                    "possible_values": []
                }
            },
            "sign_143": {
                "variable": {
                    "value": "v_ij_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "v_ij[:, :, :, :, 0]",
                    "possible_values": []
                }
            },
            "clamp_158": {
                "variable": {
                    "value": "temp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs((pose * vote).sum(dim=-1))",
                    "possible_values": []
                },
                "max": {
                    "value": "0.9999",
                    "possible_values": []
                }
            },
            "sign_189": {
                "variable": {
                    "value": "w_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(b_ij)",
                    "possible_values": []
                }
            },
            "sum_189": {
                "variable": {
                    "value": "w_sum",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "sign_191": {
                "variable": {
                    "value": "mask",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(w_sum)",
                    "possible_values": []
                }
            },
            "abs_44": {
                "input": {
                    "value": "_input_a",
                    "possible_values": [
                        [
                            "_input_a.transpose(-2, -1).contiguous().view(-1, self.num_neighbours)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_49": {
                "input": {
                    "value": "cov_matrix_ave_none_zero",
                    "possible_values": [
                        [
                            "cov_matrix_ave[mask_4_matrix]",
                            "Subscript"
                        ],
                        [
                            "cov_matrix_ave_none_zero + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_66": {
                "input": {
                    "value": "input_a",
                    "possible_values": []
                }
            },
            "randn_like_87": {
                "input": {
                    "value": "cov_matrix_sum_none_zero",
                    "possible_values": [
                        [
                            "cov_matrix_sum[mask_4_matrix]",
                            "Subscript"
                        ],
                        [
                            "cov_matrix_sum_none_zero + noise",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_158": {
                "input": {
                    "value": "(pose * vote).sum(dim=-1)",
                    "possible_values": []
                }
            },
            "abs_191": {
                "input": {
                    "value": "w_sum",
                    "possible_values": [
                        [
                            "torch.sign(torch.abs(b_ij)).sum(dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_193": {
                "input": {
                    "value": "alpha * neg_distance + (beta - 1)",
                    "possible_values": []
                }
            },
            "acos_159": {
                "input": {
                    "value": "temp",
                    "possible_values": [
                        [
                            "torch.clamp(torch.abs((pose * vote).sum(dim=-1)), max=0.9999)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_189": {
                "input": {
                    "value": "b_ij",
                    "possible_values": [
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "b_ij.cuda()",
                            "Call"
                        ],
                        [
                            "b_ij * activation * (1 - self.distance(pose, vote_detached))",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "models/qec_net.py": {
        "torch": {
            "QecNet_13": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_points": {
                    "value": "num_points",
                    "possible_values": []
                },
                "self.inter_out_channels": {
                    "value": "inter_out_channels",
                    "possible_values": []
                },
                "self.num_iterations": {
                    "value": "num_iterations",
                    "possible_values": []
                },
                "self.num_of_class": {
                    "value": "num_of_class",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "src.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "src.max().item() + 1 if num_classes is None else num_classes",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_55": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "clamp_62": {
                "variable": {
                    "value": "temp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs((pose[0] * pose[1]).sum(dim=-1))",
                    "possible_values": []
                },
                "max": {
                    "value": "0.9999",
                    "possible_values": []
                }
            },
            "relu_43": {
                "input": {
                    "value": "activation4pool2",
                    "possible_values": [
                        [
                            "activation_pool1.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_62": {
                "input": {
                    "value": "(pose[0] * pose[1]).sum(dim=-1)",
                    "possible_values": []
                }
            },
            "relu_57": {
                "input": {
                    "value": "m - (act_t.view(-1, 1) - x)",
                    "possible_values": []
                }
            },
            "acos_63": {
                "input": {
                    "value": "temp",
                    "possible_values": [
                        [
                            "torch.clamp(torch.abs((pose[0] * pose[1]).sum(dim=-1)), max=0.9999)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/qec_sia_net.py": {
        "torch": {
            "QecSiaNet_14": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.num_points": {
                    "value": "num_points",
                    "possible_values": []
                },
                "self.inter_out_channels": {
                    "value": "inter_out_channels",
                    "possible_values": []
                },
                "self.num_iterations": {
                    "value": "num_iterations",
                    "possible_values": []
                },
                "self.num_of_class": {
                    "value": "num_of_class",
                    "possible_values": []
                }
            },
            "stack_57": {
                "variable": {
                    "value": "pose_out_sia",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pose_out_sia",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(pose_out_sia, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "stack_58": {
                "variable": {
                    "value": "a_out_sia",
                    "possible_values": []
                },
                "tensors": {
                    "value": "a_out_sia",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(a_out_sia, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "zeros_63": {
                "variable": {
                    "value": "out",
                    "possible_values": []
                },
                "*size": {
                    "value": "src.size(0)",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "src.max().item() + 1 if num_classes is None else num_classes",
                            "IfExp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "data": {
                    "value": "0.1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "target.dtype",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "possible_values": []
                }
            },
            "clamp_78": {
                "variable": {
                    "value": "temp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs((pose[0] * pose[1]).sum(dim=-1))",
                    "possible_values": []
                },
                "max": {
                    "value": "0.9999",
                    "possible_values": []
                }
            },
            "abs_78": {
                "input": {
                    "value": "(pose[0] * pose[1]).sum(dim=-1)",
                    "possible_values": []
                }
            },
            "relu_52": {
                "input": {
                    "value": "activation4pool2",
                    "possible_values": [
                        [
                            "activation_pool1.unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_71": {
                "input": {
                    "value": "m - (act_t1.view(-1, 1) - x[0])",
                    "possible_values": []
                }
            },
            "relu_73": {
                "input": {
                    "value": "m - (act_t2.view(-1, 1) - x[1])",
                    "possible_values": []
                }
            },
            "acos_79": {
                "input": {
                    "value": "temp",
                    "possible_values": [
                        [
                            "torch.clamp(torch.abs((pose[0] * pose[1]).sum(dim=-1)), max=0.9999)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/quat_ops.py": {
        "torch": {
            "bmm_42": {
                "variable": {
                    "value": "terms",
                    "possible_values": []
                },
                "input": {
                    "value": "r.contiguous().view(-1, 4, 1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.contiguous().view(-1, 1, 4)",
                    "possible_values": []
                }
            },
            "cross_66": {
                "variable": {
                    "value": "uv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": [
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_67": {
                "variable": {
                    "value": "uuv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cross(qvec, pv, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_87": {
                "variable": {
                    "value": "terms",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(-1, 4, 1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.view(-1, 1, 4)",
                    "possible_values": []
                }
            },
            "stack_102": {
                "tensors": {
                    "value": "qvec_z",
                    "possible_values": [
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ],
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_126": {
                "variable": {
                    "value": "uv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pv",
                    "possible_values": [
                        [
                            "p[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "pv + 2 * (q[:, :1] * uv + uuv)",
                            "BinOp"
                        ],
                        [
                            "p[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(qvec, pv.unsqueeze(-1)).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_127": {
                "variable": {
                    "value": "uuv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cross(qvec, pv, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_152": {
                "variable": {
                    "value": "terms",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(-1, 4, 1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.view(-1, 1, 4)",
                    "possible_values": []
                }
            },
            "stack_167": {
                "tensors": {
                    "value": "qvec_z",
                    "possible_values": [
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ],
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_169": {
                "variable": {
                    "value": "pv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pv.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "squeeze_169": {
                "variable": {
                    "value": "pv",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_395": {
                "variable": {
                    "value": "q_weight.data",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r.type_as(q_weight.data), i.type_as(q_weight.data), j.type_as(q_weight.data), k.type_as(q_weight.data))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_406": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_426": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_427": {
                "variable": {
                    "value": "t_ij",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                },
                "device": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "stack_48": {
                "tensors": {
                    "value": "(w, x, y, z)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_104": {
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "cat_132": {
                "tensors": {
                    "value": "(pw.unsqueeze(-1), pv)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_171": {
                "tensors": {
                    "value": "(pw.unsqueeze(-1), pv)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "atan2_191": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "asin_192": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q3 + q0 * q2), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_193": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "stack_217": {
                "tensors": {
                    "value": "(x, y, z)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "atan2_195": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "atan2_196": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "asin_197": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q2 + q0 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "from_numpy_394": {
                "ndarray": {
                    "value": "k",
                    "possible_values": []
                }
            },
            "clamp_192": {
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "asin_199": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 + q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_200": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "atan2_201": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "from_numpy_374": {
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "rng.binomial(n=1, p=1 - dropout_p, size=size)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_197": {
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "atan2_203": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "atan2_204": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 + q1 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "asin_205": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q3 - q1 * q2), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "clamp_199": {
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "asin_207": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 - q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_208": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "atan2_209": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "clamp_205": {
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "atan2_211": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "asin_212": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q2 - q1 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_213": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 + q1 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "clamp_207": {
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "clamp_212": {
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            }
        }
    },
    "my_dataloader/gen_downsample_m40.py": {
        "torch": {
            "ModelNetDataset_30": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.npoints": {
                    "value": "npoints",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.normalize": {
                    "value": "normalize",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.data_aug": {
                    "value": "data_aug",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_gen_samples": {
                    "value": "num_gen_samples",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.lrf_channel": {
                    "value": "lrf_channel",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.cache_size": {
                    "value": "cache_size",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_168": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "ModelNetDataset(root='/home/zhao/dataset/modelnet40_normal_resampled/', npoints=2048, split='test', num_of_class=40, num_gen_samples=5, data_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "14",
                    "possible_values": []
                }
            },
            "empty_68": {
                "variable": {
                    "value": "all_smaples_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_gen_samples",
                    "possible_values": []
                },
                "out": {
                    "value": "1024 + 256 + 1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "point_set2048",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_set2048",
                    "possible_values": [
                        [
                            "point_normal_set[choice, 0:3]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(point_set2048).float()",
                            "Call"
                        ],
                        [
                            "quat_ops.qrotv(rotate_q, point_set2048)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_84": {
                "variable": {
                    "value": "choice",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "choice",
                    "possible_values": [
                        [
                            "np.random.choice(len(point_normal_set), self.npoints, replace=False)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(choice).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_87": {
                "variable": {
                    "value": "diam",
                    "possible_values": []
                },
                "input": {
                    "value": "(torch.max(point_set2048[:, 0]) - torch.min(point_set2048[:, 0])) ** 2 + (torch.max(point_set2048[:, 1]) - torch.min(point_set2048[:, 1])) ** 2 + (torch.max(point_set2048[:, 2]) - torch.min(point_set2048[:, 2])) ** 2",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "variable": {
                    "value": "points_pool1_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "2048",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "pool1_index_4_save",
                    "possible_values": []
                },
                "*size": {
                    "value": "2048",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "points_neighbour_counts1",
                    "possible_values": []
                },
                "*size": {
                    "value": "2048",
                    "possible_values": []
                }
            },
            "zeros_121": {
                "variable": {
                    "value": "points_pool2_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "zeros_122": {
                "variable": {
                    "value": "pool2_index_4_save",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "possible_values": []
                },
                "out": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "points_neighbour_counts2",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "all_smaples_index[sample_no]",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pool1_index_4_save, pool2_index_4_save, pool1_size)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "save_152": {
                "obj": {
                    "value": "all_smaples_index",
                    "possible_values": [
                        [
                            "torch.empty(self.num_gen_samples, 1024 + 256 + 1, 9).long()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "fn[2]",
                    "possible_values": []
                }
            },
            "randn_77": {
                "variable": {
                    "value": "rotate_q",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_80": {
                "variable": {
                    "value": "rotate_q",
                    "possible_values": []
                },
                "input": {
                    "value": "rotate_q",
                    "possible_values": [
                        [
                            "torch.randn(4)",
                            "Call"
                        ],
                        [
                            "rotate_q * -1",
                            "BinOp"
                        ],
                        [
                            "F.normalize(rotate_q, p=2, dim=-1)",
                            "Call"
                        ],
                        [
                            "rotate_q.unsqueeze(0).expand(2048, 4)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "ones_147": {
                "*size": {
                    "value": "[1, 9]",
                    "possible_values": []
                }
            },
            "max_87": {
                "input": {
                    "value": "point_set2048[:, 1]",
                    "possible_values": []
                }
            },
            "min_87": {
                "input": {
                    "value": "point_set2048[:, 1]",
                    "possible_values": []
                }
            }
        }
    },
    "my_dataloader/modelnet_with_lrf_sample_index_loader.py": {
        "torch": {
            "ModelNetDataset_24": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.npoints": {
                    "value": "npoints",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.normalize": {
                    "value": "normalize",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.data_aug": {
                    "value": "data_aug",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.point_shift": {
                    "value": "point_shift",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_gen_samples": {
                    "value": "num_gen_samples",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_of_class": {
                    "value": "num_of_class",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.rand_seed": {
                    "value": "rand_seed",
                    "possible_values": [
                        [
                            "999",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.cache_size": {
                    "value": "cache_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_108": {
                "variable": {
                    "value": "point_normal_set",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_normal_set",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[1], delimiter=',').astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(point_normal_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_134": {
                "variable": {
                    "value": "pool2_index_",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2_index",
                    "possible_values": [
                        [
                            "ds_index_set[1024:1024 + 256]",
                            "Subscript"
                        ],
                        [
                            "pool1_index[pool2_index_, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "max": {
                    "value": "1023",
                    "possible_values": []
                }
            },
            "sign_139": {
                "variable": {
                    "value": "activation_pool2",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2_index",
                    "possible_values": [
                        [
                            "ds_index_set[1024:1024 + 256]",
                            "Subscript"
                        ],
                        [
                            "pool1_index[pool2_index_, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_140": {
                "variable": {
                    "value": "activation_pool2",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_pool2",
                    "possible_values": [
                        [
                            "torch.sign(pool2_index)",
                            "Call"
                        ],
                        [
                            "torch.clamp(activation_pool2, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_162": {
                "variable": {
                    "value": "cls",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "possible_values": []
                }
            },
            "from_numpy_99": {
                "variable": {
                    "value": "lrf_set",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(fn[2]).astype(np.float32)",
                    "possible_values": []
                }
            },
            "load_100": {
                "variable": {
                    "value": "ds_index_set",
                    "possible_values": []
                },
                "f": {
                    "value": "fn[3]",
                    "possible_values": []
                }
            },
            "randn_113": {
                "variable": {
                    "value": "rotate_q",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_116": {
                "variable": {
                    "value": "rotate_q",
                    "possible_values": []
                },
                "input": {
                    "value": "rotate_q",
                    "possible_values": [
                        [
                            "torch.randn(4)",
                            "Call"
                        ],
                        [
                            "rotate_q * -1",
                            "BinOp"
                        ],
                        [
                            "F.normalize(rotate_q, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "my_dataloader/modelnet_with_lrf_sample_index_loader_sia.py": {
        "torch": {
            "ModelNetDataset_24": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.root": {
                    "value": "root",
                    "possible_values": []
                },
                "self.batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.npoints": {
                    "value": "npoints",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.normalize": {
                    "value": "normalize",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.data_aug": {
                    "value": "data_aug",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_gen_samples": {
                    "value": "num_gen_samples",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.num_of_class": {
                    "value": "num_of_class",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.sample_pair": {
                    "value": "sample_pair",
                    "possible_values": [
                        [
                            "[0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.rot_id": {
                    "value": "rot_id",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.cache_size": {
                    "value": "cache_size",
                    "possible_values": [
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_104": {
                "variable": {
                    "value": "point_normal_set",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "point_normal_set",
                    "possible_values": [
                        [
                            "np.loadtxt(fn[1], delimiter=',').astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(point_normal_set)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "points_pool2",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "zeros_111": {
                "variable": {
                    "value": "lrf_pool2",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "zeros_112": {
                "variable": {
                    "value": "activation_pool2",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "pool2_index",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "256",
                    "possible_values": []
                },
                "dtype": {
                    "value": "9",
                    "possible_values": []
                }
            },
            "zeros_114": {
                "variable": {
                    "value": "input_cls",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_95": {
                "variable": {
                    "value": "lrf_set",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.loadtxt(fn[2]).astype(np.float32)",
                    "possible_values": []
                }
            },
            "load_96": {
                "variable": {
                    "value": "ds_index_set",
                    "possible_values": []
                },
                "f": {
                    "value": "fn[3]",
                    "possible_values": []
                }
            },
            "clamp_129": {
                "variable": {
                    "value": "pool2_index_",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2_index",
                    "possible_values": [
                        [
                            "torch.zeros(2, 256, 9)",
                            "Call"
                        ],
                        [
                            "ds_index_set_[1024:1024 + 256]",
                            "Subscript"
                        ],
                        [
                            "pool1_index[pool2_index_, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "max": {
                    "value": "1023",
                    "possible_values": []
                }
            },
            "sign_134": {
                "variable": {
                    "value": "activation_pool2_",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2_index",
                    "possible_values": [
                        [
                            "torch.zeros(2, 256, 9)",
                            "Call"
                        ],
                        [
                            "ds_index_set_[1024:1024 + 256]",
                            "Subscript"
                        ],
                        [
                            "pool1_index[pool2_index_, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_135": {
                "variable": {
                    "value": "activation_pool2_",
                    "possible_values": []
                },
                "input": {
                    "value": "activation_pool2_",
                    "possible_values": [
                        [
                            "torch.sign(pool2_index)",
                            "Call"
                        ],
                        [
                            "torch.clamp(activation_pool2_, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_169": {
                "variable": {
                    "value": "cls_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([cls]).astype(np.int64)",
                    "possible_values": []
                }
            },
            "randn_152": {
                "variable": {
                    "value": "rotate_q",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "normalize_155": {
                "variable": {
                    "value": "rotate_q",
                    "possible_values": []
                },
                "input": {
                    "value": "rotate_q",
                    "possible_values": [
                        [
                            "torch.randn(4)",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([1.0, 0.0, 0.0, 0.0])",
                            "Call"
                        ],
                        [
                            "rotate_q * -1",
                            "BinOp"
                        ],
                        [
                            "F.normalize(rotate_q, p=2, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "possible_values": []
                }
            }
        }
    },
    "my_dataloader/quat_ops.py": {
        "torch": {
            "bmm_28": {
                "variable": {
                    "value": "terms",
                    "possible_values": []
                },
                "input": {
                    "value": "r.contiguous().view(-1, 4, 1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.contiguous().view(-1, 1, 4)",
                    "possible_values": []
                }
            },
            "cross_52": {
                "variable": {
                    "value": "uv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "possible_values": [
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ],
                        [
                            "v.view(-1, 3)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_53": {
                "variable": {
                    "value": "uuv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cross(qvec, pv, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "terms",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(-1, 4, 1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.view(-1, 1, 4)",
                    "possible_values": []
                }
            },
            "stack_88": {
                "tensors": {
                    "value": "qvec_z",
                    "possible_values": [
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ],
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_112": {
                "variable": {
                    "value": "uv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "pv",
                    "possible_values": [
                        [
                            "p[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "pv + 2 * (q[:, :1] * uv + uuv)",
                            "BinOp"
                        ],
                        [
                            "p[:, 1:4]",
                            "Subscript"
                        ],
                        [
                            "torch.bmm(qvec, pv.unsqueeze(-1)).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cross_113": {
                "variable": {
                    "value": "uuv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "uv",
                    "possible_values": [
                        [
                            "torch.cross(qvec, v, dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cross(qvec, pv, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_138": {
                "variable": {
                    "value": "terms",
                    "possible_values": []
                },
                "input": {
                    "value": "q.view(-1, 4, 1)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "q.view(-1, 1, 4)",
                    "possible_values": []
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "qvec_z",
                    "possible_values": [
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ],
                        [
                            "[2 * bd - 2 * ac, 2 * ab + 2 * cd, 1 - 2 * b2 - 2 * c2]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_155": {
                "variable": {
                    "value": "pv",
                    "possible_values": []
                },
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "pv.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "squeeze_155": {
                "variable": {
                    "value": "pv",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_381": {
                "variable": {
                    "value": "q_weight.data",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(r.type_as(q_weight.data), i.type_as(q_weight.data), j.type_as(q_weight.data), k.type_as(q_weight.data))",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "rand_392": {
                "variable": {
                    "value": "p",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_412": {
                "variable": {
                    "value": "input_lrf",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "rand_413": {
                "variable": {
                    "value": "t_ij",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "possible_values": []
                },
                "dtype": {
                    "value": "8",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "possible_values": []
                },
                "device": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "stack_34": {
                "tensors": {
                    "value": "(w, x, y, z)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "bmm_90": {
                "input": {
                    "value": "qvec",
                    "possible_values": [
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ],
                        [
                            "q[:, 1:]",
                            "Subscript"
                        ],
                        [
                            "torch.stack((torch.stack(qvec_x, dim=1), torch.stack(qvec_y, dim=1), torch.stack(qvec_z, dim=1)), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v.unsqueeze(-1)",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "(pw.unsqueeze(-1), pv)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_157": {
                "tensors": {
                    "value": "(pw.unsqueeze(-1), pv)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "atan2_177": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "asin_178": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q3 + q0 * q2), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_179": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "stack_203": {
                "tensors": {
                    "value": "(x, y, z)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "atan2_181": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "atan2_182": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "asin_183": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q1 * q2 + q0 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "from_numpy_380": {
                "ndarray": {
                    "value": "k",
                    "possible_values": []
                }
            },
            "clamp_178": {
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "asin_185": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 + q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_186": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "atan2_187": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "from_numpy_360": {
                "ndarray": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "rng.binomial(n=1, p=1 - dropout_p, size=size)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_183": {
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "atan2_189": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "atan2_190": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q2 + q1 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "asin_191": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q3 - q1 * q2), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "clamp_185": {
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "asin_193": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q1 - q2 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_194": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q3 + q0 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "atan2_195": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q1 * q2 + q0 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q3 * q3)",
                    "possible_values": []
                }
            },
            "clamp_191": {
                "input": {
                    "value": "2 * (q0 * q3 - q1 * q2)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "atan2_197": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q1 + q2 * q3)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q1 * q1 + q2 * q2)",
                    "possible_values": []
                }
            },
            "asin_198": {
                "variable": {
                    "value": "y",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(2 * (q0 * q2 - q1 * q3), -1 + epsilon, 1 - epsilon)",
                    "possible_values": []
                }
            },
            "atan2_199": {
                "variable": {
                    "value": "z",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * (q0 * q3 + q1 * q2)",
                    "possible_values": []
                },
                "other": {
                    "value": "1 - 2 * (q2 * q2 + q3 * q3)",
                    "possible_values": []
                }
            },
            "clamp_193": {
                "input": {
                    "value": "2 * (q0 * q1 - q2 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            },
            "clamp_198": {
                "input": {
                    "value": "2 * (q0 * q2 - q1 * q3)",
                    "possible_values": []
                },
                "min": {
                    "value": "-1 + epsilon",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - epsilon",
                    "possible_values": []
                }
            }
        }
    },
    "test_cls.py": {
        "torch": {
            "device_17": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "modelnet_with_lrf_sample_index_loader.ModelNetDataset(root=opt.data_path, npoints=opt.num_points, split='test', num_of_class=opt.num_of_class, class_choice=opt.class_choice, num_gen_samples=opt.num_gen_samples, data_aug=opt.data_aug, point_shift=False, rand_seed=opt.manualSeed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "variable": {
                    "value": "cat_results",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.num_of_class",
                    "possible_values": []
                }
            },
            "zeros_44": {
                "variable": {
                    "value": "cat_results2",
                    "possible_values": []
                },
                "*size": {
                    "value": "opt.num_of_class",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.num_of_class",
                    "possible_values": []
                }
            },
            "manual_seed_22": {
                "seed": {
                    "value": "opt.manualSeed",
                    "possible_values": []
                }
            },
            "manual_seed_all_23": {
                "seed": {
                    "value": "opt.manualSeed",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_34": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            }
        }
    },
    "test_rot_sia.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "ave_out",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "pose.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "sign_33": {
                "variable": {
                    "value": "pose1_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "pose1[0]",
                    "possible_values": []
                }
            },
            "sign_36": {
                "variable": {
                    "value": "pose2_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "pose2[0]",
                    "possible_values": []
                }
            },
            "clamp_39": {
                "variable": {
                    "value": "temp",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs((pose1 * pose2).sum(dim=-1))",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "device_61": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "variable": {
                    "value": "pose_out_act",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataLoader_84": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "modelnet_with_lrf_sample_index_loader_sia.ModelNetDataset(root=opt.data_path, npoints=opt.num_points, split='test', num_of_class=5, class_choice=opt.class_choice, num_gen_samples=opt.num_gen_samples, data_aug=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "our_pose_error_all",
                    "possible_values": []
                },
                "*size": {
                    "value": "908",
                    "possible_values": []
                },
                "out": {
                    "value": "7",
                    "possible_values": []
                }
            },
            "sum_20": {
                "variable": {
                    "value": "mask_4_pose",
                    "possible_values": []
                },
                "input": {
                    "value": "pose[b_id]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "nonzero_20": {
                "variable": {
                    "value": "mask_4_pose",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "squeeze_20": {
                "variable": {
                    "value": "mask_4_pose",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "bmm_22": {
                "variable": {
                    "value": "cov_matrix",
                    "possible_values": []
                },
                "input": {
                    "value": "pose_none_zero.unsqueeze(2)",
                    "possible_values": []
                },
                "mat2": {
                    "value": "pose_none_zero.unsqueeze(1)",
                    "possible_values": []
                }
            },
            "mean_23": {
                "variable": {
                    "value": "cov_matrix_ave",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_matrix",
                    "possible_values": [
                        [
                            "torch.bmm(pose_none_zero.unsqueeze(2), pose_none_zero.unsqueeze(1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "sign_26": {
                "variable": {
                    "value": "vmax_mask",
                    "possible_values": []
                },
                "input": {
                    "value": "v_max[0]",
                    "possible_values": []
                }
            },
            "mean_57": {
                "input": {
                    "value": "relative_error",
                    "possible_values": [
                        [
                            "abs(torch.norm(relative_points - points) / (torch.norm(points) + torch.norm(relative_points) + 1e-09))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_91": {
                "variable": {
                    "value": "pose_out_act",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "abs_39": {
                "input": {
                    "value": "(pose1 * pose2).sum(dim=-1)",
                    "possible_values": []
                }
            },
            "acos_40": {
                "input": {
                    "value": "temp",
                    "possible_values": [
                        [
                            "torch.clamp(torch.abs((pose1 * pose2).sum(dim=-1)), max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_55": {
                "input": {
                    "value": "relative_points",
                    "possible_values": [
                        [
                            "quat_ops.qrotv(relative_pose_, points)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_61": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_65": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            },
            "device_count_68": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "tensor_124": {
                "data": {
                    "value": "[0, 0, 1, 0]",
                    "possible_values": []
                }
            }
        }
    },
    "train_cls.py": {
        "torch": {
            "DataLoader_21": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "modelnet_with_lrf_sample_index_loader.ModelNetDataset(root=opt.data_path, npoints=opt.num_points, split='train', num_of_class=opt.num_of_class, class_choice=opt.class_choice, num_gen_samples=opt.num_gen_samples, data_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataParallel_27": {
                "variable": {
                    "value": "qec_net",
                    "possible_values": []
                },
                "module": {
                    "value": "qec_net",
                    "possible_values": [
                        [
                            "QecNet(opt.num_points, opt.inter_out_channels, opt.num_of_class, opt.num_iterations)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(qec_net)",
                            "Call"
                        ],
                        [
                            "qec_net.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr / 10",
                    "possible_values": []
                }
            },
            "save_89": {
                "obj": {
                    "value": "qec_net.module.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_name",
                    "possible_values": [
                        [
                            "log_dir + '/tmp_' + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr / 100",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr / 1000",
                    "possible_values": []
                }
            }
        }
    },
    "train_cls_sia.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "possible_values": []
                }
            },
            "DataLoader_25": {
                "variable": {
                    "value": "loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "modelnet_with_lrf_sample_index_loader_sia.ModelNetDataset(root=opt.data_path, npoints=opt.num_points, split='train', num_of_class=opt.num_of_class, class_choice=opt.class_choice, num_gen_samples=opt.num_gen_samples, data_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "DataParallel_33": {
                "variable": {
                    "value": "qec_net",
                    "possible_values": []
                },
                "module": {
                    "value": "qec_net",
                    "possible_values": [
                        [
                            "QecSiaNet(opt.num_points, opt.inter_out_channels, opt.num_of_class, opt.num_iterations)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(qec_net)",
                            "Call"
                        ],
                        [
                            "qec_net.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_count_31": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Adam_51": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "pose_out_act",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "possible_values": []
                },
                "out": {
                    "value": "opt.batch_size",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_29": {
                "f": {
                    "value": "opt.model",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr / 10",
                    "possible_values": []
                }
            },
            "save_95": {
                "obj": {
                    "value": "qec_net.module.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "dict_name",
                    "possible_values": [
                        [
                            "log_dir + '/tmp_' + str(epoch) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_55": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr / 100",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "qec_net.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.init_lr / 1000",
                    "possible_values": []
                }
            }
        }
    }
}