{
    "data.py": {
        "torch": {
            "stack_69": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "output_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_516": {
                "variable": {
                    "value": "x_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "x_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(x_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_512": {
                "variable": {
                    "value": "class_image_samples",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "class_image_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(class_image_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_580": {
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.num_of_gpus * self.batch_size * self.samples_per_iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "experiment_builder.py": {
        "torch": {}
    },
    "few_shot_learning_system.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "torch_seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rng.randint(0, 999999)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_69": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.trainable_parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.meta_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "amsgrad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_70": {
                "variable": {
                    "value": "self.scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self.args.total_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "self.args.min_learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_73": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Tensor_102": {
                "variable": {
                    "value": "loss_weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_count_132": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_138": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(input=preds, target=y)",
                            "Call"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ],
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "names_weights_copy.values()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "use_second_order",
                    "type": "variable",
                    "possible_values": [
                        [
                            "use_second_order",
                            "Method Argument"
                        ],
                        [
                            "use_second_order",
                            "Method Argument"
                        ]
                    ]
                },
                "allow_unused": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_284": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.classifier.forward(x=x, params=weights, training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_355": {
                "variable": {
                    "value": "x_support_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_356": {
                "variable": {
                    "value": "x_target_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_357": {
                "variable": {
                    "value": "y_support_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_358": {
                "variable": {
                    "value": "y_target_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_384": {
                "variable": {
                    "value": "x_support_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_385": {
                "variable": {
                    "value": "x_target_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_386": {
                "variable": {
                    "value": "y_support_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_387": {
                "variable": {
                    "value": "y_target_set",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_420": {
                "variable": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_save_dir, '{}_{}'.format(model_name, model_idx))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_81": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_247": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "target_preds.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_250": {
                "variable": {
                    "value": "task_losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(task_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(filepath)",
                            "Call"
                        ],
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "model_save_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_save_dir",
                            "Method Argument"
                        ],
                        [
                            "model_save_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_164": {
                "input": {
                    "value": "torch.stack(total_losses)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_count_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_164": {
                "tensors": {
                    "value": "total_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "total_losses",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_201": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_250": {
                "tensors": {
                    "value": "task_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.sum(torch.stack(task_losses))",
                            "Call"
                        ]
                    ]
                }
            },
            "current_device_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inner_loop_optimizers.py": {
        "torch": {
            "ParameterDict_87": {
                "variable": {
                    "value": "self.names_learning_rates_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.names_learning_rates_dict[key.replace(., -)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(self.total_num_inner_loop_steps + 1) * self.init_learning_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.use_learnable_learning_rates",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_36": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_90": {
                "*size": {
                    "value": "self.total_num_inner_loop_steps + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "meta_neural_network_architectures.py": {
        "torch": {
            "Parameter_62": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(num_filters, in_channels, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_115": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_filters, c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "self.backup_running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.running_mean.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_201": {
                "variable": {
                    "value": "self.backup_running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.running_var.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_353": {
                "variable": {
                    "value": "self.layer_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_358": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_383": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.norm_layer(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(self.conv.forward(out))",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "self.conv.forward(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, training=True, num_step=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, params=param_dict['conv{}'.format(i)], training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out, param_dict['linear'])",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_426": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.norm_layer(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(self.conv.forward(out))",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "self.conv.forward(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, training=True, num_step=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, params=param_dict['conv{}'.format(i)], training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out, param_dict['linear'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleDict_468": {
                "variable": {
                    "value": "self.layer_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_473": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LeakyReLU_493": {
                "variable": {
                    "value": "self.layer_dict[activation_function_pre]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_587": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleDict_589": {
                "variable": {
                    "value": "self.layer_dict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_66": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_89": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.input_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "params['weights']",
                            "Subscript"
                        ],
                        [
                            "params['weights']",
                            "Subscript"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight[num_step]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[num_step]",
                            "Subscript"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_141": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.input_shape)",
                            "Call"
                        ],
                        [
                            "torch.zeros(self.input_shape)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "params['weights']",
                            "Subscript"
                        ],
                        [
                            "params['weights']",
                            "Subscript"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight[num_step]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[num_step]",
                            "Subscript"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_178": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(args.number_of_training_steps_per_iter, num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_180": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(args.number_of_training_steps_per_iter, num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_182": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(args.number_of_training_steps_per_iter, num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learnable_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_184": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(args.number_of_training_steps_per_iter, num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learnable_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_189": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learnable_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_191": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learnable_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_195": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learnable_beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_197": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.learnable_gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "batch_norm_246": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "running_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_mean[num_step]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "running_var": {
                    "value": "running_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var[num_step]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "params['weights']",
                            "Subscript"
                        ],
                        [
                            "params['weights']",
                            "Subscript"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "self.weights",
                            "Attribute"
                        ],
                        [
                            "params['weight']",
                            "Subscript"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "self.weight[num_step]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[num_step]",
                            "Subscript"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.momentum",
                            "Attribute"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_254": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.backup_running_mean.to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_255": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.backup_running_var.to(device=self.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_279": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*input_feature_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_280": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(*input_feature_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "layer_norm_314": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "normalized_shape": {
                    "value": "self.normalized_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ],
                        [
                            "self.bias[num_step]",
                            "Subscript"
                        ],
                        [
                            "params['bias']",
                            "Subscript"
                        ],
                        [
                            "self.bias",
                            "Attribute"
                        ]
                    ]
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "avg_pool2d_609": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.norm_layer(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(self.conv.forward(out))",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "self.conv.forward(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, training=True, num_step=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, params=param_dict['conv{}'.format(i)], training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out, param_dict['linear'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "avg_pool2d_655": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.norm_layer(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(self.conv.forward(out))",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "self.conv.forward(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, training=True, num_step=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, params=param_dict['conv{}'.format(i)], training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out, param_dict['linear'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "out.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_62": {
                "*size": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ],
                        [
                            "kernel_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_115": {
                "*size": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pool2d_605": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.norm_layer(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(self.conv.forward(out))",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "self.conv.forward(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, training=True, num_step=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, params=param_dict['conv{}'.format(i)], training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out, param_dict['linear'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool2d_652": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "self.norm_layer(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.conv(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(self.conv.forward(out))",
                            "Call"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=0)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.norm_layer.forward(out, num_step=num_step, params=batch_norm_params, training=training, backup_running_statistics=backup_running_statistics)",
                            "Call"
                        ],
                        [
                            "self.conv.forward(out, params=conv_params)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['activation_function_pre'].forward(out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, training=True, num_step=0)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.layer_dict['conv{}'.format(i)](out, params=param_dict['conv{}'.format(i)], training=training, backup_running_statistics=backup_running_statistics, num_step=num_step)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(input=out, kernel_size=(2, 2), stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, out.shape[2])",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.layer_dict['linear'](out, param_dict['linear'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "*size": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_118": {
                "*size": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ],
                        [
                            "num_filters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_178": {
                "*size": {
                    "value": "args.number_of_training_steps_per_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_180": {
                "*size": {
                    "value": "args.number_of_training_steps_per_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_182": {
                "*size": {
                    "value": "args.number_of_training_steps_per_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_184": {
                "*size": {
                    "value": "args.number_of_training_steps_per_iter",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_189": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_191": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_197": {
                "*size": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_668": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_677": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/parser_utils.py": {
        "torch": {
            "is_available_76": {
                "variable": {
                    "value": "args.use_cuda",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "current_device_78": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "current_device_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}