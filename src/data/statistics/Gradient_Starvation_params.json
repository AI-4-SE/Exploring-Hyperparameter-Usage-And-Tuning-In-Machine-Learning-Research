{
    "Figure_1/moon_fig_1.py": {
        "sklearn": {
            "make_moons_68": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "meshgrid_93": {
                "variable": {
                    "value": "(d1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.linspace(d1_min, d1_max, n), torch.linspace(d2_min, d2_max, n)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_96": {
                "variable": {
                    "value": "heatmap_plane",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d1.flatten(), d2.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_103": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_37": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_40": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_49": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_94": {
                "start": {
                    "value": "d1_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "d1_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_95": {
                "start": {
                    "value": "d2_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "d2_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_113": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "exp['coef']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_125": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.exp(-y_hat * y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_125": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_51": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_115": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_53": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_57": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "input": {
                    "value": "self.dropout_layer(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "self.bn(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_64": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_125": {
                "input": {
                    "value": "-y_hat * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Figure_2/moon_fig_2.py": {
        "sklearn": {
            "make_moons_55": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "meshgrid_94": {
                "variable": {
                    "value": "(d1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.linspace(d1_min, d1_max, n), torch.linspace(d2_min, d2_max, n)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "heatmap_plane",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d1.flatten(), d2.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorDataset_76": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_77": {
                "variable": {
                    "value": "batch_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "TensorDataset(X, y)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_84": {
                "variable": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "jac",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "generator.get_jacobian()[0]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "jac.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "svd_85": {
                "variable": {
                    "value": "(U, S, V)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(jac, jac.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "some": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_47": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_108": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "SGD_117": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_95": {
                "start": {
                    "value": "d1_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "d1_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_96": {
                "start": {
                    "value": "d2_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "d2_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "log_122": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.exp(-y_hat * y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_122": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_51": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_122": {
                "input": {
                    "value": "-y_hat * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_127": {
                "input": {
                    "value": "y_hat.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "U",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "NTK_Left_SV(net, X, y)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Figure_3/moon_fig_3.py": {
        "sklearn": {
            "make_moons_89": {
                "variable": {
                    "value": "(X, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "300",
                            "Constant"
                        ]
                    ]
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "meshgrid_114": {
                "variable": {
                    "value": "(d1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[torch.linspace(d1_min, d1_max, n), torch.linspace(d2_min, d2_max, n)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_117": {
                "variable": {
                    "value": "heatmap_plane",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(d1.flatten(), d2.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_124": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "seeds",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.fc5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_115": {
                "start": {
                    "value": "d1_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "d1_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "linspace_116": {
                "start": {
                    "value": "d2_min",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-2",
                            "UnaryOp"
                        ]
                    ]
                },
                "end": {
                    "value": "d2_max",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "steps": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "100",
                            "Constant"
                        ]
                    ]
                }
            },
            "SGD_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "exp['coef']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "log_146": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.exp(-y_hat * y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_146": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_72": {
                "variable": {
                    "value": "self.dropout_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.7",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "exp['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "SGD_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "500",
                            "Constant"
                        ],
                        [
                            "hidden_dim * 10",
                            "BinOp"
                        ],
                        [
                            "hidden_dim // 10",
                            "BinOp"
                        ]
                    ]
                }
            },
            "relu_78": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_81": {
                "input": {
                    "value": "self.dropout_layer(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_83": {
                "input": {
                    "value": "self.bn(self.fc1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_85": {
                "input": {
                    "value": "self.fc1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_146": {
                "input": {
                    "value": "-y_hat * y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/random_feature_utils.py": {
        "sklearn": {
            "LogisticRegression_90": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "100000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Ridge_96": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "alpha": {
                    "value": "Lambda * n",
                    "type": "BinOp",
                    "possible_values": []
                },
                "fit_intercept": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Figure_4_and_table_1/cmnist.py": {
        "torch": {
            "stack_47": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[images, images]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "mlp.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "flags.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(env['images'])",
                            "Call"
                        ],
                        [
                            "mlp(images)",
                            "Call"
                        ],
                        [
                            "mlp(images)",
                            "Call"
                        ],
                        [
                            "mlp(env['images'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_64": {
                "variable": {
                    "value": "lin2",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "flags.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "flags.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_65": {
                "variable": {
                    "value": "lin3",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "flags.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "variable": {
                    "value": "self._main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "lin1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_82": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mlp(env['images'])",
                            "Call"
                        ],
                        [
                            "mlp(images)",
                            "Call"
                        ],
                        [
                            "mlp(images)",
                            "Call"
                        ],
                        [
                            "mlp(env['images'])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "grad ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "1234 + restart",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "lin1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "14 * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "flags.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "variable": {
                    "value": "lin1",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * 14 * 14",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "flags.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_91": {
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "flags.sd_coef * (sd + train_nll)",
                            "BinOp"
                        ],
                        [
                            "train_nll + flags.sd_coef * sd",
                            "BinOp"
                        ],
                        [
                            "train_nll.clone()",
                            "Call"
                        ],
                        [
                            "train_nll.clone()",
                            "Call"
                        ],
                        [
                            "loss / penalty_weight",
                            "BinOp"
                        ],
                        [
                            "mean_nll(logits * scale, y)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[scale]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['images'], envs[1]['images']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_143": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['labels'], envs[1]['labels']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_161": {
                "variable": {
                    "value": "images",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['images'], envs[1]['images']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['labels'], envs[1]['labels']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "range(len(images))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "train_nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['nll'], envs[1]['nll']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_179": {
                "variable": {
                    "value": "train_nll",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_180": {
                "variable": {
                    "value": "train_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['acc'], envs[1]['acc']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "train_acc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_181": {
                "variable": {
                    "value": "train_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[envs[0]['penalty'], envs[1]['penalty']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_181": {
                "variable": {
                    "value": "train_penalty",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_185": {
                "variable": {
                    "value": "weight_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_31": {
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_244": {
                "input": {
                    "value": "prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_245": {
                "input": {
                    "value": "1 - prob + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Figure_6/toy_fig_6.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((U.shape[0], 1)) * 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_44": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "3e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_70": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FT(np.zeros((U.shape[0], 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_71": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "FT(np.zeros((U.shape[0], 1)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SGD_91": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[theta]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mm_49": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FT(phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.radians(-30)",
                            "Call"
                        ],
                        [
                            "C * torch.mm(FT(y * phi).T, alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_74": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FT(phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.radians(-30)",
                            "Call"
                        ],
                        [
                            "C * torch.mm(FT(y * phi).T, alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_76": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.exp(-output * FT(y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_94": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "FT(phi)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.radians(-30)",
                            "Call"
                        ],
                        [
                            "C * torch.mm(FT(y * phi).T, alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_96": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.exp(-output * FT(y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "(U.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mm_48": {
                "input": {
                    "value": "FT(y * phi).T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.ones((U.shape[0], 1)) * 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_61": {
                "input": {
                    "value": "-F.relu(-alpha.data + 1.0) + 1.0 - 1e-50",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_78": {
                "input": {
                    "value": "theta.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.radians(-30)",
                            "Call"
                        ],
                        [
                            "C * torch.mm(FT(y * phi).T, alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ],
                        [
                            "torch.nn.Parameter(FT(np.zeros((U.shape[0], 1))))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_54": {
                "input": {
                    "value": "alpha.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.mm(K, alpha)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "-output * FT(y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_96": {
                "input": {
                    "value": "-output * FT(y)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_55": {
                "input": {
                    "value": "K",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "FT(np.dot(y * phi, (y * phi).T))",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.ones((U.shape[0], 1)) * 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_52": {
                "input": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.Parameter(torch.ones((U.shape[0], 1)) * 1e-08)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_53": {
                "input": {
                    "value": "1.0 - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "-alpha.data + 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/extractable_resnet.py": {
        "torch": {
            "Conv2d_30": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_95": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_144": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_147": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_148": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_156": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_157": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_187": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_201": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pooled_layer1, pooled_layer2, pooled_layer3, pooled_layer4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/loss.py": {
        "torch": {
            "zeros_36": {
                "variable": {
                    "value": "self.exp_avg_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_37": {
                "variable": {
                    "value": "self.exp_avg_initialized",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_44": {
                "variable": {
                    "value": "per_sample_losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1.0 + torch.exp(-yhat[:, 0] * (2.0 * y - 1.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "self.processed_data_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "variable": {
                    "value": "self.update_data_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "self.update_batch_counts",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "variable": {
                    "value": "self.avg_group_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "self.avg_group_acc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_27": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "adj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "self.adj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_83": {
                "input": {
                    "value": "self.adj > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_87": {
                "input": {
                    "value": "self.step_size * adjusted_loss.data",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cumsum_102": {
                "input": {
                    "value": "sorted_frac",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.group_frac[sorted_idx]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_44": {
                "input": {
                    "value": "-yhat[:, 0] * (2.0 * y - 1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_84": {
                "input": {
                    "value": "self.group_counts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "input": {
                    "value": "self.group_counts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_174": {
                "input": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_117": {
                "start": {
                    "value": "self.n_groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_117": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_47": {
                "input": {
                    "value": "yhat[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "where_63": {
                "condition": {
                    "value": "y == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sqrt_213": {
                "input": {
                    "value": "self.group_counts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_70": {
                "condition": {
                    "value": "y == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_71": {
                "condition": {
                    "value": "y == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/run_expt.py": {
        "torch": {
            "load_131": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.log_dir, 'last_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_196": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "MarginRankingLoss_191": {
                "variable": {
                    "value": "torch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "Linear_150": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "train_data.input_size()[0]",
                            "Subscript"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ],
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "Table_2/train.py": {
        "torch": {
            "set_grad_enabled_35": {
                "mode": {
                    "value": "is_training",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_142": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "AdamW(optimizer_grouped_parameters, lr=args.lr, eps=args.adam_epsilon)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "torch.optim.SGD(filter(lambda p: p.requires_grad, model.parameters()), lr=args.lr, momentum=0.9, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "min_lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_210": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.log_dir, '%d_model.pth' % epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.log_dir, 'last_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_223": {
                "obj": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.log_dir, 'best_model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_228": {
                "input": {
                    "value": "train_loss_computer.group_counts",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__59": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/utils.py": {
        "torch": {
            "is_available_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_113": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_112": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/variable_width_resnet.py": {
        "torch": {
            "Conv2d_16": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_134": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_135": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_143": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8 * width * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "flatten_200": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_185": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "Table_2/write_pretrained_features.py": {
        "torch": {
            "load_60": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_70": {
                "mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}