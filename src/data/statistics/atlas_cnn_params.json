{
    "main_code/code/main.py": {
        "sklearn": {},
        "tensorflow": {
            "load_model_116": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "filepath": {
                    "value": "model_save_dir + fname_model",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main_code/code/modules.py": {
        "sklearn": {
            "auc_135": {
                "variable": {
                    "value": "auc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "EarlyStopping_61": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "patience": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_62": {
                "filepath": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "main_code/jpt_notebooks/.ipynb_checkpoints/main-checkpoint.py": {
        "sklearn": {},
        "tensorflow": {}
    },
    "main_code/jpt_notebooks/.ipynb_checkpoints/modules-checkpoint.py": {
        "sklearn": {
            "auc_115": {
                "variable": {
                    "value": "auc_val",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fpr",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "tpr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "EarlyStopping_59": {
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "min_delta": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "patience": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_60": {
                "filepath": {
                    "value": "model_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "save_best_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "monitor": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "main_code/code/models.py": {
        "tensorflow": {
            "Input_21": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Model_153": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(1, activation=model_dict['final_activation'])(h)",
                            "Call"
                        ],
                        [
                            "layers.Dense(1, activation='sigmoid')(h)",
                            "Call"
                        ],
                        [
                            "layers.Dense(1, activation='sigmoid')(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_154": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_par_dict['learn_rate']",
                            "Subscript"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "Flatten_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "model_dict['dense_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "activ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "str"
                        ]
                    ]
                }
            },
            "Dense_46": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "model_dict['final_activation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                },
                "strides": {
                    "value": "strd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "rate": {
                    "value": "model_dict['outer_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_147": {
                "lr": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_par_dict['learn_rate']",
                            "Subscript"
                        ],
                        [
                            "0.001",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.0005",
                            "float"
                        ],
                        [
                            "0.001",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2D_34": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                },
                "strides": {
                    "value": "strd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPooling2D_35": {
                "pool_size": {
                    "value": "model_dict['pool_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "rate": {
                    "value": "model_dict['inner_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Input_88": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Input_103": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dense_100": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_109": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Input_118": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_131": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_133": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_134": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_137": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_124": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2D_125": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2D_126": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2D_127": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "MaxPooling2D_128": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "main_code/code/old_models_3.py": {
        "tensorflow": {
            "Input_21": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Model_178": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ],
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(1, activation=model_dict['final_activation'])(h)",
                            "Call"
                        ],
                        [
                            "layers.Dense(1, activation='sigmoid')(h)",
                            "Call"
                        ],
                        [
                            "layers.Dense(1, activation='sigmoid')(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_179": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_par_dict['learn_rate']",
                            "Subscript"
                        ],
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "Flatten_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "model_dict['dense_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "activation": {
                    "value": "activ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'relu'",
                            "str"
                        ]
                    ]
                }
            },
            "Dense_46": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "model_dict['final_activation']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Conv2D_33": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                },
                "strides": {
                    "value": "strd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Dropout_41": {
                "rate": {
                    "value": "model_dict['outer_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_172": {
                "lr": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model_par_dict['learn_rate']",
                            "Subscript"
                        ],
                        [
                            "0.0001",
                            "float"
                        ],
                        [
                            "0.0001",
                            "float"
                        ]
                    ]
                }
            },
            "Conv2D_34": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                },
                "strides": {
                    "value": "strd",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPooling2D_35": {
                "pool_size": {
                    "value": "model_dict['pool_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "rate": {
                    "value": "model_dict['inner_dropout']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Input_113": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Input_135": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_128": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_129": {
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Dense_132": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Input_141": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Conv2D_119": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2D_120": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2D_121": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "Conv2D_122": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "MaxPooling2D_123": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Input_149": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dense_161": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "main_code/code/resnet18.py": {
        "tensorflow": {
            "add_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, input_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, shortcut]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_160": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_input",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters1, (1, 1), name=conv_name_base + '2a')(input_tensor)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters2, kernel_size, padding='same', name=conv_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "layers.add([x, input_tensor])",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters1, (1, 1), strides=strides, name=conv_name_base + '2a')(input_tensor)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters2, kernel_size, padding='same', name=conv_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "layers.add([x, shortcut])",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((3, 3))(img_input)",
                            "Call"
                        ],
                        [
                            "Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name='bn_conv1')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D((3, 3), strides=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [128, 128, 512], stage=3, block='a', strides=(2, 2))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [256, 256, 1024], stage=4, block='a', strides=(2, 2))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [512, 512, 2048], stage=5, block='a', strides=(2, 2))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [512, 512, 2048], stage=5, block='b')",
                            "Call"
                        ],
                        [
                            "AveragePooling2D((1, 1), name='avg_pool')(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation='softmax', name='fc1000')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "resnet50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_data_format_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_code/code/resnet50.py": {
        "tensorflow": {
            "add_38": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, input_tensor]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "[x, shortcut]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Model_168": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img_input",
                            "variable"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Conv2D(filters1, (1, 1), name=conv_name_base + '2a')(input_tensor)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters2, kernel_size, padding='same', name=conv_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "layers.add([x, input_tensor])",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters1, (1, 1), strides=strides, name=conv_name_base + '2a')(input_tensor)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2a')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters2, kernel_size, padding='same', name=conv_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2b')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "Conv2D(filters3, (1, 1), name=conv_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name=bn_name_base + '2c')(x)",
                            "Call"
                        ],
                        [
                            "layers.add([x, shortcut])",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "ZeroPadding2D((3, 3))(img_input)",
                            "Call"
                        ],
                        [
                            "Conv2D(64, (7, 7), strides=(2, 2), name='conv1')(x)",
                            "Call"
                        ],
                        [
                            "BatchNormalization(axis=bn_axis, name='bn_conv1')(x)",
                            "Call"
                        ],
                        [
                            "Activation('relu')(x)",
                            "Call"
                        ],
                        [
                            "MaxPooling2D((3, 3), strides=(2, 2))(x)",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [64, 64, 256], stage=2, block='a', strides=(1, 1))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [64, 64, 256], stage=2, block='b')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [64, 64, 256], stage=2, block='c')",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [128, 128, 512], stage=3, block='a', strides=(2, 2))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [128, 128, 512], stage=3, block='b')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [128, 128, 512], stage=3, block='c')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [128, 128, 512], stage=3, block='d')",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [256, 256, 1024], stage=4, block='a', strides=(2, 2))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [256, 256, 1024], stage=4, block='b')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [256, 256, 1024], stage=4, block='c')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [256, 256, 1024], stage=4, block='d')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [256, 256, 1024], stage=4, block='e')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [256, 256, 1024], stage=4, block='f')",
                            "Call"
                        ],
                        [
                            "conv_block(x, 3, [512, 512, 2048], stage=5, block='a', strides=(2, 2))",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [512, 512, 2048], stage=5, block='b')",
                            "Call"
                        ],
                        [
                            "identity_block(x, 3, [512, 512, 2048], stage=5, block='c')",
                            "Call"
                        ],
                        [
                            "AveragePooling2D((1, 1), name='avg_pool')(x)",
                            "Call"
                        ],
                        [
                            "Flatten()(x)",
                            "Call"
                        ],
                        [
                            "Dense(classes, activation='softmax', name='fc1000')(x)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "resnet50",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_data_format_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "image_data_format_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "main_code/jpt_notebooks/.ipynb_checkpoints/models-checkpoint.py": {
        "tensorflow": {
            "Input_26": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['input_shape']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Model_48": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Input(shape=shape)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layers.Dense(1, activation='sigmoid')(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "learn_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['optimizer']['lr']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Flatten_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_42": {
                "units": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Dense_46": {
                "units": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "sigmoid",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_36": {
                "filters": {
                    "value": "conv_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_sizes",
                            "variable"
                        ]
                    ]
                }
            },
            "MaxPooling2D_37": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dropout_38": {
                "rate": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config_dict['model']['dropout']",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}