{
    "semb/evaluations/centrality_correlation.py": {
        "sklearn": {
            "pairwise_distances_15": {
                "variable": {
                    "value": "pairwise_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "X": {
                    "value": "np_emb_sorted_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(list_emb_sorted_id)",
                            "Call"
                        ]
                    ]
                },
                "metric": {
                    "value": "metric",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "semb/evaluations/classification.py": {
        "sklearn": {
            "LabelBinarizer_20": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "roc_auc_score_23": {
                "y_true": {
                    "value": "truth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lb.transform(truth)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "average": {
                    "value": "average",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'micro'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LogisticRegression_75": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "solver": {
                    "value": "lbfgs",
                    "type": "Constant",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "multinomial",
                    "type": "Constant",
                    "possible_values": []
                },
                "penalty": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "OneVsRestClassifier_77": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "svm.LinearSVC(penalty='l2', C=1.0, multi_class='ovr')",
                    "type": "Call",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "KNeighborsClassifier_84": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "metric": {
                    "value": "euclidean",
                    "type": "Constant",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "accuracy_score_92": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "f1_score_93": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "micro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "f1_score_94": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "clf.predict(X_test)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LinearSVC_78": {
                "penalty": {
                    "value": "l2",
                    "type": "Constant",
                    "possible_values": []
                },
                "C": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "multi_class": {
                    "value": "ovr",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "semb/evaluations/clustering.py": {
        "sklearn": {
            "contingency_matrix_14": {
                "variable": {
                    "value": "contingency_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "KMeans_22": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_init": {
                    "value": "min(len(y), 1000)",
                    "type": "Call",
                    "possible_values": []
                },
                "init": {
                    "value": "k-means++",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalized_mutual_info_score_23": {
                "labels_true": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "list()",
                            "Call"
                        ],
                        [
                            "y + [dict_labels[cur_node]]",
                            "BinOp"
                        ],
                        [
                            "np.array(y)",
                            "Call"
                        ]
                    ]
                },
                "labels_pred": {
                    "value": "kmeans.labels_",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/gae/gae/train.py": {
        "sklearn": {
            "roc_auc_score_154": {
                "variable": {
                    "value": "roc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_155": {
                "variable": {
                    "value": "ap_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Session_123": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sparse_placeholder_84": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_85": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_86": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_87": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_107": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_124": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/gae/method.py": {
        "sklearn": {
            "roc_auc_score_147": {
                "variable": {
                    "value": "roc_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_148": {
                "variable": {
                    "value": "ap_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([np.ones(len(preds)), np.zeros(len(preds_neg))])",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "preds_all",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.hstack([preds, preds_neg])",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "Session_117": {
                "variable": {
                    "value": "sess",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "f",
                    "type": "Constant",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sparse_placeholder_77": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_78": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sparse_placeholder_79": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_with_default_80": {
                "input": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "optimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "global_variables_initializer_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_104": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_110": {
                "tensor": {
                    "value": "tf.sparse_tensor_to_dense(placeholders['adj_orig'], validate_indices=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/graphwave/internal/graphwave.py": {
        "sklearn": {}
    },
    "semb/methods/multilens/main.py": {
        "sklearn": {}
    },
    "semb/methods/role2vec/motif_count.py": {
        "sklearn": {
            "NMF_117": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.params['factors']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "init": {
                    "value": "random",
                    "type": "Constant",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "alpha": {
                    "value": "self.params['beta']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "KMeans_119": {
                "variable": {
                    "value": "kmeans",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "self.params['clusters']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.params['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/drne/eni.py": {
        "tensorflow": {
            "Saver_90": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_25": {
                "variable": {
                    "value": "self.nodes_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "nodes_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_26": {
                "variable": {
                    "value": "self.seqlen_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "seqlen_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_27": {
                "variable": {
                    "value": "self.neighborhood_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.params['sampling_size'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "neighborhood_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "placeholder_28": {
                "variable": {
                    "value": "self.label_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "label_placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_33": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[len(self.graph), self.params['embedding_size']]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(utils.init_embedding(self.degree, self.degree_max, self.params['embedding_size']))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DropoutWrapper_38": {
                "variable": {
                    "value": "cell",
                    "type": "Variable",
                    "possible_values": []
                },
                "cell": {
                    "value": "tf.contrib.rnn.LayerNormBasicLSTMCell(num_units=self.params['embedding_size'], layer_norm=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "input_keep_prob": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "output_keep_prob": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dynamic_rnn_42": {
                "variable": {
                    "value": "(_, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.DropoutWrapper(tf.contrib.rnn.LayerNormBasicLSTMCell(num_units=self.params['embedding_size'], layer_norm=False), input_keep_prob=1.0, output_keep_prob=1.0)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.nn.embedding_lookup(self.embeddings, self.neighborhood_placeholder)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sequence_length": {
                    "value": "self.seqlen_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_50": {
                "variable": {
                    "value": "self.predict_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.layers.dense(self.lstm_output, units=1, activation=utils.selu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_54": {
                "variable": {
                    "value": "self.structure_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tf.nn.embedding_lookup(self.embeddings, self.nodes_placeholder)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self.lstm_output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "self.guilded_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(tf.subtract(self.predict_info, self.label_placeholder))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_squared_error_56": {
                "variable": {
                    "value": "self.orth_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y_true": {
                    "value": "tf.matmul(self.embeddings, self.embeddings, transpose_a=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "tf.eye(self.params['embedding_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_61": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.params['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_62": {
                "variable": {
                    "value": "tvars",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_63": {
                "variable": {
                    "value": "(grads, self.global_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "tf.gradients(self.total_loss, tvars)",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "self.params['grad_clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "FileWriter_80": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "log_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(self.params['save_path'], 'logs')",
                            "Call"
                        ]
                    ]
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "merge_all_88": {
                "variable": {
                    "value": "self.merged_summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_24": {
                "name_or_scope": {
                    "value": "Placeholder",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_32": {
                "name_or_scope": {
                    "value": "Embeddings",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_37": {
                "name_or_scope": {
                    "value": "LSTM",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "Guilded",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "Loss",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_59": {
                "name_or_scope": {
                    "value": "Optimizer",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_66": {
                "name_or_scope": {
                    "value": "Summary",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "orth_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.orth_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "guilded_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.guilded_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_69": {
                "name": {
                    "value": "structure_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.structure_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_70": {
                "name": {
                    "value": "total_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_71": {
                "name": {
                    "value": "globol_norm",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "self.global_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "embedding_lookup_44": {
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.neighborhood_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_50": {
                "inputs": {
                    "value": "self.lstm_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "activation": {
                    "value": "utils.selu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_lookup_54": {
                "params": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ids": {
                    "value": "self.nodes_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_55": {
                "x": {
                    "value": "tf.subtract(self.predict_info, self.label_placeholder)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_56": {
                "num_rows": {
                    "value": "self.params['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_63": {
                "ys": {
                    "value": "self.total_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "tvars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_35": {
                "value": {
                    "value": "utils.init_embedding(self.degree, self.degree_max, self.params['embedding_size'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_55": {
                "x": {
                    "value": "self.predict_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.label_placeholder",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "histogram_74": {
                "name": {
                    "value": "'grad/{}'.format(var.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "histogram_75": {
                "name": {
                    "value": "'weight/{}'.format(var.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/drne/method.py": {
        "tensorflow": {
            "ConfigProto_59": {
                "variable": {
                    "value": "config",
                    "type": "Variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_61": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_61": {
                "device_name": {
                    "value": "self.params['train_device']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/drne/network.py": {
        "tensorflow": {}
    },
    "semb/methods/drne/utils.py": {
        "tensorflow": {
            "elu_73": {
                "features": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.6732632423543772",
                            "Constant"
                        ]
                    ]
                }
            },
            "gather_nd_77": {
                "params": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(os.path.join(data_dir, 'val.npy'))",
                            "Call"
                        ],
                        [
                            "X[ind]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "[[[i, j] for j in l] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "gather_nd_79": {
                "params": {
                    "value": "X",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.load(os.path.join(data_dir, 'val.npy'))",
                            "Call"
                        ],
                        [
                            "X[ind]",
                            "Subscript"
                        ]
                    ]
                },
                "indices": {
                    "value": "[[i, l] for i in range(batch_size)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/gae/gae/initializations.py": {
        "tensorflow": {
            "Variable_11": {
                "initial_value": {
                    "value": "initial",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.random_uniform([input_dim, output_dim], minval=-init_range, maxval=init_range, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "semb/methods/gae/gae/layers.py": {
        "tensorflow": {
            "cast_28": {
                "variable": {
                    "value": "dropout_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.floor(random_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_79": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.vars['weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dropout_115": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - self.dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_117": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(inputs, 1 - self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.nn.dropout(x, 1 - self.dropout)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "dropout_sparse(x, 1 - self.dropout, self.features_nonzero)",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(x, self.vars['weights'])",
                            "Call"
                        ],
                        [
                            "tf.sparse_tensor_dense_matmul(self.adj, x)",
                            "Call"
                        ],
                        [
                            "tf.transpose(inputs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(inputs, x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_28": {
                "x": {
                    "value": "random_tensor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keep_prob",
                            "Name"
                        ],
                        [
                            "random_tensor + tf.random_uniform(noise_shape)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_71": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_90": {
                "name_or_scope": {
                    "value": "self.name + '_vars'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/gae/gae/model.py": {
        "tensorflow": {
            "get_collection_33": {
                "variable": {
                    "value": "variables",
                    "type": "Variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.GLOBAL_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_31": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_112": {
                "x": {
                    "value": "self.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "semb/methods/gae/gae/optimizer.py": {
        "tensorflow": {
            "AdamOptimizer_13": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_18": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_20": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_29": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "FLAGS.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_40": {
                "variable": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.cast(tf.greater_equal(tf.sigmoid(preds_sub), 0.5), tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(labels_sub, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(self.correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_12": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_18": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_20": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_28": {
                "input_tensor": {
                    "value": "tf.nn.weighted_cross_entropy_with_logits(logits=preds_sub, targets=labels_sub, pos_weight=pos_weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_33": {
                "input_tensor": {
                    "value": "tf.reduce_sum(1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std)), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_40": {
                "x": {
                    "value": "tf.greater_equal(tf.sigmoid(preds_sub), 0.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_41": {
                "x": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_42": {
                "x": {
                    "value": "self.correct_prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_12": {
                "logits": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "greater_equal_18": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "weighted_cross_entropy_with_logits_28": {
                "logits": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                },
                "targets": {
                    "value": "labels_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels",
                            "Name"
                        ],
                        [
                            "labels",
                            "Name"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "pos_weight",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "input_tensor": {
                    "value": "1 + 2 * model.z_log_std - tf.square(model.z_mean) - tf.square(tf.exp(model.z_log_std))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_40": {
                "x": {
                    "value": "tf.sigmoid(preds_sub)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_18": {
                "x": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_40": {
                "x": {
                    "value": "preds_sub",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "preds",
                            "Name"
                        ],
                        [
                            "preds",
                            "Name"
                        ]
                    ]
                }
            },
            "square_34": {
                "x": {
                    "value": "tf.exp(model.z_log_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_33": {
                "x": {
                    "value": "model.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_34": {
                "x": {
                    "value": "model.z_log_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}