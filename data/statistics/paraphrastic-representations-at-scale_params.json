{
    "main.py": {
        "torch": {
            "manual_seed_12": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "load_17": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_file",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_19": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MarginRankingLoss_78": {
                "variable": {
                    "value": "self.sim_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "margin": {
                    "value": "self.delta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CosineSimilarity_79": {
                "variable": {
                    "value": "self.cosine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Embedding_81": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_135": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "g1g2.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_210": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_259": {
                "variable": {
                    "value": "self.e_hidden_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_260": {
                "variable": {
                    "value": "self.e_cell_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.args.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_266": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_273": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad, self.parameters)",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_284": {
                "variable": {
                    "value": "(lens, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np_lens).float().long()",
                            "Call"
                        ],
                        [
                            "lengths.cuda()",
                            "Call"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ],
                        [
                            "lengths",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sort_302": {
                "variable": {
                    "value": "(_, _indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sort(lengths, 0, True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_83": {
                "variable": {
                    "value": "self.embedding_fr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(self.vocab_fr)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.args.dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_244": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fr(idxs)",
                            "Call"
                        ],
                        [
                            "self.embedding(idxs)",
                            "Call"
                        ],
                        [
                            "F.dropout(word_embs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "utils.max_pool(word_embs, lengths, self.args.gpu)",
                            "Call"
                        ],
                        [
                            "utils.mean_pool(word_embs, lengths, self.args.gpu)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "LSTM_269": {
                "variable": {
                    "value": "self.lstm_fr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.args.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "{'state_dict': self.state_dict(), 'vocab': self.vocab, 'vocab_fr': self.vocab_fr, 'args': self.args, 'optimizer': self.optimizer.state_dict(), 'epoch': epoch}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}_{1}.pt'.format(self.args.outfile, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_99": {
                "obj": {
                    "value": "{'state_dict': self.state_dict(), 'vocab': self.vocab, 'vocab_fr': self.vocab_fr, 'args': self.args, 'optimizer': self.optimizer.state_dict(), 'epoch': epoch, 'counter': counter}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{0}_{1}_{2}.pt'.format(self.args.outfile, epoch, counter)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_121": {
                "ndarray": {
                    "value": "np_sents",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_len, max_len), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "np_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros((batch_len,), dtype='int32')",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_293": {
                "variable": {
                    "value": "in_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fr(inputs)",
                            "Call"
                        ],
                        [
                            "self.embedding(inputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(in_embs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(in_embs, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_298": {
                "variable": {
                    "value": "in_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_embs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding_fr(inputs)",
                            "Call"
                        ],
                        [
                            "self.embedding(inputs)",
                            "Call"
                        ],
                        [
                            "F.dropout(in_embs, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "F.dropout(in_embs, p=self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clip_grad_norm__185": {
                "parameters": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.grad_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "pairing.py": {
        "torch": {
            "cat_9": {
                "variable": {
                    "value": "all_g1_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "g1_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g1_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_10": {
                "variable": {
                    "value": "all_g2_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "g2_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g2_lengths",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_19": {
                "variable": {
                    "value": "v_g1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_g1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(v_g1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_20": {
                "variable": {
                    "value": "v_g2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "v_g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(v_g2)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n1, torch.max(all_g2_lengths).item())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "p1_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_g2_lengths.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(n2, torch.max(all_g1_lengths).item())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "p2_lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "all_g1_lengths.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_37": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.cosine(v, v_g2)",
                            "Call"
                        ],
                        [
                            "model.cosine(v, v_g1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_51": {
                "variable": {
                    "value": "(_, idx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.cosine(v, v_g2)",
                            "Call"
                        ],
                        [
                            "model.cosine(v, v_g1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_23": {
                "input": {
                    "value": "all_g2_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(g2_lengths)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_27": {
                "input": {
                    "value": "all_g1_lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(g1_lengths)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "mean_118": {
                "variable": {
                    "value": "out[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[i][0:lengths[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_110": {
                "input": {
                    "value": "x[i][0:lengths[i]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}