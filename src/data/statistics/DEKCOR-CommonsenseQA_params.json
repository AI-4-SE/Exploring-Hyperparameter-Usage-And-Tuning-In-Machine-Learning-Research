{
    "model/layers.py": {
        "torch": {
            "Dropout_14": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "final_dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "opt['final_pred_dropout_prob']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "out_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config.hidden_size",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "model/loss.py": {
        "torch": {
            "log_softmax_17": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logit.view(-1, logit.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_17": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_18": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_18": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_97": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(input, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.softmax(target, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "logaddexp_179": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.log_softmax(target.detach(), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "F.log_softmax(input.detach(), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_198": {
                "variable": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_199": {
                "variable": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mse_loss_200": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "si",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32).sqrt_()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(input.detach(), dim=-1, dtype=torch.float32).sqrt_()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_255": {
                "variable": {
                    "value": "mlm_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mlm_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlm_p.view(-1, mlm_p.size(-1))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "mlm_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mlm_y.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_256": {
                "variable": {
                    "value": "nsp_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nsp_p",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.log_softmax(target, 1).exp()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_49": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(input, target, reduce=False, ignore_index=ignore_index) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_51": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_63": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(input, target, reduce=False, ignore_index=ignore_index) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_65": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_79": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.mse_loss(input.squeeze(), target, reduce=False) * weight.reshape((target.shape[0], 1))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mse_loss_82": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_215": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(input, target, reduce=False, ignore_index=ignore_index) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_217": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_236": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(start_input, start_target, reduce=False, ignore_index=ignore_index) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_237": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.cross_entropy(end_input, end_target, reduce=False, ignore_index=ignore_index) * weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_239": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "start_input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "start_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_240": {
                "variable": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "end_input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "end_target",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_97": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_97": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_128": {
                "input": {
                    "value": "F.log_softmax(input, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.log_softmax(target.detach(), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ]
                    ]
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "kl_div_129": {
                "input": {
                    "value": "F.log_softmax(target, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "F.log_softmax(input.detach(), dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ]
                    ]
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "input": {
                    "value": "target.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_163": {
                "input": {
                    "value": "F.log_softmax(input, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32) + F.softmax(input.detach(), dim=-1, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * m",
                            "BinOp"
                        ],
                        [
                            "torch.logaddexp(F.log_softmax(target.detach(), dim=-1, dtype=torch.float32), F.log_softmax(input.detach(), dim=-1, dtype=torch.float32))",
                            "Call"
                        ],
                        [
                            "m - math.log(2)",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "kl_div_164": {
                "input": {
                    "value": "F.log_softmax(target, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32) + F.softmax(input.detach(), dim=-1, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * m",
                            "BinOp"
                        ],
                        [
                            "torch.logaddexp(F.log_softmax(target.detach(), dim=-1, dtype=torch.float32), F.log_softmax(input.detach(), dim=-1, dtype=torch.float32))",
                            "Call"
                        ],
                        [
                            "m - math.log(2)",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_179": {
                "input": {
                    "value": "target.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_180": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_182": {
                "input": {
                    "value": "F.log_softmax(input, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32) + F.softmax(input.detach(), dim=-1, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * m",
                            "BinOp"
                        ],
                        [
                            "torch.logaddexp(F.log_softmax(target.detach(), dim=-1, dtype=torch.float32), F.log_softmax(input.detach(), dim=-1, dtype=torch.float32))",
                            "Call"
                        ],
                        [
                            "m - math.log(2)",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ]
                    ]
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "kl_div_183": {
                "input": {
                    "value": "F.log_softmax(target, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32) + F.softmax(input.detach(), dim=-1, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * m",
                            "BinOp"
                        ],
                        [
                            "torch.logaddexp(F.log_softmax(target.detach(), dim=-1, dtype=torch.float32), F.log_softmax(input.detach(), dim=-1, dtype=torch.float32))",
                            "Call"
                        ],
                        [
                            "m - math.log(2)",
                            "BinOp"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ],
                        [
                            "'batchmean'",
                            "Method Argument"
                        ]
                    ]
                },
                "log_target": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_128": {
                "input": {
                    "value": "target.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_129": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_163": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_164": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_182": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_183": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_49": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_63": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mse_loss_79": {
                "input": {
                    "value": "input.squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_215": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.float()",
                            "Call"
                        ],
                        [
                            "input.view(-1, pairwise_size)",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1)",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.float()",
                            "Call"
                        ],
                        [
                            "target.contiguous().view(-1, pairwise_size)[:, 0]",
                            "Subscript"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_236": {
                "input": {
                    "value": "start_input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "start_target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cross_entropy_237": {
                "input": {
                    "value": "end_input",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "end_target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model/model.py": {
        "torch": {
            "ModuleDict_57": {
                "variable": {
                    "value": "self.scorer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "scorer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                }
            },
            "cross_entropy_157": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clf_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_mask * VERY_NEGATIVE_NUMBER + logits",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "label_to_use.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(clf_logits, label_to_use.view(-1), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss + self.my_config['adv_alpha'] * adv_loss",
                            "BinOp"
                        ],
                        [
                            "loss + self.my_config['adv_alpha'] * adv_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_159": {
                "variable": {
                    "value": "adv_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(clf_logits, label_to_use.view(-1), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss + self.my_config['adv_alpha'] * adv_loss",
                            "BinOp"
                        ],
                        [
                            "loss + self.my_config['adv_alpha'] * adv_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_173": {
                "variable": {
                    "value": "predicts",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clf_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "choice_mask * VERY_NEGATIVE_NUMBER + logits",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "it",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(clf_logits, label_to_use.view(-1), reduction='none')",
                            "Call"
                        ],
                        [
                            "loss + self.my_config['adv_alpha'] * adv_loss",
                            "BinOp"
                        ],
                        [
                            "loss + self.my_config['adv_alpha'] * adv_loss",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "model/perturbation.py": {
        "torch": {
            "grad_74": {
                "variable": {
                    "value": "(delta_grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "stable_kl(adv_logits, logits.detach(), reduce=False)",
                            "Call"
                        ],
                        [
                            "adv_lc(logits, adv_logits, ignore_index=-1, reduction='none')",
                            "Call"
                        ],
                        [
                            "adv_loss.sum(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed.data.new(embed.size()).normal_(0, 1) * epsilon",
                            "BinOp"
                        ],
                        [
                            "generate_noise(embed, attention_mask, epsilon=self.noise_var)",
                            "Call"
                        ],
                        [
                            "self._norm_grad(delta_grad, eff_grad=eff_delta_grad, sentence_level=self.norm_level)",
                            "Call"
                        ],
                        [
                            "noise.detach()",
                            "Call"
                        ]
                    ]
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "isnan_76": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta_grad.norm()",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_76": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta_grad.norm()",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_48": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "(-2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "norm_50": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "model/sift.py": {
        "torch": {
            "log_softmax_187": {
                "variable": {
                    "value": "logprob_stu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_stu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_188": {
                "variable": {
                    "value": "logprob_tea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_tea",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_200": {
                "variable": {
                    "value": "logprob_stu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_stu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.view(-1, logits.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "logits.view(-1, logits.size(-1)).float()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_201": {
                "variable": {
                    "value": "logprob_tea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logit_tea.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LayerNorm_19": {
                "variable": {
                    "value": "self.LayerNorm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ],
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "elementwise_affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_209": {
                "input": {
                    "value": "logit_stu.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "logit_tea.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_41": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.input.new(self.input.size()).normal_(0, self.init_perturbation).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-2 * self.init_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "2 * self.init_perturbation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_215": {
                "input": {
                    "value": "target.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_216": {
                "input": {
                    "value": "input.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "kl_div_218": {
                "input": {
                    "value": "F.log_softmax(input, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_modules",
                            "variable"
                        ],
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32) + F.softmax(input.detach(), dim=-1, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * m",
                            "BinOp"
                        ],
                        [
                            "self.adv_modules",
                            "Attribute"
                        ],
                        [
                            "self.adv_modules",
                            "Attribute"
                        ],
                        [
                            "self.adv_modules",
                            "Attribute"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "kl_div_219": {
                "input": {
                    "value": "F.log_softmax(target, dim=-1, dtype=torch.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_modules",
                            "variable"
                        ],
                        [
                            "F.softmax(target.detach(), dim=-1, dtype=torch.float32) + F.softmax(input.detach(), dim=-1, dtype=torch.float32)",
                            "BinOp"
                        ],
                        [
                            "0.5 * m",
                            "BinOp"
                        ],
                        [
                            "self.adv_modules",
                            "Attribute"
                        ],
                        [
                            "self.adv_modules",
                            "Attribute"
                        ],
                        [
                            "self.adv_modules",
                            "Attribute"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'none'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_softmax_218": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.view(-1, input.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_219": {
                "input": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.view(-1, target.size(-1)).float()",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isnan_48": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.norm()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "m.norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "isinf_48": {
                "input": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad.norm()",
                            "Call"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "m.norm",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "specific/io.py": {
        "torch": {}
    },
    "specific/tensor.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MCDataset(examples, tokenizer, max_seq_length, vary_segment_id, config, dev)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedResumableSampler(dataset, my_dist.get_world_size(), my_dist.get_rank(), shuffle, seed)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "total_batch_size // num_choices",
                            "BinOp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "drop_last",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "task.py": {
        "torch": {
            "device_37": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "self.config.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_351": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_352": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "random_states",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.load_training_dir, 'random_states.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_device_203": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_rng_state_85": {
                "new_state": {
                    "value": "random_states['torch']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_rng_state_86": {
                "new_state": {
                    "value": "random_states['torch.cuda']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_87": {
                "f": {
                    "value": "os.path.join(args.load_training_dir, f'dataloader_{self.config.local_rank}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "f": {
                    "value": "os.path.join(args.load_training_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'cuda:%d' % 0: 'cuda:%d' % self.config.local_rank}",
                            "Dict"
                        ]
                    ]
                }
            },
            "load_81": {
                "f": {
                    "value": "os.path.join(args.load_training_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "map_location",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'cuda:%d' % 0: 'cuda:%d' % self.config.local_rank}",
                            "Dict"
                        ]
                    ]
                }
            },
            "argmax_118": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.trainer._forward(batch, None, mode='dev', dataset_name=using_dataset_name, return_all=True)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_111": {
                "input": {
                    "value": "batch[-2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/__init__.py": {
        "torch": {
            "device_31": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "device_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cuda:' + str(gpu_ids[0])",
                            "BinOp"
                        ],
                        [
                            "'cpu'",
                            "str"
                        ]
                    ]
                }
            },
            "device_count_26": {
                "variable": {
                    "value": "n_gpu",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_88": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_90": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/base_trainer.py": {
        "torch": {
            "Adamax_83": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in params if _no_decay(n)], 'weight_decay': 0.0}, {'params': [p for (n, p) in params if not _no_decay(n)], 'weight_decay': weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_117": {
                "obj": {
                    "value": "random_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'random': random.getstate(), 'np': np.random.get_state(), 'torch': torch.get_rng_state(), 'torch.cuda': torch.cuda.get_rng_state()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'random_states.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_129": {
                "obj": {
                    "value": "dataloader.get_state()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, f'dataloader_{self.rank}.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_85": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for (n, p) in params if _no_decay(n)], 'weight_decay': 0.0}, {'params': [p for (n, p) in params if not _no_decay(n)], 'weight_decay': weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lr",
                            "Method Argument"
                        ]
                    ]
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_109": {
                "obj": {
                    "value": "self.optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_110": {
                "obj": {
                    "value": "self.scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_rng_state_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/gatherer.py": {
        "torch": {
            "cat_14": {
                "tensors": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[torch.zeros_like(tensor) for idx in range(self.world_size)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "masked_select_20": {
                "input": {
                    "value": "tensor_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gather_all(tensor)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "valid_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "valid_all",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_12": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/my_dist.py": {
        "torch": {}
    },
    "utils/resumable_sampler.py": {
        "torch": {
            "DistributedSampler_56": {
                "variable": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, 2, 3, 4, 5, 6, 7]",
                            "List"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "num_replicas": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "rank": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Generator_26": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randperm_28": {
                "variable": {
                    "value": "self.perm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "len(self.dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils/tensor.py": {
        "torch": {
            "tensor_95": {
                "variable": {
                    "value": "all_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.idx for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_96": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_97": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.input_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_98": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.segment_ids for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "variable": {
                    "value": "all_question_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.question_mask for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "variable": {
                    "value": "all_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[f.idx for f in fs] for fs in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "all_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[f.input_ids for f in fs] for fs in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_114": {
                "variable": {
                    "value": "all_input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[f.input_mask for f in fs] for fs in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "all_segment_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[f.segment_ids for f in fs] for fs in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "all_question_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[f.question_mask for f in fs] for fs in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "variable": {
                    "value": "all_pot_spans",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.pot_spans for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "variable": {
                    "value": "all_label_span",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[f.label_span for f in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/trainer.py": {
        "torch": {
            "SummaryWriter_41": {
                "variable": {
                    "value": "self.tb_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "output_model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_model_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GradScaler_38": {
                "variable": {
                    "value": "self.scaler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "autocast_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__124": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__129": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "current_device_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_memory_allocated_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}