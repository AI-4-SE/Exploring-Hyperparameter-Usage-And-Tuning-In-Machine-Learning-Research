{
    "RISCluster/models.py": {
        "sklearn": {
            "KMeans_377": {
                "variable": {
                    "value": "km",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "possible_values": [
                        [
                            "len(label_list)",
                            "Call"
                        ],
                        [
                            "config.n_clusters",
                            "Attribute"
                        ],
                        [
                            "hpkwargs.get('n_clusters')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "1000",
                    "possible_values": []
                },
                "n_init": {
                    "value": "100",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2009",
                    "possible_values": []
                }
            },
            "GaussianMixture_394": {
                "variable": {
                    "value": "GMM",
                    "possible_values": []
                },
                "n_components": {
                    "value": "n_clusters",
                    "possible_values": [
                        [
                            "len(label_list)",
                            "Call"
                        ],
                        [
                            "config.n_clusters",
                            "Attribute"
                        ],
                        [
                            "hpkwargs.get('n_clusters')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "1000",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "possible_values": []
                },
                "weights_init": {
                    "value": "gmm_weights",
                    "possible_values": [
                        [
                            "np.empty(len(labels))",
                            "Call"
                        ]
                    ]
                },
                "means_init": {
                    "value": "centroids",
                    "possible_values": [
                        [
                            "km.cluster_centers_",
                            "Attribute"
                        ],
                        [
                            "GMM.means_",
                            "Attribute"
                        ],
                        [
                            "np.load(os.path.join(path, 'centroids.npy'))",
                            "Call"
                        ],
                        [
                            "km.cluster_centers_",
                            "Attribute"
                        ],
                        [
                            "model.clustering.weights.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "KMeans_554": {
                "variable": {
                    "value": "km",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n_clusters",
                    "possible_values": [
                        [
                            "len(label_list)",
                            "Call"
                        ],
                        [
                            "config.n_clusters",
                            "Attribute"
                        ],
                        [
                            "hpkwargs.get('n_clusters')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "max_iter": {
                    "value": "1000",
                    "possible_values": []
                },
                "n_init": {
                    "value": "100",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2009",
                    "possible_values": []
                }
            },
            "silhouette_samples_1281": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "X": {
                    "value": "x_",
                    "possible_values": [
                        [
                            "x[:, :, ::int(RF), ::int(RF)].squeeze()",
                            "Call"
                        ],
                        [
                            "np.reshape(x_, (-1, n * o))",
                            "Call"
                        ],
                        [
                            "np.reshape(x_, (-1, n, o))",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "np.argmax(q_array.data, axis=1)",
                            "Call"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "GMM.fit_predict(z_array)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(path, 'labels.npy'))[config.index_tra]",
                            "Subscript"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "np.argmax(q_array.data, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "chunksize": {
                    "value": "20000",
                    "possible_values": []
                }
            },
            "TSNE_1326": {
                "variable": {
                    "value": "results",
                    "possible_values": []
                },
                "n_components": {
                    "value": "2",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "int(M / 100)",
                    "possible_values": []
                },
                "early_exaggeration": {
                    "value": "20",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "int(M / 12)",
                    "possible_values": []
                },
                "n_iter": {
                    "value": "2000",
                    "possible_values": []
                },
                "verbose": {
                    "value": "0",
                    "possible_values": []
                },
                "random_state": {
                    "value": "2009",
                    "possible_values": []
                }
            },
            "silhouette_samples_285": {
                "variable": {
                    "value": "silh_scores_Z",
                    "possible_values": []
                },
                "X": {
                    "value": "z",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "np.argmax(q_array.data, axis=1)",
                            "Call"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "GMM.fit_predict(z_array)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(path, 'labels.npy'))[config.index_tra]",
                            "Subscript"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "np.argmax(q_array.data, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "chunksize": {
                    "value": "20000",
                    "possible_values": []
                }
            },
            "silhouette_samples_288": {
                "variable": {
                    "value": "silh_scores_Z",
                    "possible_values": []
                },
                "X": {
                    "value": "z",
                    "possible_values": []
                },
                "labels": {
                    "value": "labels",
                    "possible_values": [
                        [
                            "np.argmax(q_array.data, axis=1)",
                            "Call"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "GMM.fit_predict(z_array)",
                            "Call"
                        ],
                        [
                            "np.load(os.path.join(path, 'labels.npy'))[config.index_tra]",
                            "Subscript"
                        ],
                        [
                            "km.labels_",
                            "Attribute"
                        ],
                        [
                            "np.argmax(q_array.data, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_kernel_313": {
                "variable": {
                    "value": "X_ip",
                    "possible_values": []
                },
                "X": {
                    "value": "x_j",
                    "possible_values": [
                        [
                            "np.reshape(x[labels == j], (-1, 8700))",
                            "Call"
                        ]
                    ]
                },
                "Y": {
                    "value": "x_mean[0].reshape(1, -1)",
                    "possible_values": []
                }
            },
            "mean_squared_error_316": {
                "variable": {
                    "value": "X_MSE[j]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "x_mean",
                    "possible_values": [
                        [
                            "np.mean(x_j, axis=0).reshape((1, -1))",
                            "Call"
                        ],
                        [
                            "np.matlib.repmat(x_mean, M[j], 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "x_j",
                    "possible_values": [
                        [
                            "np.reshape(x[labels == j], (-1, 8700))",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "raw_values",
                    "possible_values": []
                }
            },
            "mean_absolute_error_319": {
                "variable": {
                    "value": "X_MAE[j]",
                    "possible_values": []
                },
                "y_true": {
                    "value": "x_mean",
                    "possible_values": [
                        [
                            "np.mean(x_j, axis=0).reshape((1, -1))",
                            "Call"
                        ],
                        [
                            "np.matlib.repmat(x_mean, M[j], 1)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "x_j",
                    "possible_values": [
                        [
                            "np.reshape(x[labels == j], (-1, 8700))",
                            "Call"
                        ]
                    ]
                },
                "multioutput": {
                    "value": "raw_values",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "SummaryWriter_1223": {
                "variable": {
                    "value": "tb",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "config.savepath_run",
                    "possible_values": []
                }
            },
            "zeros_204": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(metrics),)",
                    "possible_values": []
                }
            },
            "is_available_284": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "SummaryWriter_977": {
                "variable": {
                    "value": "tb",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "savepath_run",
                    "possible_values": [
                        [
                            "config.savepath_run",
                            "Attribute"
                        ],
                        [
                            "config.savepath_run",
                            "Attribute"
                        ]
                    ]
                }
            },
            "from_numpy_992": {
                "variable": {
                    "value": "cluster_weights",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "centroids",
                    "possible_values": [
                        [
                            "km.cluster_centers_",
                            "Attribute"
                        ],
                        [
                            "GMM.means_",
                            "Attribute"
                        ],
                        [
                            "np.load(os.path.join(path, 'centroids.npy'))",
                            "Call"
                        ],
                        [
                            "km.cluster_centers_",
                            "Attribute"
                        ],
                        [
                            "model.clustering.weights.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_1282": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "load_594": {
                "f": {
                    "value": "config.saved_weights",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "config.device",
                            "Attribute"
                        ],
                        [
                            "config.device",
                            "Attribute"
                        ],
                        [
                            "config.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "save_995": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savepath_run, 'DEC_Params_Initial.pt')",
                    "possible_values": []
                }
            },
            "save_1214": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "possible_values": [
                        [
                            "os.path.join(savepath_run, 'AEC_Params_Final.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savepath_run, 'DEC_Params_Final.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_145": {
                "mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_205": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_911": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "fname",
                    "possible_values": [
                        [
                            "os.path.join(savepath_run, 'AEC_Params_Final.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(savepath_run, 'DEC_Params_Final.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_964": {
                "f": {
                    "value": "config.saved_weights",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "possible_values": [
                        [
                            "config.device",
                            "Attribute"
                        ],
                        [
                            "config.device",
                            "Attribute"
                        ],
                        [
                            "config.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "no_grad_993": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_1100": {
                "variable": {
                    "value": "tar_dist",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "tar_dist",
                    "possible_values": [
                        [
                            "p[running_size:running_size + x.size(0), :]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(tar_dist).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_864": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savepath_chkpnt, f'AEC_Params_{epoch + 1:03d}.pt')",
                    "possible_values": []
                }
            },
            "save_849": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(savepath_chkpnt, 'AEC_Best_Weights.pt')",
                    "possible_values": []
                }
            },
            "set_grad_enabled_1107": {
                "mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "log_1110": {
                "input": {
                    "value": "q",
                    "possible_values": []
                }
            }
        }
    },
    "RISCluster/networks.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.encoder",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 8, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=True)",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.latent2dec",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(9, 1152, bias=True)",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.decoder",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 0), bias=True)",
                    "possible_values": []
                }
            },
            "Parameter_141": {
                "variable": {
                    "value": "self.weights",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_weights",
                    "possible_values": [
                        [
                            "torch.zeros(self.n_clusters, self.n_features, dtype=torch.float)",
                            "Call"
                        ],
                        [
                            "weights",
                            "Name"
                        ]
                    ]
                }
            },
            "mul_145": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.latent2dec(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1) - self.weights",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=2)",
                            "Call"
                        ],
                        [
                            "1.0 + x / self.alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 / x",
                            "BinOp"
                        ],
                        [
                            "x ** ((self.alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x) / torch.sum(x, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.latent2dec(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1) - self.weights",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=2)",
                            "Call"
                        ],
                        [
                            "1.0 + x / self.alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 / x",
                            "BinOp"
                        ],
                        [
                            "x ** ((self.alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x) / torch.sum(x, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_146": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.latent2dec(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1) - self.weights",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=2)",
                            "Call"
                        ],
                        [
                            "1.0 + x / self.alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 / x",
                            "BinOp"
                        ],
                        [
                            "x ** ((self.alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x) / torch.sum(x, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "t_151": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.latent2dec(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1) - self.weights",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=2)",
                            "Call"
                        ],
                        [
                            "1.0 + x / self.alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 / x",
                            "BinOp"
                        ],
                        [
                            "x ** ((self.alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x) / torch.sum(x, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "initial_weights",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_clusters",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_features",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Flatten_38": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "1152",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "9",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1152",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "in_channels": {
                    "value": "128",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_66": {
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_68": {
                "in_channels": {
                    "value": "32",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_70": {
                "in_channels": {
                    "value": "16",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_72": {
                "in_channels": {
                    "value": "8",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "t_150": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.latent2dec(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1) - self.weights",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=2)",
                            "Call"
                        ],
                        [
                            "1.0 + x / self.alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 / x",
                            "BinOp"
                        ],
                        [
                            "x ** ((self.alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x) / torch.sum(x, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_150": {
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.encoder(x)",
                            "Call"
                        ],
                        [
                            "self.latent2dec(x)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, 3, 3)",
                            "Call"
                        ],
                        [
                            "self.decoder(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(1) - self.weights",
                            "BinOp"
                        ],
                        [
                            "torch.mul(x, x)",
                            "Call"
                        ],
                        [
                            "torch.sum(x, dim=2)",
                            "Call"
                        ],
                        [
                            "1.0 + x / self.alpha",
                            "BinOp"
                        ],
                        [
                            "1.0 / x",
                            "BinOp"
                        ],
                        [
                            "x ** ((self.alpha + 1.0) / 2.0)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x) / torch.sum(x, dim=1)",
                            "BinOp"
                        ],
                        [
                            "torch.t(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "RISCluster/plotting.py": {
        "torch": {
            "Subset_533": {
                "variable": {
                    "value": "subset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "utils.SeismicDataset(config.fname_dataset, config.datafiletype)",
                            "Call"
                        ],
                        [
                            "utils.SeismicDataset(fname_dataset, 'h5')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "config.img_index",
                    "possible_values": []
                }
            },
            "DataLoader_534": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "possible_values": [
                        [
                            "Subset(dataset, load_index)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, config.img_index)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, img_index)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(config.img_index)",
                    "possible_values": []
                }
            },
            "Subset_1270": {
                "variable": {
                    "value": "subset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "utils.SeismicDataset(config.fname_dataset, config.datafiletype)",
                            "Call"
                        ],
                        [
                            "utils.SeismicDataset(fname_dataset, 'h5')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "img_index",
                    "possible_values": []
                }
            },
            "DataLoader_1271": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "possible_values": [
                        [
                            "Subset(dataset, load_index)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, config.img_index)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, img_index)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "len(img_index)",
                    "possible_values": []
                }
            },
            "Subset_363": {
                "variable": {
                    "value": "subset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "utils.SeismicDataset(config.fname_dataset, config.datafiletype)",
                            "Call"
                        ],
                        [
                            "utils.SeismicDataset(fname_dataset, 'h5')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "load_index",
                    "possible_values": [
                        [
                            "query[sort_index][disp_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_364": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "possible_values": [
                        [
                            "Subset(dataset, load_index)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, config.img_index)",
                            "Call"
                        ],
                        [
                            "Subset(dataset, img_index)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "N",
                    "possible_values": [
                        [
                            "6",
                            "Constant"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_321": {
                "ndarray": {
                    "value": "centroids",
                    "possible_values": [
                        [
                            "model.clustering.weights",
                            "Attribute"
                        ],
                        [
                            "centroids.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "squeeze_402": {
                "input": {
                    "value": "X_c[l]",
                    "possible_values": []
                }
            },
            "reshape_782": {
                "input": {
                    "value": "X_r[i, :, :, :]",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n, o)",
                    "possible_values": []
                }
            },
            "reshape_1816": {
                "input": {
                    "value": "X[insp_idx[i], :, :, :]",
                    "possible_values": []
                },
                "shape": {
                    "value": "(n, o)",
                    "possible_values": []
                }
            }
        }
    },
    "RISCluster/production.py": {
        "torch": {
            "DataLoader_67": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "utils.SeismicDataset(config.fname_dataset, config.datafiletype)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "load_data(config)",
                            "Call"
                        ],
                        [
                            "load_data(config)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "tra_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "tra_dataset",
                    "possible_values": [
                        [
                            "Subset(dataset, index_tra)",
                            "Call"
                        ],
                        [
                            "utils.dataset_to_RAM(tra_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Adam_158": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": []
                }
            },
            "Subset_34": {
                "variable": {
                    "value": "tra_dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "utils.SeismicDataset(config.fname_dataset, config.datafiletype)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "load_data(config)",
                            "Call"
                        ],
                        [
                            "load_data(config)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index_tra",
                    "possible_values": []
                }
            },
            "DataLoader_131": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "possible_values": [
                        [
                            "Subset(dataset, index_val)",
                            "Call"
                        ],
                        [
                            "np.array([])",
                            "Call"
                        ],
                        [
                            "utils.dataset_to_RAM(val_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Subset_36": {
                "variable": {
                    "value": "val_dataset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "utils.SeismicDataset(config.fname_dataset, config.datafiletype)",
                            "Call"
                        ],
                        [
                            "np.load(fname)",
                            "Call"
                        ],
                        [
                            "load_data(config)",
                            "Call"
                        ],
                        [
                            "load_data(config)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "index_val",
                    "possible_values": []
                }
            },
            "MSELoss_78": {
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "MSELoss_84": {
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "CosineSimilarity_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MSELoss_144": {
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "MSELoss_154": {
                "reduction": {
                    "value": "mean",
                    "possible_values": []
                }
            },
            "KLDivLoss_155": {
                "reduction": {
                    "value": "sum",
                    "possible_values": []
                }
            }
        }
    },
    "RISCluster/utils.py": {
        "torch": {
            "DataLoader_616": {
                "variable": {
                    "value": "dl",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "SeismicDataset(args.source, 'h5')",
                            "Call"
                        ],
                        [
                            "SeismicDataset(fname_dataset, 'h5')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bsz",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ],
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_626": {
                "variable": {
                    "value": "index",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "possible_values": [
                        [
                            "dataset.__len__()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int",
                    "possible_values": []
                }
            },
            "zeros_627": {
                "variable": {
                    "value": "data",
                    "possible_values": []
                },
                "*size": {
                    "value": "m",
                    "possible_values": [
                        [
                            "dataset.__len__()",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "possible_values": []
                },
                "dtype": {
                    "value": "o",
                    "possible_values": []
                },
                "layout": {
                    "value": "p",
                    "possible_values": [
                        [
                            "subprocess.Popen(cmd, cwd=logdir, shell=True)",
                            "Call"
                        ],
                        [
                            "subprocess.Popen(cmd, cwd=self.savepath_exp, shell=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_663": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "SeismicDataset(args.source, 'h5')",
                            "Call"
                        ],
                        [
                            "SeismicDataset(fname_dataset, 'h5')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bsz",
                    "possible_values": [
                        [
                            "4096",
                            "Constant"
                        ],
                        [
                            "4096",
                            "Constant"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "TensorDataset_632": {
                "*tensors": {
                    "value": "index",
                    "possible_values": []
                }
            },
            "is_available_191": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_198": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "from_numpy_274": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data[idx, :]",
                    "possible_values": []
                }
            },
            "Subset_414": {
                "variable": {
                    "value": "subset",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": [
                        [
                            "SeismicDataset(args.source, 'h5')",
                            "Call"
                        ],
                        [
                            "SeismicDataset(fname_dataset, 'h5')",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "labels_subset.idx",
                    "possible_values": []
                }
            },
            "DataLoader_415": {
                "variable": {
                    "value": "dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "subset",
                    "possible_values": [
                        [
                            "self.df['peak'].loc[self.df['label'] == label].abs()",
                            "Call"
                        ],
                        [
                            "self.df.loc[mask].drop(columns=['network', 'station', 'peak', 'unit', 'idx'])",
                            "Call"
                        ],
                        [
                            "Subset(dataset, labels_subset.idx)",
                            "Call"
                        ],
                        [
                            "self.df.loc[mask_label]",
                            "Subscript"
                        ],
                        [
                            "self.df.loc[mask_label]",
                            "Subscript"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "workers",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_1018": {
                "f": {
                    "value": "fname",
                    "possible_values": [
                        [
                            "os.path.join(universal['configpath'], f\"init_{parameters['mode']}.ini\")",
                            "Call"
                        ],
                        [
                            "f'{savepath}ExpConfig{serial}'",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(savepath, f'Labels{serial}.csv')",
                            "Call"
                        ],
                        [
                            "os.path.join(savepath, 'Labels.csv')",
                            "Call"
                        ],
                        [
                            "os.path.abspath(os.path.join(self.saved_weights, os.pardir))",
                            "Call"
                        ],
                        [
                            "os.path.abspath(os.path.join(self.saved_weights, os.pardir))",
                            "Call"
                        ],
                        [
                            "f\"Run_BatchSz={kwargs.get('batch_size')}_\" + f\"LR={kwargs.get('lr')}\"",
                            "BinOp"
                        ],
                        [
                            "f\"Run_Clusters={kwargs.get('n_clusters')}_\" + f\"BatchSz={kwargs.get('batch_size')}_\" + f\"LR={kwargs.get('lr')}_\" + f\"gamma={kwargs.get('gamma')}_\" + f\"tol={kwargs.get('tol')}\"",
                            "BinOp"
                        ],
                        [
                            "f\"n_clusters={kwargs.get('n_clusters')}\"",
                            "JoinedStr"
                        ],
                        [
                            "os.path.join(self.savepath_exp, f'ExpConfig{self.serial_exp}')",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "device_193": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "f'cuda:{cuda_device}'",
                    "possible_values": []
                }
            },
            "device_195": {
                "variable": {
                    "value": "self.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "from_numpy_243": {
                "ndarray": {
                    "value": "X",
                    "possible_values": [
                        [
                            "np.zeros((len(index), 88, 101))",
                            "Call"
                        ],
                        [
                            "X[:, :-1, 1:]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(axis=(1, 2))[:, None, None]) / np.abs(X).max(axis=(1, 2))[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(X, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.data[idx, :])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.read_h5(self.fname, idx))",
                            "Call"
                        ],
                        [
                            "self.transform(X)",
                            "Call"
                        ],
                        [
                            "X / np.linalg.norm(X)",
                            "BinOp"
                        ],
                        [
                            "(X - X.mean()) / np.abs(X).max()",
                            "BinOp"
                        ],
                        [
                            "np.reshape(X, (1, -1))",
                            "Call"
                        ],
                        [
                            "np.reshape(X, (n, o))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(X, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(index), 88, 101))",
                            "Call"
                        ],
                        [
                            "X[:, :-1, 1:]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(axis=(1, 2))[:, None, None]) / np.abs(X).max(axis=(1, 2))[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(X, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "X",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.read_h5(self.fname, idx)",
                    "possible_values": []
                }
            },
            "max_430": {
                "input": {
                    "value": "torch.sum(X, 3) / X.size(3)",
                    "possible_values": []
                }
            },
            "current_device_196": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "sum_430": {
                "input": {
                    "value": "X",
                    "possible_values": [
                        [
                            "np.zeros((len(index), 88, 101))",
                            "Call"
                        ],
                        [
                            "X[:, :-1, 1:]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(axis=(1, 2))[:, None, None]) / np.abs(X).max(axis=(1, 2))[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(X, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.data[idx, :])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(self.read_h5(self.fname, idx))",
                            "Call"
                        ],
                        [
                            "self.transform(X)",
                            "Call"
                        ],
                        [
                            "X / np.linalg.norm(X)",
                            "BinOp"
                        ],
                        [
                            "(X - X.mean()) / np.abs(X).max()",
                            "BinOp"
                        ],
                        [
                            "np.reshape(X, (1, -1))",
                            "Call"
                        ],
                        [
                            "np.reshape(X, (n, o))",
                            "Call"
                        ],
                        [
                            "np.expand_dims(X, axis=0)",
                            "Call"
                        ],
                        [
                            "np.zeros((len(index), 88, 101))",
                            "Call"
                        ],
                        [
                            "X[:, :-1, 1:]",
                            "Subscript"
                        ],
                        [
                            "(X - X.mean(axis=(1, 2))[:, None, None]) / np.abs(X).max(axis=(1, 2))[:, None, None]",
                            "BinOp"
                        ],
                        [
                            "np.expand_dims(X, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "possible_values": []
                }
            }
        }
    }
}