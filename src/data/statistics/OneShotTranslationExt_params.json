{
    "drawing_and_style_transfer/data/__init__.py": {
        "torch": {}
    },
    "drawing_and_style_transfer/data/aligned_dataset.py": {
        "torch": {}
    },
    "drawing_and_style_transfer/data/base_dataset.py": {
        "torch": {}
    },
    "drawing_and_style_transfer/data/image_folder.py": {
        "torch": {}
    },
    "drawing_and_style_transfer/models/base_model.py": {
        "torch": {
            "save_46": {
                "obj": {
                    "value": "network.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.load_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_54": {
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.load_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "drawing_and_style_transfer/models/networks.py": {
        "torch": {
            "LambdaLR_98": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_288": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_331": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_389": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_488": {
                "variable": {
                    "value": "downconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_490": {
                "variable": {
                    "value": "downrelu",
                    "type": "variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_492": {
                "variable": {
                    "value": "uprelu",
                    "type": "variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_521": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_573": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*sequence",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_602": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.net",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "normal_22": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_58": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "StepLR_100": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_221": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_223": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_434": {
                "*args": {
                    "value": "*conv_block",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_496": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rsqrt_15": {
                "input": {
                    "value": "torch.mean(x.pow(2), dim=1, keepdim=True) + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_24": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "orthogonal_60": {
                "module": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gain": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_102": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_358": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_359": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_362": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_385": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_386": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_387": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_416": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_418": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_431": {
                "in_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_503": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_510": {
                "variable": {
                    "value": "upconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inner_nc * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outer_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_527": {
                "tensors": {
                    "value": "[x, self.model(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_543": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "LeakyReLU_544": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_562": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_565": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_568": {
                "in_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                }
            },
            "Conv2d_592": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_593": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_594": {
                "in_channels": {
                    "value": "ndf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_596": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_597": {
                "in_channels": {
                    "value": "ndf * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "normal_26": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_38": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_50": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "normal_62": {
                "mean": {
                    "value": "m.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "generator": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_269": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "in_channels": {
                    "value": "input_nc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outer_nc",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_273": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_277": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_280": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_319": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_324": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_327": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_328": {
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_nc",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_329": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_367": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ngf * mult * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_370": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_379": {
                "in_channels": {
                    "value": "ngf * mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "int(ngf * mult / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "ReLU_384": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_408": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_420": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_424": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_500": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_553": {
                "in_channels": {
                    "value": "ndf * nf_mult_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ndf * nf_mult",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "int"
                        ]
                    ]
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "bias": {
                    "value": "use_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer.func == nn.InstanceNorm2d",
                            "Compare"
                        ],
                        [
                            "norm_layer == nn.InstanceNorm2d",
                            "Compare"
                        ]
                    ]
                }
            },
            "LeakyReLU_556": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_571": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_600": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_15": {
                "input": {
                    "value": "x.pow(2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_410": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_426": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_517": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "drawing_and_style_transfer/models/ost.py": {
        "torch": {}
    },
    "drawing_and_style_transfer/models/test_model.py": {
        "torch": {}
    },
    "drawing_and_style_transfer/options/base_options.py": {
        "torch": {
            "set_device_89": {
                "device": {
                    "value": "self.opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "drawing_and_style_transfer/util/image_pool.py": {
        "torch": {
            "unsqueeze_18": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_32": {
                "tensors": {
                    "value": "return_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "Variable(torch.cat(return_images, 0))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "drawing_and_style_transfer/util/util.py": {
        "torch": {
            "mean_23": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_23": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/data_loader_mnist_m_mnist.py": {
        "torch": {
            "DataLoader_71": {
                "variable": {
                    "value": "mnist_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CustomMNIST(root=config.mnist_path, use_augmentation=config.use_augmentation, download=True, transform=transform_train, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.mnist_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "mnist_m_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=os.path.join(config.mnist_m_path, 'train'), transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.mnist_m_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_81": {
                "variable": {
                    "value": "mnist_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=config.mnist_path, download=True, transform=transform_test, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.mnist_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "mnist_m_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_m_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(root=os.path.join(config.mnist_m_path, 'test'), transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.mnist_m_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/data_loader_svhn_mnist.py": {
        "torch": {
            "DataLoader_130": {
                "variable": {
                    "value": "svhn_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "svhn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CherryPickedSVHN(root=config.svhn_path, use_augmentation=config.use_augmentation, download=True, transform=transform_train, split='train')",
                            "Call"
                        ],
                        [
                            "CustomSVHN(root=config.svhn_path, use_augmentation=config.use_augmentation, download=True, transform=transform_train, split='train')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.svhn_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "svhn_shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "bool"
                        ],
                        [
                            "True",
                            "bool"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "mnist_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CustomMNIST(root=config.mnist_path, use_augmentation=config.use_augmentation, download=True, transform=transform_train, train=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.mnist_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "config.shuffle",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "svhn_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "svhn_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.SVHN(root=config.svhn_path, download=True, transform=transform_test, split='test')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.svhn_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "mnist_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root=config.mnist_path, download=True, transform=transform_test, train=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "config.mnist_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/eval_mnist_svhn.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(args.eval_folder, transform=transform, loader=img_loader)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_62": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_72": {
                "input": {
                    "value": "torch.argmax(F.softmax(output, dim=0)) == target",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "is_available_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argmax_72": {
                "input": {
                    "value": "F.softmax(output, dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_72": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(img)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/main_autoencoder_mnist_m_mnist.py": {
        "torch": {}
    },
    "mnist_to_svhn/main_autoencoder_svhn_mnist.py": {
        "torch": {}
    },
    "mnist_to_svhn/main_baseline_online_mnist_to_mnist_m.py": {
        "torch": {}
    },
    "mnist_to_svhn/main_baseline_online_svhn_to_mnist.py": {
        "torch": {}
    },
    "mnist_to_svhn/main_mnist_to_svhn.py": {
        "torch": {}
    },
    "mnist_to_svhn/main_svhn_to_mnist.py": {
        "torch": {}
    },
    "mnist_to_svhn/mnist/model.py": {
        "torch": {
            "Linear_29": {
                "variable": {
                    "value": "layers[out]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "current_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dims",
                            "variable"
                        ],
                        [
                            "n_hidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_class",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "layers",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "layers[fc{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "in_features": {
                    "value": "current_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dims",
                            "variable"
                        ],
                        [
                            "n_hidden",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "layers[relu{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_27": {
                "variable": {
                    "value": "layers[drop{}.format(i + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "p": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/model_mnist_m_mnist.py": {
        "torch": {
            "Sequential_11": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "leaky_relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_130": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_131": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_132": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_149": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_156": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_199": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_201": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_219": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_220": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_221": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_8": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_mnist_m(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_mnist_m(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_mnist_m(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_mnist_m(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_mnist(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_128": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_136": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_mnist(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_138": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_mnist(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_147": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_160": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_mnist(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_162": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/model_svhn_mnist.py": {
        "torch": {
            "Sequential_11": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_20": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "leaky_relu_48": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_49": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_67": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_74": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_130": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_131": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_132": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_133": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_149": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_150": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_156": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv4(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv1(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_199": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_200": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_201": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_219": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x_0)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_220": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_221": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(out)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_8": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "c_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_svhn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_46": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_svhn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_svhn(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_svhn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_80": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_126": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_mnist(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_128": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_136": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_mnist(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_138": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_145": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_mnist(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_147": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tanh_160": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2_mnist(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_162": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.deconv2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_10": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "c_out",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/solver_autoencoder_mnist_m_mnist.py": {
        "torch": {
            "Adam_49": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.g11.parameters()) + list(self.g22.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_50": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.d1.parameters()) + list(self.d2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_87": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_88": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_116": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_127": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_137": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_186": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_198": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_209": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_138": {
                "input": {
                    "value": "(mnist - fake_mnist) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_210": {
                "input": {
                    "value": "(mnist_m - fake_mnist_m) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "self.g11.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g11_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g11-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_167": {
                "obj": {
                    "value": "self.d1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d1_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd1-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_238": {
                "obj": {
                    "value": "self.g22.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g22_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g22-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_239": {
                "obj": {
                    "value": "self.d2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d2_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd2-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_to_svhn/solver_autoencoder_svhn_mnist.py": {
        "torch": {
            "Adam_48": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "g_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.g11.parameters()) + list(self.g22.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "d_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.d1.parameters()) + list(self.d2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_86": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_87": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_115": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_126": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_136": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_185": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_197": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_208": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "(mnist - fake_mnist) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_209": {
                "input": {
                    "value": "(svhn - fake_svhn) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "self.g11.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g11_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g11-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_166": {
                "obj": {
                    "value": "self.d1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d1_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd1-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_237": {
                "obj": {
                    "value": "self.g22.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g22_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g22-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_238": {
                "obj": {
                    "value": "self.d2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d2_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd2-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_to_svhn/solver_baseline_online_mnist_to_mnist_m.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g22.encode_params()) + list(self.g22.decode_params())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "self.unshared_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g22.unshared_parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.d1.parameters()) + list(self.d2.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_130": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "mnist_single_sample_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "mnist_single_sample_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SampleDataset(mnist_fixed_data, mnist_fixed_labels, self.train_iters, self.config.use_augmentation)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_172": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_188": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_193": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_205": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "trained_example_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trained_online_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_137": {
                "f": {
                    "value": "self.g22_load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_210": {
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_215": {
                "input": {
                    "value": "(mnist - fake_mnist) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_231": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(mnist_m - fake_em) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_222": {
                "input": {
                    "value": "(mnist - fake_mnist) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_261": {
                "obj": {
                    "value": "self.g22.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g22_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g22-%d-%d.pkl' % (online_iter + 1, step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_262": {
                "obj": {
                    "value": "self.d1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d1_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd1-%d-%d.pkl' % (online_iter + 1, step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_263": {
                "obj": {
                    "value": "self.d2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d2_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd2-%d-%d.pkl' % (online_iter + 1, step + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_to_svhn/solver_baseline_online_svhn_to_mnist.py": {
        "torch": {
            "cat_39": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "sample_transformed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_76": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g11.encode_params()) + list(self.g11.decode_params())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_78": {
                "variable": {
                    "value": "self.unshared_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g11.unshared_parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_84": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.d1.parameters()) + list(self.d2.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_130": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_131": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_149": {
                "variable": {
                    "value": "svhn_single_sample_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "svhn_single_sample_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SampleDataset(svhn_fixed_data, svhn_fixed_labels, self.train_iters, self.config.use_augmentation)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.config.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_174": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_177": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_191": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_208": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_273": {
                "variable": {
                    "value": "trained_example_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "trained_online_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "load_137": {
                "f": {
                    "value": "self.g11_load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_213": {
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_218": {
                "input": {
                    "value": "(svhn - fake_svhn) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_234": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(mnist - fake_em) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_225": {
                "input": {
                    "value": "(svhn - fake_svhn) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_264": {
                "obj": {
                    "value": "self.g11.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g11_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g11-%d-%d.pkl' % (online_iter + 1, step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_265": {
                "obj": {
                    "value": "self.d1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d1_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd1-%d-%d.pkl' % (online_iter + 1, step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_266": {
                "obj": {
                    "value": "self.d2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d2_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd2-%d-%d.pkl' % (online_iter + 1, step + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_to_svhn/solver_mnist_to_svhn.py": {
        "torch": {
            "Adam_45": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g11.encode_params()) + list(self.g11.decode_params())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.unshared_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g11.unshared_parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.d1.parameters()) + list(self.d2.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_100": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_101": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_164": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_178": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_183": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_196": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_201": {
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_206": {
                "input": {
                    "value": "(mnist - fake_mnist) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_222": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(svhn - fake_es) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "self.g11_load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_213": {
                "input": {
                    "value": "(mnist - fake_mnist) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_252": {
                "obj": {
                    "value": "self.g11.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g11_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_253": {
                "obj": {
                    "value": "self.d1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d1_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_254": {
                "obj": {
                    "value": "self.d2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d2_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "mnist_to_svhn/solver_svhn_to_mnist.py": {
        "torch": {
            "Adam_45": {
                "variable": {
                    "value": "self.g_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g11.encode_params()) + list(self.g11.decode_params())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "self.unshared_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.g11.unshared_parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_53": {
                "variable": {
                    "value": "self.d_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.d1.parameters()) + list(self.d2.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "[self.beta1, self.beta2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_99": {
                "variable": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_100": {
                "variable": {
                    "value": "encoding_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(mu, 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_158": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_161": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_175": {
                "variable": {
                    "value": "d1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_180": {
                "variable": {
                    "value": "d2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_192": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_197": {
                "input": {
                    "value": "(out - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_202": {
                "input": {
                    "value": "(svhn - fake_svhn) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_218": {
                "variable": {
                    "value": "g_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(mnist - fake_em) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_106": {
                "f": {
                    "value": "self.g11_load_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_209": {
                "input": {
                    "value": "(svhn - fake_svhn) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_248": {
                "obj": {
                    "value": "self.g11.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "g11_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'g11-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_249": {
                "obj": {
                    "value": "self.d1.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d1_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd1-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "save_250": {
                "obj": {
                    "value": "self.d2.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "d2_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_path, 'd2-%d.pkl' % (step + 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_to_svhn/svhn/model.py": {
        "torch": {
            "Sequential_19": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(n_channel, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "out_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[0] if isinstance(v, tuple) else v",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[1] if isinstance(v, tuple) else 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "n_channel",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "MaxPool2d_37": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "v[0] if isinstance(v, tuple) else v",
                            "IfExp"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_43": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_45": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}