{
    "PWCNet/PWCNet.py": {
        "torch": {
            "Sequential_28": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=kernel_size, stride=stride, padding=padding, dilation=dilation, bias=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_73": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_151": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_152": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_155": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_166": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ],
                        [
                            "torch.cat((corr6, self.conv6_0(corr6)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv6_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv6_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv6_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(x.size())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.ones(x.size())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_196": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_0(corr6), corr6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_197": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_198": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_199": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, c15, up_flow6, up_feat6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_212": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_213": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_214": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_223": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, c14, up_flow5, up_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_228": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_239": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_243": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_0(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_253": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_2(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_255": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_3(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_256": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_4(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_292": {
                "variable": {
                    "value": "self.leakyRELU",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_371": {
                "variable": {
                    "value": "xx",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_372": {
                "variable": {
                    "value": "yy",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "H",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_375": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(xx, yy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_386": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((self.conv6_0(corr6), corr6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_0(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_2(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_3(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_4(x), x), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ],
                        [
                            "torch.cat((corr6, self.conv6_0(corr6)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv6_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv6_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv6_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv6_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr5, c15, up_flow6, up_feat6), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv5_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv5_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr4, c14, up_flow5, up_feat5), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv4_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv4_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr3, c13, up_flow4, up_feat4), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv3_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv3_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((corr2, c12, up_flow3, up_feat3), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_0(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((self.conv2_1(x), x), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_2(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_3(x)), 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((x, self.conv2_4(x)), 1)",
                            "Call"
                        ],
                        [
                            "self.dc_conv4(self.dc_conv3(self.dc_conv2(self.dc_conv1(x))))",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "grid_sample_388": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.autograd.Variable(torch.ones(x.size())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(torch.ones(x.size())).cuda()",
                            "Call"
                        ],
                        [
                            "nn.functional.grid_sample(mask, vgrid)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "vgrid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "Variable(grid) + flo",
                            "BinOp"
                        ],
                        [
                            "vgrid.permute(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_415": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr6, self.conv6_0(corr6))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_416": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv6_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_417": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv6_2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_418": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv6_3(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv6_4(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr5, c15, up_flow6, up_feat6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_428": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv5_0(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_429": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv5_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_430": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv5_2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv5_3(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv5_4(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr4, c14, up_flow5, up_feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_441": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv4_0(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_442": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv4_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_443": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv4_2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_444": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv4_3(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_445": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv4_4(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_453": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr3, c13, up_flow4, up_feat4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_454": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv3_0(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv3_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_456": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv3_2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv3_3(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_458": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv3_4(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_466": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(corr2, c12, up_flow3, up_feat3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_467": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv2_0(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_468": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.conv2_1(x), x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv2_2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_470": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv2_3(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_471": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, self.conv2_4(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_490": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_504": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_31": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_167": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_387": {
                "*size": {
                    "value": "x.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "PWCNet/correlation_package_pytorch1_0/correlation.py": {
        "torch": {
            "device_of_21": {
                "obj": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_of_34": {
                "obj": {
                    "value": "input1",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "PWCNet/correlation_package_pytorch1_0/setup.py": {
        "torch": {}
    },
    "model.py": {
        "torch": {
            "Conv2d_43": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filterSize",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filterSize - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filterSize",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "int((filterSize - 1) / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_64": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(torch.cat((x, skpCn), 1)), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.down5(s5)",
                            "Call"
                        ],
                        [
                            "self.up1(x, s5)",
                            "Call"
                        ],
                        [
                            "self.up2(x, s4)",
                            "Call"
                        ],
                        [
                            "self.up3(x, s3)",
                            "Call"
                        ],
                        [
                            "self.up4(x, s2)",
                            "Call"
                        ],
                        [
                            "self.up5(x, s1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv3(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.gridX.unsqueeze(0).expand_as(u).float() + u",
                            "BinOp"
                        ],
                        [
                            "2 * (x / self.W - 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_66": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_68": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2 * outChannels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.avg_pool2d(x, 2)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, scale_factor=2, mode='bilinear')",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv2(torch.cat((x, skpCn), 1)), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv1(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.down5(s5)",
                            "Call"
                        ],
                        [
                            "self.up1(x, s5)",
                            "Call"
                        ],
                        [
                            "self.up2(x, s4)",
                            "Call"
                        ],
                        [
                            "self.up3(x, s3)",
                            "Call"
                        ],
                        [
                            "self.up4(x, s2)",
                            "Call"
                        ],
                        [
                            "self.up5(x, s1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(self.conv3(x), negative_slope=0.1)",
                            "Call"
                        ],
                        [
                            "self.gridX.unsqueeze(0).expand_as(u).float() + u",
                            "BinOp"
                        ],
                        [
                            "2 * (x / self.W - 0.5)",
                            "BinOp"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "leaky_relu_129": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_131": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(torch.cat((x, skpCn), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outChannels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_193": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_194": {
                "variable": {
                    "value": "s1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "leaky_relu_205": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "self.gridX",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gridX",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_246": {
                "variable": {
                    "value": "self.gridY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "gridY",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_277": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_279": {
                "variable": {
                    "value": "imgOut",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack((x, y), dim=3)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_131": {
                "tensors": {
                    "value": "(x, skpCn)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "network.py": {
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "flow_left_chain",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, size[0], size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "flow_right_chain",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 2, size[0], size[1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReplicationPad2d_109": {
                "variable": {
                    "value": "pader",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "[intPaddingLeft, intPaddingRight, intPaddingTop, intPaddingBottom]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_34": {
                "variable": {
                    "value": "visibility_map_left",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[:, 4:5, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "clamp_59": {
                "variable": {
                    "value": "synthesized_intermediate_frame",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "synthesized_intermediate_frame",
                    "type": "variable",
                    "possible_values": [
                        [
                            "appearanceEstimation(torch.cat((visibility_map_left * warped_contextual_info_left, visibility_map_right * warped_contextual_info_right, contextual_info_target, visibility_map_left * warped_left, visibility_map_right * warped_right, low_res_target), dim=1))",
                            "Call"
                        ],
                        [
                            "torch.clamp(synthesized_intermediate_frame, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_24": {
                "tensors": {
                    "value": "(keyframe_left, keyframe_right, low_res_target, flow_right_init, flow_left_init, warped_right_init, warped_left_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "(visibility_map_left * warped_contextual_info_left, visibility_map_right * warped_contextual_info_right, contextual_info_target, visibility_map_left * warped_left, visibility_map_right * warped_right, low_res_target)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_74": {
                "input": {
                    "value": "flowComputation(torch.cat((images[idx + 1], images[idx]), axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "interpolate_83": {
                "input": {
                    "value": "flowComputation(torch.cat((images[idx], images[idx + 1]), axis=1))",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_74": {
                "tensors": {
                    "value": "(images[idx + 1], images[idx])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_83": {
                "tensors": {
                    "value": "(images[idx], images[idx + 1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "device_30": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "resnetConv1",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "list(resnet.children())[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_59": {
                "variable": {
                    "value": "dict1",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Checkpoints/flowEnhancement.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "dict1",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "Checkpoints/appearanceEstimation.ckpt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}