{
    "disent/metrics/_dci.py": {
        "sklearn": {
            "GradientBoostingClassifier_110": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "disent/metrics/_sap.py": {
        "sklearn": {
            "LinearSVC_112": {
                "variable": {
                    "value": "classifier",
                    "type": "Variable",
                    "possible_values": []
                },
                "C": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                },
                "class_weight": {
                    "value": "balanced",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/metrics/utils.py": {
        "sklearn": {
            "mutual_info_score_231": {
                "variable": {
                    "value": "h[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "ys[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "ys[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mutual_info_score_220": {
                "variable": {
                    "value": "m[i, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_true": {
                    "value": "ys[j, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels_pred": {
                    "value": "mus[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "disent/dataset/_base.py": {
        "torch": {}
    },
    "disent/dataset/data/_episodes.py": {
        "torch": {}
    },
    "disent/dataset/data/_groundtruth.py": {
        "torch": {}
    },
    "disent/dataset/data/_groundtruth__cars3d.py": {
        "torch": {
            "allclose_213": {
                "input": {
                    "value": "obs_128",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "obs_64",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/dataset/data/_groundtruth__dsprites_imagenet.py": {
        "torch": {
            "DataLoader_69": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Call",
                    "possible_values": [
                        [
                            "NumpyFolder(os.path.join(raw_data_dir, 'train'))",
                            "Call"
                        ],
                        [
                            "DataLoader(data, batch_size=64, num_workers=min(16, os.cpu_count()), shuffle=False, drop_last=False, collate_fn=_noop)",
                            "Call"
                        ],
                        [
                            "data_cls(prepare=True)",
                            "Call"
                        ],
                        [
                            "data_cls(prepare=True, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "min(16, os.cpu_count())",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "_noop",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/dataset/data/_groundtruth__norb.py": {
        "torch": {
            "allclose_319": {
                "input": {
                    "value": "obs_96",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "obs_64",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/dataset/data/_raw.py": {
        "torch": {}
    },
    "disent/dataset/transform/_augment.py": {
        "torch": {
            "no_grad_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_168": {
                "variable": {
                    "value": "radius_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "rym",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "ryM + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(B if self.ran_batch else 1, C if self.ran_channels else 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_169": {
                "variable": {
                    "value": "radius_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "rxm",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "rxM + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(B if self.ran_batch else 1, C if self.ran_channels else 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_272": {
                "f": {
                    "value": "name_or_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clone_277": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R.KERNELS[name]",
                            "Subscript"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "_get_kernel(kernel) if isinstance(kernel, str) else torch.clone(kernel)",
                            "IfExp"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "self._make_kernel(obs.shape, obs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_127": {
                "data": {
                    "value": "self.sigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_128": {
                "data": {
                    "value": "self.trunc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_130": {
                "*size": {
                    "value": "B if self.ran_batch else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out": {
                    "value": "C if self.ran_channels else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_131": {
                "*size": {
                    "value": "B if self.ran_batch else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out": {
                    "value": "C if self.ran_channels else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_230": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R.KERNELS[name]",
                            "Subscript"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "_get_kernel(kernel) if isinstance(kernel, str) else torch.clone(kernel)",
                            "IfExp"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "self._make_kernel(obs.shape, obs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_232": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_234": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_236": {
                "input": {
                    "value": "torch.abs(kernel)[kernel > 0].sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.abs(kernel)[kernel < 0].sum()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_232": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R.KERNELS[name]",
                            "Subscript"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "_get_kernel(kernel) if isinstance(kernel, str) else torch.clone(kernel)",
                            "IfExp"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "self._make_kernel(obs.shape, obs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_234": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R.KERNELS[name]",
                            "Subscript"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "_get_kernel(kernel) if isinstance(kernel, str) else torch.clone(kernel)",
                            "IfExp"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "self._make_kernel(obs.shape, obs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_237": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R.KERNELS[name]",
                            "Subscript"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "_get_kernel(kernel) if isinstance(kernel, str) else torch.clone(kernel)",
                            "IfExp"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "self._make_kernel(obs.shape, obs.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_238": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "R.KERNELS[name]",
                            "Subscript"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "_get_kernel(kernel) if isinstance(kernel, str) else torch.clone(kernel)",
                            "IfExp"
                        ],
                        [
                            "_scale_kernel(kernel, mode=normalize_mode)",
                            "Call"
                        ],
                        [
                            "_check_kernel(kernel)",
                            "Call"
                        ],
                        [
                            "self._make_kernel(obs.shape, obs.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/dataset/transform/_augment_disent.py": {
        "torch": {}
    },
    "disent/dataset/transform/_transforms.py": {
        "torch": {}
    },
    "disent/dataset/transform/functional.py": {
        "torch": {
            "from_numpy_121": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F_tv.to_pil_image(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.resize(obs, size=size)",
                            "Call"
                        ],
                        [
                            "np.array(obs)",
                            "Call"
                        ],
                        [
                            "obs[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(obs)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(obs, -1, -3)",
                            "Call"
                        ],
                        [
                            "F_tv.to_tensor(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.to_pil_image(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.resize(obs, size=size)",
                            "Call"
                        ],
                        [
                            "F_tv.normalize(obs, mean=0.0 if mean is None else mean, std=1.0 if std is None else std, inplace=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "moveaxis_122": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F_tv.to_pil_image(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.resize(obs, size=size)",
                            "Call"
                        ],
                        [
                            "np.array(obs)",
                            "Call"
                        ],
                        [
                            "obs[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(obs)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(obs, -1, -3)",
                            "Call"
                        ],
                        [
                            "F_tv.to_tensor(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.to_pil_image(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.resize(obs, size=size)",
                            "Call"
                        ],
                        [
                            "F_tv.normalize(obs, mean=0.0 if mean is None else mean, std=1.0 if std is None else std, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "destination": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_tensor_73": {
                "obj": {
                    "value": "obs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F_tv.to_pil_image(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.resize(obs, size=size)",
                            "Call"
                        ],
                        [
                            "np.array(obs)",
                            "Call"
                        ],
                        [
                            "obs[:, :, None]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(obs)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(obs, -1, -3)",
                            "Call"
                        ],
                        [
                            "F_tv.to_tensor(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.to_pil_image(obs)",
                            "Call"
                        ],
                        [
                            "F_tv.resize(obs, size=size)",
                            "Call"
                        ],
                        [
                            "F_tv.normalize(obs, mean=0.0 if mean is None else mean, std=1.0 if std is None else std, inplace=True)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/dataset/util/formats/hdf5.py": {
        "torch": {
            "DataLoader_439": {
                "dataset": {
                    "value": "gt_data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data.gt_data",
                            "Attribute"
                        ],
                        [
                            "data",
                            "Name"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "inp_data.chunks[0] if hasattr(inp_data, 'chunks') and inp_data.chunks else 32",
                            "IfExp"
                        ],
                        [
                            "dataset.chunks[0]",
                            "Subscript"
                        ],
                        [
                            "max(32 // batch_size * batch_size, batch_size)",
                            "Call"
                        ],
                        [
                            "32",
                            "Constant"
                        ],
                        [
                            "array.chunks[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/dataset/util/stats.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_cls(transform=ToImgTensorF32(size=64), **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_71": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(img_means, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_72": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat(img_stds, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "img_means",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_72": {
                "tensors": {
                    "value": "img_stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_68": {
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loader",
                            "Name"
                        ],
                        [
                            "batch.to(torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 2) if chn_is_last else (2, 3)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "std_69": {
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "loader",
                            "Name"
                        ],
                        [
                            "batch.to(torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1, 2) if chn_is_last else (2, 3)",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    },
    "disent/dataset/wrapper/_base.py": {
        "torch": {}
    },
    "disent/dataset/wrapper/_dither.py": {
        "torch": {}
    },
    "disent/dataset/wrapper/_masked.py": {
        "torch": {}
    },
    "disent/frameworks/_framework.py": {
        "torch": {
            "isnan_205": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.do_training_step(batch, batch_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "isinf_205": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.do_training_step(batch, batch_idx)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/frameworks/ae/_ae_mixin.py": {
        "torch": {}
    },
    "disent/frameworks/ae/_supervised__adaneg_tae.py": {
        "torch": {}
    },
    "disent/frameworks/ae/_supervised__tae.py": {
        "torch": {}
    },
    "disent/frameworks/ae/_unsupervised__ae.py": {
        "torch": {}
    },
    "disent/frameworks/ae/_unsupervised__dotae.py": {
        "torch": {}
    },
    "disent/frameworks/ae/_weaklysupervised__adaae.py": {
        "torch": {}
    },
    "disent/frameworks/helper/latent_distributions.py": {
        "torch": {
            "exp_125": {
                "variable": {
                    "value": "z_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * z_logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Normal_127": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "z_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * z_logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_129": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(z_mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(z_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_151": {
                "variable": {
                    "value": "z_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "z_logscale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Laplace_153": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z_loc",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "z_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(z_logscale)",
                            "Call"
                        ]
                    ]
                }
            },
            "Laplace_155": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros_like(z_loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.ones_like(z_scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_129": {
                "input": {
                    "value": "z_mean",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_129": {
                "input": {
                    "value": "z_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * z_logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_155": {
                "input": {
                    "value": "z_loc",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_like_155": {
                "input": {
                    "value": "z_scale",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(z_logscale)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/frameworks/helper/reconstructions.py": {
        "torch": {
            "mse_loss_149": {
                "input": {
                    "value": "x_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_160": {
                "input": {
                    "value": "x_recon - x_targ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_172": {
                "input": {
                    "value": "x_partial",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_176": {
                "input": {
                    "value": "x_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_187": {
                "input": {
                    "value": "x_partial_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Bernoulli_200": {
                "probs": {
                    "value": "x_recon",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Bernoulli_204": {
                "logits": {
                    "value": "x_partial_recon",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ContinuousBernoulli_218": {
                "probs": {
                    "value": "x_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "lims": {
                    "value": "(0.49, 0.51)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ContinuousBernoulli_223": {
                "logits": {
                    "value": "x_partial_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "lims": {
                    "value": "(0.49, 0.51)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Normal_232": {
                "loc": {
                    "value": "x_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/helper/util.py": {
        "torch": {
            "stack_57": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "map_all(loss_fn, *arg_list, collect_returned=False, common_kwargs=common_kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_57": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "map_all(loss_fn, *arg_list, collect_returned=False, common_kwargs=common_kwargs)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_66": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_supervised__adaneg_tvae.py": {
        "torch": {
            "where_111": {
                "condition": {
                    "value": "an_share_mask",
                    "type": "Call",
                    "possible_values": [
                        [
                            "AdaVae.compute_shared_mask_from_zs(a_z, n_z, ratio=cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "AdaVae.compute_shared_mask_from_posteriors(a_posterior, n_posterior, thresh_mode=cfg.ada_thresh_mode, ratio=cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "AdaVae.compute_shared_mask_from_zs(a_z_sample, n_z_sample, ratio=cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "AdaVae.compute_shared_mask_from_zs(a_posterior.rsample(), n_posterior.rsample(), ratio=cfg.ada_thresh_ratio)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "cfg.adat_triplet_share_scale * (a_z - n_z)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a_z - n_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_supervised__tvae.py": {
        "torch": {}
    },
    "disent/frameworks/vae/_unsupervised__betatcvae.py": {
        "torch": {
            "tensor_122": {
                "variable": {
                    "value": "pi",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "math.pi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_123": {
                "variable": {
                    "value": "normalization",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_124": {
                "variable": {
                    "value": "inv_sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_var",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_84": {
                "input": {
                    "value": "d_posterior.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_unsupervised__betavae.py": {
        "torch": {}
    },
    "disent/frameworks/vae/_unsupervised__dfcvae.py": {
        "torch": {
            "mse_loss_146": {
                "input": {
                    "value": "f_recon",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "f_targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._process_inputs(inputs)",
                            "Call"
                        ],
                        [
                            "check_tensor(inputs, low=0, high=1, dtype=None)",
                            "Call"
                        ],
                        [
                            "torch.clamp(inputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "inputs.repeat(1, 3, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_unsupervised__dipvae.py": {
        "torch": {
            "diagonal_98": {
                "variable": {
                    "value": "cov_diag",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._dip_estimate_cov_matrix(d_posterior)",
                            "Call"
                        ],
                        [
                            "cov_z_mean",
                            "Name"
                        ],
                        [
                            "cov_z_mean + E_var",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_102": {
                "variable": {
                    "value": "dip_loss_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(cov_diag - 1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "dip_loss_od",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cov_off_diag ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "diag_99": {
                "input": {
                    "value": "cov_diag",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.diagonal(cov_matrix)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_124": {
                "variable": {
                    "value": "E_var",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diag(z_var)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_124": {
                "input": {
                    "value": "z_var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_unsupervised__dotvae.py": {
        "torch": {
            "where_103": {
                "variable": {
                    "value": "swapped_p_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "swap_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.overlap_swap_mask(xs_targ=xs_targ)",
                            "Call"
                        ],
                        [
                            "a_p_losses > a_n_losses",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "p_idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_104": {
                "variable": {
                    "value": "swapped_n_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "swap_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.overlap_swap_mask(xs_targ=xs_targ)",
                            "Call"
                        ],
                        [
                            "a_p_losses > a_n_losses",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "p_idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "y": {
                    "value": "n_idxs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_122": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randint_158": {
                "variable": {
                    "value": "(a_idxs, p_idxs, n_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "low": {
                    "value": "len(aug_x_targ)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, min(self.cfg.overlap_num, len(aug_x_targ) ** 3))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "aug_x_targ.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_228": {
                "loc": {
                    "value": "d_posterior.loc[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scale": {
                    "value": "d_posterior.scale[idxs]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_unsupervised__infovae.py": {
        "torch": {
            "exp_189": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-((x - y).pow(2).sum(dim=-1) / sigma)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diagonal_141": {
                "input": {
                    "value": "kernel",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self._kernel_rbf(z0, z1)",
                            "Call"
                        ],
                        [
                            "torch.exp(-((x - y).pow(2).sum(dim=-1) / sigma))",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim2": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_141": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "disent/frameworks/vae/_unsupervised__vae.py": {
        "torch": {}
    },
    "disent/frameworks/vae/_weaklysupervised__adavae.py": {
        "torch": {
            "Normal_132": {
                "variable": {
                    "value": "ave_d0_posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.where(share_mask, ave_posterior.loc, d0_posterior.loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.where(share_mask, ave_posterior.scale, d0_posterior.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_133": {
                "variable": {
                    "value": "ave_d1_posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.where(share_mask, ave_posterior.loc, d1_posterior.loc)",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "torch.where(share_mask, ave_posterior.scale, d1_posterior.scale)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_154": {
                "variable": {
                    "value": "ave_z0",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * z0 + 0.5 * z1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "z0",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "where_155": {
                "variable": {
                    "value": "ave_z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5 * z0 + 0.5 * z1",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "lerp_186": {
                "variable": {
                    "value": "z_threshs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "minimums",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_deltas.min(axis=1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "end": {
                    "value": "maximums",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_deltas.max(axis=1, keepdim=True).values",
                            "Attribute"
                        ]
                    ]
                },
                "weight": {
                    "value": "ratio",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_223": {
                "loc": {
                    "value": "ave_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "(d0_posterior.mean * z0_invvar + d1_posterior.mean * z1_invvar) * ave_var * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5 * d0_posterior.mean + 0.5 * d1_posterior.mean",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "ave_std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.stddev + d1_posterior.stddev)",
                            "BinOp"
                        ],
                        [
                            "(0.5 * d0_posterior.variance + 0.5 * d1_posterior.variance) ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_240": {
                "loc": {
                    "value": "ave_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "(d0_posterior.mean * z0_invvar + d1_posterior.mean * z1_invvar) * ave_var * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5 * d0_posterior.mean + 0.5 * d1_posterior.mean",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(ave_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_265": {
                "loc": {
                    "value": "ave_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "(d0_posterior.mean * z0_invvar + d1_posterior.mean * z1_invvar) * ave_var * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5 * d0_posterior.mean + 0.5 * d1_posterior.mean",
                            "BinOp"
                        ]
                    ]
                },
                "scale": {
                    "value": "torch.sqrt(ave_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_326": {
                "variable": {
                    "value": "z0_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "(d0_posterior.mean * z0_invvar + d1_posterior.mean * z1_invvar) * ave_var * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5 * d0_posterior.mean + 0.5 * d1_posterior.mean",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "d0_posterior.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_327": {
                "variable": {
                    "value": "z1_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave_mean",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "0.5 * (d0_posterior.mean + d1_posterior.mean)",
                            "BinOp"
                        ],
                        [
                            "(d0_posterior.mean * z0_invvar + d1_posterior.mean * z1_invvar) * ave_var * 0.5",
                            "BinOp"
                        ],
                        [
                            "0.5 * d0_posterior.mean + 0.5 * d1_posterior.mean",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "d1_posterior.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_328": {
                "variable": {
                    "value": "z0_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave_std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.stddev + d1_posterior.stddev)",
                            "BinOp"
                        ],
                        [
                            "(0.5 * d0_posterior.variance + 0.5 * d1_posterior.variance) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "d0_posterior.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_329": {
                "variable": {
                    "value": "z1_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave_std",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.stddev + d1_posterior.stddev)",
                            "BinOp"
                        ],
                        [
                            "(0.5 * d0_posterior.variance + 0.5 * d1_posterior.variance) ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "d1_posterior.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_332": {
                "variable": {
                    "value": "ave_d0_posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z0_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(share_mask, ave_mean, d0_posterior.loc)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "z0_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(share_mask, ave_std, d0_posterior.scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "Normal_333": {
                "variable": {
                    "value": "ave_d1_posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "z1_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(share_mask, ave_mean, d1_posterior.loc)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "z1_std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.where(share_mask, ave_std, d1_posterior.scale)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_143": {
                "input": {
                    "value": "z0 - z1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_240": {
                "input": {
                    "value": "ave_var",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.variance + d1_posterior.variance)",
                            "BinOp"
                        ],
                        [
                            "2 * (z0_invvar + z1_invvar).reciprocal()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_265": {
                "input": {
                    "value": "ave_var",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "0.5 * (d0_posterior.variance + d1_posterior.variance)",
                            "BinOp"
                        ],
                        [
                            "2 * (z0_invvar + z1_invvar).reciprocal()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_132": {
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave_posterior.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "d0_posterior.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_133": {
                "condition": {
                    "value": "share_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.compute_shared_mask_from_posteriors(d0_posterior, d1_posterior, thresh_mode=self.cfg.ada_thresh_mode, ratio=self.cfg.ada_thresh_ratio)",
                            "Call"
                        ],
                        [
                            "z_deltas < z_thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "ave_posterior.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "d1_posterior.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "disent/metrics/_factored_components.py": {
        "torch": {
            "no_grad_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "var_289": {
                "variable": {
                    "value": "axis_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zs_traversal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "zs_traversal.cpu()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_291": {
                "variable": {
                    "value": "axis_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "axis_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.var(zs_traversal, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(axis_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_302": {
                "variable": {
                    "value": "linear_values",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "linear_values",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(linear_values)",
                            "Call"
                        ]
                    ]
                }
            },
            "randint_404": {
                "variable": {
                    "value": "(idxs_a, idxs_p, idxs_n)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "len(xs_traversal)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(3, num_triplets)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "xs_traversal.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_313": {
                "input": {
                    "value": "sorted_vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sorted_vars[:2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sort_327": {
                "input": {
                    "value": "unsorted_values",
                    "type": "Call",
                    "possible_values": [
                        [
                            "_compute_unsorted_axis_values(zs_traversal, use_std=use_std)",
                            "Call"
                        ],
                        [
                            "_compute_unsorted_linear_values(zs_traversal, use_std=use_std)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_350": {
                "tensors": {
                    "value": "[dists_dict[k] for dists_dict in dists_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_354": {
                "tensors": {
                    "value": "[dists_dict[k] for dists_dict in dists_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_400": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_236": {
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_254": {
                "ndarray": {
                    "value": "factors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.gt_data.sample_factors(size=global_subset_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_415": {
                "input": {
                    "value": "zs_traversal[idxs_a, :] - zs_traversal[idxs_p, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_416": {
                "input": {
                    "value": "zs_traversal[idxs_a, :] - zs_traversal[idxs_n, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_417": {
                "input": {
                    "value": "zs_traversal[idxs_a, :] - zs_traversal[idxs_p, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_418": {
                "input": {
                    "value": "zs_traversal[idxs_a, :] - zs_traversal[idxs_n, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_407": {
                "input": {
                    "value": "factors[idxs_a, :] - factors[idxs_p, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_407": {
                "input": {
                    "value": "idxs_a - idxs_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_408": {
                "input": {
                    "value": "factors[idxs_a, :] - factors[idxs_n, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "abs_408": {
                "input": {
                    "value": "idxs_a - idxs_n",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "disent/metrics/_flatness.py": {
        "torch": {
            "tensor_124": {
                "variable": {
                    "value": "factor_sizes",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "factor_sizes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset.gt_data.factor_sizes",
                            "Attribute"
                        ],
                        [
                            "torch.tensor(factor_sizes, device=tensor.device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_127": {
                "variable": {
                    "value": "active_factors",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "factor_sizes - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "as_tuple": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_260": {
                "variable": {
                    "value": "dist_mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, None, ...] - y[None, :, ...]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dist_mat, dim=-1, p=p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ps",
                            "Name"
                        ],
                        [
                            "'fro'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "all_113": {
                "input": {
                    "value": "widths >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_114": {
                "input": {
                    "value": "lengths >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "all_115": {
                "input": {
                    "value": "torch.eq(widths == 0, lengths == 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "all_125": {
                "input": {
                    "value": "factor_sizes >= 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "as_tensor_174": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "get_device(dataset, representation_function)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_262": {
                "input": {
                    "value": "dist_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[:, None, ...] - y[None, :, ...]",
                            "BinOp"
                        ],
                        [
                            "torch.norm(dist_mat, dim=-1, p=p)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "largest",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "filter_inactive_factors(p_fs_measures[1]['fs_ave_widths'], factor_sizes=factor_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_101": {
                "input": {
                    "value": "filter_inactive_factors(p_fs_measures[2]['fs_ave_widths'], factor_sizes=factor_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_102": {
                "input": {
                    "value": "filter_inactive_factors(p_fs_measures[1]['fs_ave_lengths'], factor_sizes=factor_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_103": {
                "input": {
                    "value": "filter_inactive_factors(p_fs_measures[2]['fs_ave_lengths'], factor_sizes=factor_sizes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_115": {
                "input": {
                    "value": "widths == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "other": {
                    "value": "lengths == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "norm_188": {
                "variable": {
                    "value": "deltas_next",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.roll(zs_traversal, -1, dims=0) - zs_traversal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ps",
                            "Name"
                        ],
                        [
                            "'fro'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_189": {
                "variable": {
                    "value": "deltas_prev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.roll(zs_traversal, 1, dims=0) - zs_traversal",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ps",
                            "Name"
                        ],
                        [
                            "'fro'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "topk_192": {
                "variable": {
                    "value": "min_deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "deltas_next",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.norm(torch.roll(zs_traversal, -1, dims=0) - zs_traversal, dim=-1, p=p)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "f_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "largest": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "sorted": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_228": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_240": {
                "tensors": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_152": {
                "data": {
                    "value": "dataset.gt_data.factor_sizes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "fs_ave_widths.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_238": {
                "tensors": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roll_188": {
                "input": {
                    "value": "zs_traversal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encode_all_along_factor(dataset, representation_function, f_idx=f_idx, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roll_189": {
                "input": {
                    "value": "zs_traversal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encode_all_along_factor(dataset, representation_function, f_idx=f_idx, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/model/_base.py": {
        "torch": {}
    },
    "disent/model/ae/_linear.py": {
        "torch": {
            "Sequential_43": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=self.z_size, out_features=int(np.prod(self.x_shape)))",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_45": {
                "in_features": {
                    "value": "int(np.prod(self.x_shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(np.prod(self.x_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Unflatten_59": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "unflattened_size": {
                    "value": "self.x_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "disent/model/ae/_norm_conv64.py": {
        "torch": {
            "Sequential_56": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=C, out_channels=32, kernel_size=4, stride=2, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=self.z_size, out_features=256)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "variable": {
                    "value": "a_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_109": {
                "variable": {
                    "value": "a_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "inplace": {
                    "value": "inplace",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_124": {
                "variable": {
                    "value": "n_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_57": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "1600",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_86": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_87": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Unflatten_88": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "unflattened_size": {
                    "value": "[64, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_89": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_90": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_91": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "InstanceNorm2d_126": {
                "variable": {
                    "value": "n_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "LayerNorm_128": {
                "variable": {
                    "value": "n_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[H, W]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "LayerNorm_130": {
                "variable": {
                    "value": "n_layer",
                    "type": "Variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "[C, H, W]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "disent/model/ae/_vae_conv64.py": {
        "torch": {
            "Sequential_64": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=C, out_channels=32, kernel_size=4, stride=2, padding=2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=self.z_size, out_features=256)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_70": {
                "in_features": {
                    "value": "1600",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_104": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "in_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Unflatten_106": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "unflattened_size": {
                    "value": "[64, 4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_107": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_108": {
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_109": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_109": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_110": {
                "in_channels": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/model/ae/_vae_fc.py": {
        "torch": {
            "Sequential_59": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_90": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(in_features=self.z_size, out_features=1200)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "int(np.prod(x_shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_63": {
                "in_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.z_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_91": {
                "in_features": {
                    "value": "self.z_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_92": {
                "in_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_93": {
                "in_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_94": {
                "in_features": {
                    "value": "1200",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "int(np.prod(self.x_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Unflatten_95": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "unflattened_size": {
                    "value": "self.x_shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/activations.py": {
        "torch": {
            "sigmoid_52": {
                "variable": {
                    "value": "sigmoid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sigmoid_45": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ctx.saved_variables[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "disent/nn/functional/_conv2d.py": {
        "torch": {
            "conv2d_57": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fsignal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "signal.reshape(-1, 1, *signal.shape[2:])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "padding": {
                    "value": "(kernel.size(-2) // 2, kernel.size(-1) // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rfft2_76": {
                "variable": {
                    "value": "f_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "s": {
                    "value": "tuple(padded_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rfft2_77": {
                "variable": {
                    "value": "f_kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kernel[None, None, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "s": {
                    "value": "tuple(padded_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "irfft2_78": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f_signal * f_kernel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "s": {
                    "value": "tuple(padded_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "broadcast_shapes_44": {
                "*shapes": {
                    "value": "signal.shape[:2]",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/functional/_conv2d_kernels.py": {
        "torch": {
            "as_tensor_64": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "sigma",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(sigma, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_65": {
                "variable": {
                    "value": "truncate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "truncate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(truncate, dtype=dtype, device=device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "broadcast_tensors_66": {
                "variable": {
                    "value": "(sigma, truncate)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "sigma",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_95": {
                "variable": {
                    "value": "radius",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(radius, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_99": {
                "variable": {
                    "value": "crange",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.arange(radius_max * 2 + 1, dtype=dtype, device=device) - radius_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_71": {
                "start": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_kernel_size(sigma=sigma, truncate=truncate)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "sigma.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "sigma.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_95": {
                "data": {
                    "value": "radius",
                    "type": "Call",
                    "possible_values": [
                        [
                            "generic_as_int32(truncate * sigma + 0.5)",
                            "Call"
                        ],
                        [
                            "int(generic_max(radius))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.as_tensor(radius, device=device))",
                            "Call"
                        ],
                        [
                            "radius[..., None]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_99": {
                "start": {
                    "value": "radius_max * 2 + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ],
                        [
                            "torch.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "disent/nn/functional/_correlation.py": {
        "torch": {
            "mean_50": {
                "variable": {
                    "value": "Rxx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs[:, :, None] * xs[:, None, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_51": {
                "variable": {
                    "value": "ux",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_68": {
                "variable": {
                    "value": "diag_Kxx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diagonal(Kxx)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_86": {
                "variable": {
                    "value": "rs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diagonal_68": {
                "input": {
                    "value": "Kxx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Rxx - ux[:, None] * ux[None, :]",
                            "BinOp"
                        ],
                        [
                            "torch_cov_matrix(xs)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/nn/functional/_dct.py": {
        "torch": {
            "moveaxis_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "source": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "destination": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "moveaxis_50": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.moveaxis(input, dim, -1)",
                            "Call"
                        ],
                        [
                            "x.reshape(-1, n)",
                            "Call"
                        ],
                        [
                            "input.reshape(*s)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(x, -1, dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(dct)",
                            "Call"
                        ],
                        [
                            "torch_idct(d, dim=dim2)",
                            "Call"
                        ],
                        [
                            "torch_idct(x, dim=dim1)",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "destination": {
                    "value": "dim",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ],
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_evn, v_odd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fft_68": {
                "variable": {
                    "value": "fft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_evn, v_odd], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifft(fft)",
                            "Call"
                        ],
                        [
                            "torch.real(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_98": {
                "variable": {
                    "value": "dct_imag",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[0 * dct_real[:, :1], -dct_real[:, 1:].flip([1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "view_as_complex_103": {
                "variable": {
                    "value": "fft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack([fft_r, fft_i], dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ifft_106": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.fft(v)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(torch.stack([fft_r, fft_i], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "real_107": {
                "variable": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat([v_evn, v_odd], dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.fft.ifft(fft)",
                            "Call"
                        ],
                        [
                            "torch.real(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_110": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dct",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.real(fft) * wr - torch.imag(fft) * wi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "arange_71": {
                "start": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s[dim]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_73": {
                "input": {
                    "value": "k",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(n, dtype=x.dtype, device=x.device) * (-np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(n, dtype=dct.dtype, device=dct.device) * (np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_74": {
                "input": {
                    "value": "k",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(n, dtype=x.dtype, device=x.device) * (-np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(n, dtype=dct.dtype, device=dct.device) * (np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_92": {
                "start": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "s[dim]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dct.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "dct.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_94": {
                "input": {
                    "value": "k",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(n, dtype=x.dtype, device=x.device) * (-np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(n, dtype=dct.dtype, device=dct.device) * (np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_95": {
                "input": {
                    "value": "k",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.arange(n, dtype=x.dtype, device=x.device) * (-np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ],
                        [
                            "torch.arange(n, dtype=dct.dtype, device=dct.device) * (np.pi / (2 * n))",
                            "BinOp"
                        ],
                        [
                            "k[None, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_103": {
                "tensors": {
                    "value": "[fft_r, fft_i]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "real_77": {
                "input": {
                    "value": "fft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.fft(v)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(torch.stack([fft_r, fft_i], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            },
            "imag_77": {
                "input": {
                    "value": "fft",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.fft.fft(v)",
                            "Call"
                        ],
                        [
                            "torch.view_as_complex(torch.stack([fft_r, fft_i], dim=-1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/nn/functional/_mean.py": {
        "torch": {
            "prod_80": {
                "variable": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(xs.shape)[dim]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "amax_74": {
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_89": {
                "input": {
                    "value": "1 / n * torch.sum(torch.log(xs), dim=dim, keepdim=keepdim)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "amin_76": {
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_80": {
                "data": {
                    "value": "xs.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_92": {
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_89": {
                "input": {
                    "value": "torch.log(xs)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_95": {
                "input": {
                    "value": "xs ** p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/functional/_norm.py": {
        "torch": {
            "abs_70": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "amax_75": {
                "input": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(xs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_88": {
                "input": {
                    "value": "xs != 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xs.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(xs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "amin_77": {
                "input": {
                    "value": "xs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.abs(xs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_94": {
                "input": {
                    "value": "xs ** p",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "list(range(xs.ndim))",
                            "Call"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "keepdim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/functional/_other.py": {
        "torch": {
            "isnan_54": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/functional/_pca.py": {
        "torch": {
            "eig_52": {
                "variable": {
                    "value": "(eigenvalues, eigenvectors)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "covariance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / (n - 1) * torch.mm(X.T, X)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(torch.diagflat(scaling), covariance)",
                            "Call"
                        ]
                    ]
                }
            },
            "real_54": {
                "variable": {
                    "value": "components",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigenvectors.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "real_55": {
                "variable": {
                    "value": "explained_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "eigenvalues",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "abs_58": {
                "variable": {
                    "value": "explained_variance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "explained_variance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.real(eigenvalues)",
                            "Call"
                        ],
                        [
                            "torch.abs(explained_variance)",
                            "Call"
                        ],
                        [
                            "torch.mul(s, s) / (n - 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argsort_60": {
                "variable": {
                    "value": "idxs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "explained_variance",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.real(eigenvalues)",
                            "Call"
                        ],
                        [
                            "torch.abs(explained_variance)",
                            "Call"
                        ],
                        [
                            "torch.mul(s, s) / (n - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "svd_76": {
                "variable": {
                    "value": "(u, s, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "X - X.mean(dim=0)",
                            "BinOp"
                        ],
                        [
                            "X - X.mean(dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_49": {
                "variable": {
                    "value": "scaling",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / torch.diagonal(covariance)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_50": {
                "variable": {
                    "value": "covariance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.diagflat(scaling)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "covariance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / (n - 1) * torch.mm(X.T, X)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(torch.diagflat(scaling), covariance)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_47": {
                "input": {
                    "value": "X.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat2": {
                    "value": "X",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "X - X.mean(dim=0)",
                            "BinOp"
                        ],
                        [
                            "X - X.mean(dim=0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mul_80": {
                "input": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diagflat_50": {
                "input": {
                    "value": "scaling",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sqrt(1 / torch.diagonal(covariance))",
                            "Call"
                        ]
                    ]
                }
            },
            "diagonal_49": {
                "input": {
                    "value": "covariance",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1 / (n - 1) * torch.mm(X.T, X)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(torch.diagflat(scaling), covariance)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/nn/functional/_util_generic.py": {
        "torch": {}
    },
    "disent/nn/loss/kl.py": {
        "torch": {}
    },
    "disent/nn/loss/reduction.py": {
        "torch": {
            "flatten_39": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_39": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "flatten_87": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(tensor, start_dim=1)",
                            "Call"
                        ],
                        [
                            "_REDUCTION_FNS[reduction](tensor, dim=-1, dtype=reduction_dtype)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/loss/softsort.py": {
        "torch": {
            "reshape_79": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.moveaxis(tensor, d, -1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, reshape_size)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, moved_shape)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(tensor, -1, d)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_sort(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_rank(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "reshape_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(size_B, size_X)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.moveaxis(tensor, d, -1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, reshape_size)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, moved_shape)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(tensor, -1, d)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_sort(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_rank(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "moved_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor.shape",
                            "Attribute"
                        ]
                    ]
                }
            },
            "moveaxis_76": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.moveaxis(tensor, d, -1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, reshape_size)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, moved_shape)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(tensor, -1, d)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_sort(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_rank(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moved_end_dims",
                            "Name"
                        ],
                        [
                            "moved_end_dims[::-1]",
                            "Subscript"
                        ]
                    ]
                },
                "destination": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "moveaxis_92": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.moveaxis(tensor, d, -1)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, reshape_size)",
                            "Call"
                        ],
                        [
                            "torch.reshape(tensor, moved_shape)",
                            "Call"
                        ],
                        [
                            "torch.moveaxis(tensor, -1, d)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_sort(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_rank(tensor, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "destination": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "moved_end_dims",
                            "Name"
                        ],
                        [
                            "moved_end_dims[::-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "nan_to_num_210": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dims_at_end_2d(pred, dims=dims, return_undo_data=False)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_rank(pred, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ],
                        [
                            "pred - pred.mean(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "pred / pred.norm(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nan_to_num(pred, nan=0.0)",
                            "Call"
                        ]
                    ]
                },
                "nan": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "nan_to_num_211": {
                "variable": {
                    "value": "targ",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targ",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch_dims_at_end_2d(targ, dims=dims, return_undo_data=False)",
                            "Call"
                        ],
                        [
                            "torchsort.soft_rank(targ, regularization=regularization, regularization_strength=regularization_strength)",
                            "Call"
                        ],
                        [
                            "targ - targ.mean(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "targ / targ.norm(dim=-1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "torch.nan_to_num(targ, nan=0.0)",
                            "Call"
                        ]
                    ]
                },
                "nan": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mse_loss_229": {
                "input": {
                    "value": "torch_soft_rank(pred, dims=dims, regularization=regularization, regularization_strength=regularization_strength, leave_dims_at_end=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "torch_soft_rank(targ, dims=dims, regularization=regularization, regularization_strength=regularization_strength, leave_dims_at_end=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "disent/nn/loss/triplet.py": {
        "torch": {
            "norm_50": {
                "variable": {
                    "value": "p_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_51": {
                "variable": {
                    "value": "n_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_74": {
                "variable": {
                    "value": "p_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_75": {
                "variable": {
                    "value": "n_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_76": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / margin_max * (p_dist - n_dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_100": {
                "variable": {
                    "value": "p_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_101": {
                "variable": {
                    "value": "n_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_102": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 + torch.exp(p_dist - n_dist)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_172": {
                "variable": {
                    "value": "p_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_173": {
                "variable": {
                    "value": "n_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_195": {
                "variable": {
                    "value": "p_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pos_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_196": {
                "variable": {
                    "value": "n_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "neg_delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "p": {
                    "value": "p",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_102": {
                "input": {
                    "value": "p_dist - n_dist",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/loss/triplet_mining.py": {
        "torch": {
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_44": {
                "start": {
                    "value": "len(dist_ap)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_52": {
                "start": {
                    "value": "len(semi_hard_mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argsort_60": {
                "input": {
                    "value": "dist_an",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_loss_fn(x_targ[a_idxs], x_targ[n_idxs])",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_74": {
                "input": {
                    "value": "dist_ap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_loss_fn(x_targ[a_idxs], x_targ[p_idxs])",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "argsort_81": {
                "input": {
                    "value": "dist_ap",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pairwise_loss_fn(x_targ[a_idxs], x_targ[p_idxs])",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/nn/modules.py": {
        "torch": {}
    },
    "disent/nn/weights.py": {
        "torch": {}
    },
    "disent/util/__init__.py": {
        "torch": {
            "is_tensor_66": {
                "obj": {
                    "value": "array",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/util/lightning/callbacks/_callback_vis_dists.py": {
        "torch": {
            "no_grad_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_96": {
                "input": {
                    "value": "z_a - z_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_113": {
                "input": {
                    "value": "z_a - z_b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_140": {
                "tensors": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_179": {
                "tensors": {
                    "value": "dists",
                    "type": "Call",
                    "possible_values": [
                        [
                            "dists.detach().cpu().numpy()",
                            "Call"
                        ],
                        [
                            "_collect_dists_subbatches(dists_fn=dists_fn, batch=batch, i_a=i_a, i_b=i_b, batch_size=batch_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_179": {
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/util/lightning/callbacks/_callback_vis_latents.py": {
        "torch": {
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_like_239": {
                "variable": {
                    "value": "zs_logvar",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "zs_mean",
                    "type": "Name",
                    "possible_values": [
                        [
                            "vae.encode(batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_235": {
                "input": {
                    "value": "ds_posterior.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "amin_246": {
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.to(vae.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "amax_247": {
                "input": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch.to(vae.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "disent/util/seeds.py": {
        "torch": {
            "manual_seed_55": {
                "seed": {
                    "value": "long",
                    "type": "Name",
                    "possible_values": [
                        [
                            "777",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "disent/util/visualize/plot.py": {
        "torch": {}
    },
    "disent/util/visualize/vis_img.py": {
        "torch": {
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_168": {
                "variable": {
                    "value": "in_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "in_min",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(in_min, dtype=tensor.dtype, device=tensor.device)",
                            "Call"
                        ],
                        [
                            "np.array((0.0 if in_dtype.is_floating_point else 0.0) if in_min is None else in_min)",
                            "Call"
                        ],
                        [
                            "in_min[None]",
                            "Subscript"
                        ],
                        [
                            "in_min[(...,) + (None,) * r_pad]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_169": {
                "variable": {
                    "value": "in_max",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "in_max",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(in_max, dtype=tensor.dtype, device=tensor.device)",
                            "Call"
                        ],
                        [
                            "np.array((1.0 if in_dtype.is_floating_point else 255.0) if in_max is None else in_max)",
                            "Call"
                        ],
                        [
                            "in_max[None]",
                            "Subscript"
                        ],
                        [
                            "in_max[(...,) + (None,) * r_pad]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_151": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_276": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_124": {
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "tensor.permute(*(i - tensor.ndim for i in range(tensor.ndim - 3)), *transpose_indices)",
                            "Call"
                        ],
                        [
                            "torch_image_normalize_channels(tensor, in_min=in_min, in_max=in_max, channel_dim=out_c_dim, out_dtype=norm_dtype)",
                            "Call"
                        ],
                        [
                            "torch_image_clamp(tensor, clamp_mode=clamp_mode)",
                            "Call"
                        ],
                        [
                            "torch_image_to_dtype(tensor, out_dtype=out_dtype)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(tensor, 3, dim=out_c_dim)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "imin",
                    "type": "Variable",
                    "possible_values": []
                },
                "max": {
                    "value": "imax",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "any_171": {
                "input": {
                    "value": "in_min == in_max",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "any_343": {
                "input": {
                    "value": "torch.isnan(tensor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_142": {
                "input": {
                    "value": "tensor * 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "repeat_interleave_339": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "tensor.permute(*(i - tensor.ndim for i in range(tensor.ndim - 3)), *transpose_indices)",
                            "Call"
                        ],
                        [
                            "torch_image_normalize_channels(tensor, in_min=in_min, in_max=in_max, channel_dim=out_c_dim, out_dtype=norm_dtype)",
                            "Call"
                        ],
                        [
                            "torch_image_clamp(tensor, clamp_mode=clamp_mode)",
                            "Call"
                        ],
                        [
                            "torch_image_to_dtype(tensor, out_dtype=out_dtype)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(tensor, 3, dim=out_c_dim)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "out_c_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_dims.index('C') - len(out_dims)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_343": {
                "input": {
                    "value": "tensor",
                    "type": "Call",
                    "possible_values": [
                        [
                            "tensor.to(out_dtype)",
                            "Call"
                        ],
                        [
                            "tensor.permute(*(i - tensor.ndim for i in range(tensor.ndim - 3)), *transpose_indices)",
                            "Call"
                        ],
                        [
                            "torch_image_normalize_channels(tensor, in_min=in_min, in_max=in_max, channel_dim=out_c_dim, out_dtype=norm_dtype)",
                            "Call"
                        ],
                        [
                            "torch_image_clamp(tensor, clamp_mode=clamp_mode)",
                            "Call"
                        ],
                        [
                            "torch_image_to_dtype(tensor, out_dtype=out_dtype)",
                            "Call"
                        ],
                        [
                            "torch.repeat_interleave(tensor, 3, dim=out_c_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_145": {
                "input": {
                    "value": "tensor.to(out_dtype) / 255",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_373": {
                "ndarray": {
                    "value": "ndarray",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "disent/util/visualize/vis_latents.py": {
        "torch": {
            "stack_149": {
                "variable": {
                    "value": "animations",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "animations",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(animations, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_122": {
                "ndarray": {
                    "value": "z_cycle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z_gen_func(to_numpy(base_z), to_numpy(z_means), to_numpy(z_logvars), z_idx, num_frames)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_146": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z",
                    "type": "Call",
                    "possible_values": [
                        [
                            "make_latent_zs_cycle(z_means[i], z_means, z_logvars, z_idx, num_frames, mode=mode)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(z, device=decoder_device)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "decoder_device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_148": {
                "tensors": {
                    "value": "frames",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "disent/util/visualize/vis_util.py": {
        "torch": {}
    },
    "docs/examples/mnist_example.py": {
        "torch": {
            "DataLoader_27": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(MNIST(data_folder, train=True, download=True, transform=ToImgTensorF32()), sampler=RandomSampler(num_samples=2))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "os.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_28": {
                "variable": {
                    "value": "dataloader_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MNIST(data_folder, train=False, download=True, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "os.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_dataset_loader.py": {
        "torch": {
            "DataLoader_10": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data, sampler=GroundTruthPairOrigSampler(), transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_framework_adagvae.py": {
        "torch": {
            "DataLoader_16": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data, GroundTruthPairOrigSampler(), transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_framework_ae.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_framework_betavae.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_framework_betavae_scheduled.py": {
        "torch": {
            "DataLoader_15": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_framework_train_val.py": {
        "torch": {
            "DataLoader_25": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data_train, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_26": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data_val, transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/overview_metrics.py": {
        "torch": {
            "DataLoader_14": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(data, transform=ToImgTensorF32(), augment=None)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/plotting_examples/plot_dataset_traversal_dists.py": {
        "torch": {
            "stack_72": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_data[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "mse_loss_76": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obs[idxs_a]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "obs[idxs_b]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_76": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "[-3, -2, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_254": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_270": {
                "variable": {
                    "value": "obs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_data[i] for i in indices]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/plotting_examples/save_metric_visualisation.py": {
        "torch": {
            "eye_50": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_65": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_83": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.randint(m, M)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.as_tensor([std_x]), std_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linspace_134": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "-radius",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "radius",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2.25 * max(std_x, std_y) if trunc_sigma is None else trunc_sigma",
                            "IfExp"
                        ]
                    ]
                },
                "steps": {
                    "value": "num_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "meshgrid_135": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-radius, radius, num_points, device=device)",
                            "Call"
                        ],
                        [
                            "tqdm(total=axs.size, desc='generating_plot')",
                            "Call"
                        ]
                    ]
                },
                "indexing": {
                    "value": "p",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.linspace(-radius, radius, num_points, device=device)",
                            "Call"
                        ],
                        [
                            "tqdm(total=axs.size, desc='generating_plot')",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_137": {
                "variable": {
                    "value": "(rx, ry)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "equation": {
                    "value": "dxy,kd->kxy",
                    "type": "Constant",
                    "possible_values": []
                },
                "*operands": {
                    "value": "torch.stack([x, y])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "axis_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_203": {
                "variable": {
                    "value": "linear_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_237": {
                "variable": {
                    "value": "axis_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(all_axis_scores, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_238": {
                "variable": {
                    "value": "linear_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(all_linear_scores, dim=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "full_86": {
                "variable": {
                    "value": "std_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(dims - 1,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "std_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.full((dims - 1,), fill_value=std_y, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "torch.rand(dims - 1, dtype=torch.float32) * (M - m) + m",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_205": {
                "variable": {
                    "value": "all_points",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[h, w, num_points, num_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_73": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_73": {
                "data": {
                    "value": "[[std_x, std_y]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_121": {
                "input": {
                    "value": "-x ** 2 / (2 * s ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_137": {
                "tensors": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_237": {
                "tensors": {
                    "value": "all_axis_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_238": {
                "tensors": {
                    "value": "all_linear_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_91": {
                "data": {
                    "value": "[std_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_89": {
                "*size": {
                    "value": "dims - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "docs/examples/readme_example.py": {
        "torch": {
            "DataLoader_22": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "DisentDataset(dataset=data, sampler=SingleSampler(), transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "os.cpu_count()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment/run.py": {
        "torch": {
            "is_available_85": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "experiment/util/hydra_data.py": {
        "torch": {}
    },
    "tests/test_frameworks.py": {
        "torch": {
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DisentDataset(data, DataSampler(), transform=ToImgTensorF32())",
                            "Call"
                        ],
                        [
                            "DisentDataset(data, sampler=RandomSampler(num_samples=2), transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_179": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "DisentDataset(data, DataSampler(), transform=ToImgTensorF32())",
                            "Call"
                        ],
                        [
                            "DisentDataset(data, sampler=RandomSampler(num_samples=2), transform=ToImgTensorF32())",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_201": {
                "input": {
                    "value": "result0a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae0.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result0b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae0.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_207": {
                "input": {
                    "value": "result1a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae1.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result1b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae1.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_213": {
                "input": {
                    "value": "result2a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae2.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result2b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae2.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_216": {
                "input": {
                    "value": "result0a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae0.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result1a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae1.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_217": {
                "input": {
                    "value": "result1a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae1.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "result2a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "adavae2.do_training_step(batch, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_math.py": {
        "torch": {
            "abs_77": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(2, 1000, 3, dtype=torch.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_99": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.randn(2, 1000, 3, dtype=torch.float64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_121": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.moveaxis(xs, 0, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_123": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_125": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.moveaxis(xs, -1, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_160": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_80": {
                "input": {
                    "value": "torch_mean_generalized(xs, p='arithmetic', dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mean(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_81": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=1, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.mean(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_84": {
                "input": {
                    "value": "torch_mean_generalized(xs, p='geometric', dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor(gmean(xs, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_85": {
                "input": {
                    "value": "torch_mean_generalized(xs, p='harmonic', dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor(hmean(xs, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_86": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=0, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor(gmean(xs, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_87": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=-1, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor(hmean(xs, axis=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_88": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor(gmean(xs, axis=None))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_89": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.as_tensor(hmean(xs, axis=None))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_92": {
                "input": {
                    "value": "torch_mean_generalized(xs, p='maximum', dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.amax(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_93": {
                "input": {
                    "value": "torch_mean_generalized(xs, p='minimum', dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.amin(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_94": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=np.inf, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.amax(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_95": {
                "input": {
                    "value": "torch_mean_generalized(xs, p=-np.inf, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.amin(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_104": {
                "input": {
                    "value": "torch_norm(xs, p=1, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=1, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_105": {
                "input": {
                    "value": "torch_norm(xs, p=2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_106": {
                "input": {
                    "value": "torch_norm(xs, p='maximum', dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=inf, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_115": {
                "input": {
                    "value": "torch_dist(xs, p=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_116": {
                "input": {
                    "value": "torch_dist(xs, p='minimum', dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=-inf, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_117": {
                "input": {
                    "value": "torch_dist(xs, p=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_118": {
                "input": {
                    "value": "torch_dist(xs, p='minimum', dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=-inf, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_122": {
                "input": {
                    "value": "torch_norm(xs, p=2, dim=[0, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(ys, ord=2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_124": {
                "input": {
                    "value": "torch_norm(xs, p=1, dim=[-2, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(ys, ord=1, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_126": {
                "input": {
                    "value": "torch_dist(xs, p=0, dim=[0, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(ys, ord=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_129": {
                "input": {
                    "value": "torch_dist(xs, dim=1, p='euclidean')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_norm_euclidean(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_130": {
                "input": {
                    "value": "torch_dist(xs, dim=1, p=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_norm_euclidean(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_131": {
                "input": {
                    "value": "torch_dist(xs, dim=1, p='manhattan')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_norm_manhattan(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_132": {
                "input": {
                    "value": "torch_dist(xs, dim=1, p=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_norm_manhattan(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_133": {
                "input": {
                    "value": "torch_dist(xs, dim=1, p='hamming')",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dist_hamming(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_134": {
                "input": {
                    "value": "torch_dist(xs, dim=1, p=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dist_hamming(xs, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_163": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=0), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_166": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=2), dim=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_167": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=3), dim=3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_170": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=-4), dim=-4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_173": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=-2), dim=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_174": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=-1), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_177": {
                "input": {
                    "value": "torch_dct(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dct(x, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_178": {
                "input": {
                    "value": "torch_idct(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_idct(x, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_181": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct2(torch_dct2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_182": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct2(torch_dct2(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_185": {
                "input": {
                    "value": "torch_dct2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dct2(x, dim1=-1, dim2=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_186": {
                "input": {
                    "value": "torch_dct2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dct2(x, dim1=-2, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_187": {
                "input": {
                    "value": "torch_idct2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_idct2(x, dim1=-1, dim2=-2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_188": {
                "input": {
                    "value": "torch_idct2(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_idct2(x, dim1=-2, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_190": {
                "input": {
                    "value": "torch_dct2(x, dim1=-1, dim2=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dct2(x, dim1=-2, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_191": {
                "input": {
                    "value": "torch_dct2(x, dim1=-1, dim2=-4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dct2(x, dim1=-4, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_192": {
                "input": {
                    "value": "torch_dct2(x, dim1=-4, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_dct2(x, dim1=-1, dim2=-4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_193": {
                "input": {
                    "value": "torch_idct2(x, dim1=-1, dim2=-2)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_idct2(x, dim1=-2, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_194": {
                "input": {
                    "value": "torch_idct2(x, dim1=-1, dim2=-4)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_idct2(x, dim1=-4, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_195": {
                "input": {
                    "value": "torch_idct2(x, dim1=-4, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch_idct2(x, dim1=-1, dim2=-4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "i",
                    "type": "Call",
                    "possible_values": [
                        [
                            [
                                5,
                                255,
                                505,
                                755
                            ],
                            "Call"
                        ],
                        [
                            [
                                1,
                                2,
                                3,
                                4
                            ],
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            [
                                2,
                                27,
                                52,
                                77
                            ],
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "variable": {
                    "value": "np_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.cov(to_numpy(xs), rowvar=False, ddof=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "variable": {
                    "value": "np_cor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.corrcoef(to_numpy(xs), rowvar=False, ddof=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_77": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_80": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_81": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_84": {
                "data": {
                    "value": "gmean(xs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_85": {
                "data": {
                    "value": "hmean(xs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_86": {
                "data": {
                    "value": "gmean(xs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_87": {
                "data": {
                    "value": "hmean(xs, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_88": {
                "data": {
                    "value": "gmean(xs, axis=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_89": {
                "data": {
                    "value": "hmean(xs, axis=None)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "amax_92": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "amin_93": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "amax_94": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "amin_95": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_99": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1000",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_104": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_105": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_106": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "inf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "float('inf')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "allclose_110": {
                "input": {
                    "value": "torch_norm(xs, p=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=0, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_112": {
                "input": {
                    "value": "torch_norm(xs, p='minimum', dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.linalg.norm(xs, ord=-inf, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_115": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_116": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "-inf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_117": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_118": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "-inf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "moveaxis_121": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "destination": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_122": {
                "input": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.moveaxis(xs, 0, -1), start_dim=1, end_dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(xs, start_dim=1, end_dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.moveaxis(xs, -1, 0), start_dim=1, end_dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_124": {
                "input": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.moveaxis(xs, 0, -1), start_dim=1, end_dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(xs, start_dim=1, end_dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.moveaxis(xs, -1, 0), start_dim=1, end_dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "moveaxis_125": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "source": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "destination": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "norm_126": {
                "input": {
                    "value": "ys",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.flatten(torch.moveaxis(xs, 0, -1), start_dim=1, end_dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(xs, start_dim=1, end_dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.flatten(torch.moveaxis(xs, -1, 0), start_dim=1, end_dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "allclose_165": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=1), dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_172": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.randn(128, 3, 64, 32, dtype=torch.float64)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "torch_idct(torch_dct(x, dim=-3), dim=-3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "allclose_72": {
                "input": {
                    "value": "np_cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.cov(to_numpy(xs), rowvar=False, ddof=0)).to(xs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cov",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch_cov_matrix(xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_73": {
                "input": {
                    "value": "np_cor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.corrcoef(to_numpy(xs), rowvar=False, ddof=0)).to(xs.dtype)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "cor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch_corr_matrix(xs)",
                            "Call"
                        ]
                    ]
                }
            },
            "norm_110": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_112": {
                "input": {
                    "value": "xs",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randn(i, j, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ],
                        [
                            "torch.abs(torch.randn(2, 1000, 3, dtype=torch.float64))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "-inf",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "amax_209": {
                "input": {
                    "value": "torch.abs(out_cnv - out_fft)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_209": {
                "input": {
                    "value": "out_cnv - out_fft",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_math_generic.py": {
        "torch": {
            "as_tensor_69": {
                "data": {
                    "value": "[-1.5, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_82": {
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_83": {
                "data": {
                    "value": "[-1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_97": {
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_98": {
                "data": {
                    "value": "[-1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_112": {
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_113": {
                "data": {
                    "value": "[-1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_127": {
                "data": {
                    "value": "[-1, 0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "as_tensor_128": {
                "data": {
                    "value": "[-1.0, 0.0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "all_53": {
                "input": {
                    "value": "input == target",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_metrics.py": {
        "torch": {
            "randn_55": {
                "*size": {
                    "value": "len(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "8",
                            "Constant"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_models.py": {
        "torch": {
            "randn_48": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "*x_shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_to_img.py": {
        "torch": {
            "rand_44": {
                "variable": {
                    "value": "inp_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_58": {
                "variable": {
                    "value": "inp_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "inp_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_138": {
                "variable": {
                    "value": "nchw_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_139": {
                "variable": {
                    "value": "nchw_uint8",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(8, 3, 64, 32)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_141": {
                "variable": {
                    "value": "nhwc_float",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_142": {
                "variable": {
                    "value": "nhwc_uint8",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(8, 64, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_66": {
                "variable": {
                    "value": "stats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out.min().to(torch.float64), out.max().to(torch.float64), out.to(dtype=torch.float64).mean()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_68": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "allclose_69": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_95": {
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_99": {
                "*size": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "16",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_78": {
                "*size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_transform.py": {
        "torch": {
            "randn_64": {
                "*size": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_40": {
                "tensors": {
                    "value": "torch.meshgrid(*(torch.arange(s) + 1 for s in shape))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_40": {
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "meshgrid_40": {
                "*tensors": {
                    "value": "*(torch.arange(s) + 1 for s in shape)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "arange_40": {
                "start": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}