{
    "goldmine/various/discriminate_samples.py": {
        "sklearn": {
            "roc_curve_122": {
                "variable": {
                    "value": "(fpr, tpr, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[valid_idx]",
                            "Subscript"
                        ],
                        [
                            "ys",
                            "variable"
                        ],
                        [
                            "y_test.to(device)",
                            "Call"
                        ],
                        [
                            "y_test.to(cpu_device).detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "yhat_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(x_test)",
                            "Call"
                        ],
                        [
                            "yhat_test.to(cpu_device).detach().numpy()[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "roc_auc_score_123": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ys[valid_idx]",
                            "Subscript"
                        ],
                        [
                            "ys",
                            "variable"
                        ],
                        [
                            "y_test.to(device)",
                            "Call"
                        ],
                        [
                            "y_test.to(cpu_device).detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "yhat_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifier(x_test)",
                            "Call"
                        ],
                        [
                            "yhat_test.to(cpu_device).detach().numpy()[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "device_23": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if run_on_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_24": {
                "variable": {
                    "value": "cpu_device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_32": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i, dtype=dtype) for i in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_33": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.hstack([np.zeros((x1.shape[0],)), np.ones((x2.shape[0],))]).astype(dtype_np)",
                            "Call"
                        ],
                        [
                            "tensor(ys, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_35": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "classifier",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_79": {
                "variable": {
                    "value": "loss_function",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "classifier.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_43": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(xs, ys)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_idx)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TensorDataset(xs, ys)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_111": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_32": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in range(n_hidden_layers)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_73": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_45": {
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[split:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_68": {
                "in_features": {
                    "value": "n_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_inputs if i == 0 else n_units_per_hidden_layer",
                            "IfExp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 if i == n_hidden_layers - 1 else n_units_per_hidden_layer",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_71": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/inference/baseratio.py": {
        "torch": {
            "device_49": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "theta0_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta0, x.shape[0])",
                            "Call"
                        ],
                        [
                            "theta0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_67": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_88": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_42": {
                "variable": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_56": {
                "obj": {
                    "value": "self.regressor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_72": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta1, x.shape[0])",
                            "Call"
                        ],
                        [
                            "theta1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "goldmine/inference/nde.py": {
        "torch": {
            "device_87": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_164": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_165": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_180": {
                "variable": {
                    "value": "theta0_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta0, x.shape[0])",
                            "Call"
                        ],
                        [
                            "theta0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_181": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta1, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_182": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_199": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_200": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_210": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_71": {
                "variable": {
                    "value": "self.maf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_156": {
                "obj": {
                    "value": "self.maf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/inference/scandal_checkpointed.py": {
        "torch": {
            "device_116": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_225": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, z_checkpoints.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_226": {
                "variable": {
                    "value": "z_checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "z_checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor(z_checkpoints).to(self.device, self.dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "z_checkpoints",
                            "Method Argument"
                        ],
                        [
                            "z_checkpoints",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_244": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, z_checkpoints.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_260": {
                "variable": {
                    "value": "theta0_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta0, x.shape[0])",
                            "Call"
                        ],
                        [
                            "theta0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_261": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta1, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_262": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_279": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, z_checkpoints.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_280": {
                "variable": {
                    "value": "x_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_290": {
                "variable": {
                    "value": "theta_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "expand_array_2d(theta, z_checkpoints.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "expand_array_2d(theta, x.shape[0])",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_93": {
                "variable": {
                    "value": "self.step_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_step.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_94": {
                "variable": {
                    "value": "self.global_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_global.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_213": {
                "obj": {
                    "value": "self.global_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_global.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_217": {
                "obj": {
                    "value": "self.step_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "filename + '_step.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/control_variates.py": {
        "torch": {
            "clamp_7": {
                "variable": {
                    "value": "r_true",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(r_true, np.exp(-log_r_clip), np.exp(log_r_clip)).view((-1, 1))",
                            "Call"
                        ],
                        [
                            "r_true",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "np.exp(-log_r_clip)",
                    "type": "Call",
                    "possible_values": []
                },
                "max": {
                    "value": "np.exp(log_r_clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_8": {
                "variable": {
                    "value": "r_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(log_r_pred, -log_r_clip, log_r_clip)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_8": {
                "input": {
                    "value": "log_r_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_r_pred",
                            "Method Argument"
                        ]
                    ]
                },
                "min": {
                    "value": "-log_r_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "log_r_clip",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "goldmine/ml/losses.py": {
        "torch": {
            "exp_16": {
                "variable": {
                    "value": "r_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_r_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_24": {
                "variable": {
                    "value": "r_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_r_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_37": {
                "variable": {
                    "value": "r_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_r_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ],
                        [
                            "log_r_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_8": {
                "input": {
                    "value": "log_p_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MSELoss_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/losses_checkpoint.py": {
        "torch": {
            "MSELoss_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_18": {
                "input": {
                    "value": "log_p_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ],
                        [
                            "log_p_pred",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "goldmine/ml/models/base.py": {
        "torch": {
            "grad_73": {
                "outputs": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_likelihood",
                            "Call"
                        ],
                        [
                            "constant - 0.5 * torch.sum(u ** 2, dim=1) + logdet_dudx",
                            "BinOp"
                        ],
                        [
                            "self.log_likelihood(x, **kwargs)",
                            "Call"
                        ],
                        [
                            "log_likelihood",
                            "Call"
                        ],
                        [
                            "constant - 0.5 * torch.sum(u ** 2, dim=1) + logdet_dudx",
                            "BinOp"
                        ],
                        [
                            "self.log_likelihood(theta, x, **kwargs)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.expand(x.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ],
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(log_likelihood.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_26": {
                "input": {
                    "value": "u ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_58": {
                "input": {
                    "value": "u ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_like_74": {
                "input": {
                    "value": "log_likelihood.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/batch_norm.py": {
        "torch": {
            "zeros_23": {
                "variable": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_35": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self.running_var) * u + self.running_mean",
                            "BinOp"
                        ],
                        [
                            "torch.sqrt(self.running_var) * u + self.running_mean",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_66": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rng.randn(n_samples, self.n_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_48": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var",
                            "Attribute"
                        ],
                        [
                            "torch.mean((x - mean) ** 2, dim=0) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_51": {
                "input": {
                    "value": "torch.log(var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_36": {
                "input": {
                    "value": "(x - mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_51": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.running_var",
                            "Attribute"
                        ],
                        [
                            "torch.mean((x - mean) ** 2, dim=0) + self.eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_59": {
                "input": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_68": {
                "input": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/made.py": {
        "torch": {
            "linear_61": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(self.Mmp * self.Wm)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_62": {
                "variable": {
                    "value": "self.logp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(self.Mmp * self.Wp)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_samples, self.n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "self.Wm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Wm.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "self.bm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bm.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "self.Wp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Wp.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "self.bp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bp.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_167": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(self.Mmp * self.Wm)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_168": {
                "variable": {
                    "value": "self.logp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(self.Mmp * self.Wp)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bp",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_samples, self.n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_216": {
                "variable": {
                    "value": "self.Wx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Wx.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_217": {
                "variable": {
                    "value": "self.Wm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Wm.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_218": {
                "variable": {
                    "value": "self.bm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bm.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_219": {
                "variable": {
                    "value": "self.Wp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.Wp.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.bp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.bp.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rng.randn(n_samples, self.n_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_samples, self.n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_104": {
                "variable": {
                    "value": "self.Ws[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "W.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_105": {
                "variable": {
                    "value": "self.bs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "b.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_183": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rng.randn(n_samples, self.n_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_194": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_samples, self.n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_212": {
                "variable": {
                    "value": "self.Ws[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "W.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_213": {
                "variable": {
                    "value": "self.bs[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "b.to(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "t_61": {
                "input": {
                    "value": "self.Mmp * self.Wm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_62": {
                "input": {
                    "value": "self.Mmp * self.Wp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_65": {
                "input": {
                    "value": "0.5 * self.logp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_68": {
                "input": {
                    "value": "self.logp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "t_167": {
                "input": {
                    "value": "self.Mmp * self.Wm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_168": {
                "input": {
                    "value": "self.Mmp * self.Wp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_171": {
                "input": {
                    "value": "0.5 * self.logp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_174": {
                "input": {
                    "value": "self.logp",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linear_164": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(M * W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.Ms, self.Ws, self.bs)",
                            "Call"
                        ],
                        [
                            "zip(self.Ms[1:], self.Ws[1:], self.bs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_48": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(M * W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.Ms, self.Ws, self.bs)",
                            "Call"
                        ],
                        [
                            "zip(self.Ms[1:], self.Ws[1:], self.bs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_150": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([n_samples, self.n_inputs])",
                            "Call"
                        ],
                        [
                            "x.to(*self.to_args, **self.to_kwargs)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * x + mask * (self.m + torch.exp(torch.clamp(-0.5 * self.logp, -10.0, 10.0)) * u)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros([n_samples, self.n_inputs])",
                            "Call"
                        ],
                        [
                            "x.to(*self.to_args, **self.to_kwargs)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * x + mask * (self.m + torch.exp(torch.clamp(-0.5 * self.logp, -10.0, 10.0)) * u)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(self.Ms[0] * self.Ws[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_164": {
                "input": {
                    "value": "M * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_48": {
                "input": {
                    "value": "M * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_150": {
                "input": {
                    "value": "self.Ms[0] * self.Ws[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "torch.clamp(-0.5 * self.logp, -10.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_200": {
                "input": {
                    "value": "torch.clamp(-0.5 * self.logp, -10.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_92": {
                "input": {
                    "value": "-0.5 * self.logp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_200": {
                "input": {
                    "value": "-0.5 * self.logp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/made_mog.py": {
        "torch": {
            "logsumexp_111": {
                "variable": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_a - 0.5 * u ** 2 + logdet_dudx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_samples, self.n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_93": {
                "input": {
                    "value": "torch.sum(torch.exp(self.loga), dim=2, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rng.randn(n_samples, self.n_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "h.unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.Mmp * self.Wm).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(self.Mmp * self.Wp).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(self.Mmp * self.Wa).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_84": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_88": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "h.unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.Mmp * self.Wm).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(self.Mmp * self.Wp).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(self.Mmp * self.Wa).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_92": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "h.unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.Mmp * self.Wm).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(self.Mmp * self.Wp).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "(self.Mmp * self.Wa).transpose(0, 1).contiguous().unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_93": {
                "input": {
                    "value": "torch.exp(self.loga)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_97": {
                "input": {
                    "value": "0.5 * self.logp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "log_likelihood",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_likelihood",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(log_a - 0.5 * u ** 2 + logdet_dudx, dim=2)",
                            "Call"
                        ],
                        [
                            "constant + torch.sum(log_likelihood, dim=1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[n_samples, self.n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "linear_79": {
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.activation_function(F.linear(theta, torch.t(self.Wx)) + F.linear(x, torch.t(self.Ms[0] * self.Ws[0]), self.bs[0]))",
                            "Call"
                        ],
                        [
                            "self.activation_function(F.linear(h, torch.t(M * W), b))",
                            "Call"
                        ],
                        [
                            "h.unsqueeze(1).unsqueeze(2)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(M * W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.Ms[1:], self.Ws[1:], self.bs[1:])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_93": {
                "input": {
                    "value": "self.loga",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_63": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(2)",
                            "Call"
                        ],
                        [
                            "torch.zeros([n_samples, self.n_inputs])",
                            "Call"
                        ],
                        [
                            "x.to(*self.to_args, **self.to_kwargs)",
                            "Call"
                        ],
                        [
                            "(1.0 - mask) * x + mask * (self.m[:, :, c] + torch.exp(torch.clamp(-0.5 * self.logp[:, :, c], -10.0, 10.0)) * u)",
                            "BinOp"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.t(self.Ms[0] * self.Ws[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bs[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_79": {
                "input": {
                    "value": "M * W",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_63": {
                "input": {
                    "value": "self.Ms[0] * self.Ws[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_147": {
                "input": {
                    "value": "torch.clamp(-0.5 * self.logp[:, :, c], -10.0, 10.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_147": {
                "input": {
                    "value": "-0.5 * self.logp[:, :, c]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/maf.py": {
        "torch": {
            "ModuleList_32": {
                "variable": {
                    "value": "self.mades",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_126": {
                "variable": {
                    "value": "self.mades",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_42": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "rng.randn(n_samples, self.n_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_174": {
                "data": {
                    "value": "rng.randn(n_samples, self.n_inputs)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/maf_mog.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.mades",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_48": {
                "variable": {
                    "value": "self.bns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/masks.py": {
        "torch": {
            "tensor_73": {
                "variable": {
                    "value": "mmp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(degrees[-1][:, np.newaxis] < degrees[0]).astype(np.float)",
                            "Call"
                        ],
                        [
                            "tensor(mmp)",
                            "Call"
                        ]
                    ]
                }
            },
            "ParameterList_87": {
                "variable": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ParameterList_88": {
                "variable": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_127": {
                "variable": {
                    "value": "wx",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_conditionals, n_hiddens[0]) / np.sqrt(n_conditionals + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_69": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(d0[:, np.newaxis] <= d1).astype(np.float)",
                            "Call"
                        ],
                        [
                            "tensor(m)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_93": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n0, n1) / np.sqrt(n0 + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_94": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(np.zeros((n1,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_99": {
                "variable": {
                    "value": "wm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_units[-1], n_inputs) / np.sqrt(n_units[-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "wp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_units[-1], n_inputs) / np.sqrt(n_units[-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_101": {
                "variable": {
                    "value": "bm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(np.zeros((n_inputs,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_102": {
                "variable": {
                    "value": "bp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(np.zeros((n_inputs,)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "wm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_units[-1], n_inputs, n_comps) / np.sqrt(n_units[-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_108": {
                "variable": {
                    "value": "wp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_units[-1], n_inputs, n_comps) / np.sqrt(n_units[-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_109": {
                "variable": {
                    "value": "wa",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_units[-1], n_inputs, n_comps) / np.sqrt(n_units[-1] + 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_110": {
                "variable": {
                    "value": "bm",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_inputs, n_comps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_111": {
                "variable": {
                    "value": "bp",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_inputs, n_comps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "ba",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "tensor(rng.randn(n_inputs, n_comps))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "rng.randn(n_conditionals, n_hiddens[0]) / np.sqrt(n_conditionals + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "rng.randn(n0, n1) / np.sqrt(n0 + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "np.zeros((n1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_99": {
                "data": {
                    "value": "rng.randn(n_units[-1], n_inputs) / np.sqrt(n_units[-1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_100": {
                "data": {
                    "value": "rng.randn(n_units[-1], n_inputs) / np.sqrt(n_units[-1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_101": {
                "data": {
                    "value": "np.zeros((n_inputs,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_102": {
                "data": {
                    "value": "np.zeros((n_inputs,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_107": {
                "data": {
                    "value": "rng.randn(n_units[-1], n_inputs, n_comps) / np.sqrt(n_units[-1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_108": {
                "data": {
                    "value": "rng.randn(n_units[-1], n_inputs, n_comps) / np.sqrt(n_units[-1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_109": {
                "data": {
                    "value": "rng.randn(n_units[-1], n_inputs, n_comps) / np.sqrt(n_units[-1] + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "rng.randn(n_inputs, n_comps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_111": {
                "data": {
                    "value": "rng.randn(n_inputs, n_comps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "rng.randn(n_inputs, n_comps)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/ratio.py": {
        "torch": {
            "ModuleList_23": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "log_r_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "n_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_observables + n_parameters",
                            "BinOp"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_29": {
                "in_features": {
                    "value": "n_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_observables + n_parameters",
                            "BinOp"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "exp_62": {
                "input": {
                    "value": "log_r_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((theta, x), 1)",
                            "Call"
                        ],
                        [
                            "self.activation(log_r_hat)",
                            "Call"
                        ],
                        [
                            "layer(log_r_hat)",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_66": {
                "outputs": {
                    "value": "log_r_hat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((theta, x), 1)",
                            "Call"
                        ],
                        [
                            "self.activation(log_r_hat)",
                            "Call"
                        ],
                        [
                            "layer(log_r_hat)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(log_r_hat.data)",
                    "type": "Call",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_67": {
                "input": {
                    "value": "log_r_hat.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/models/score.py": {
        "torch": {
            "ModuleList_18": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_65": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "t_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta, delta_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "t_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta, z_initial, z_final)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "n_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_observables",
                            "variable"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ],
                        [
                            "n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "2 * n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "n_parameters",
                            "Method Argument"
                        ],
                        [
                            "n_parameters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "in_features": {
                    "value": "n_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_observables",
                            "variable"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ],
                        [
                            "n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "2 * n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "theta.size()[-1]",
                            "Subscript"
                        ],
                        [
                            "n_parameters",
                            "Method Argument"
                        ],
                        [
                            "n_parameters",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_24": {
                "in_features": {
                    "value": "n_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_observables",
                            "variable"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ],
                        [
                            "n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "2 * n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_units",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "in_features": {
                    "value": "n_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_observables",
                            "variable"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ],
                        [
                            "n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "2 * n_latent + n_parameters",
                            "BinOp"
                        ],
                        [
                            "n_hidden_units",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_hidden_units",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "goldmine/ml/trainer.py": {
        "torch": {
            "device_64": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if run_on_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_76": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i, requires_grad=True) for i in thetas]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_19": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor([0.0]) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "tensor_71": {
                "variable": {
                    "value": "pre_loss_transform_coefficients",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "pre_loss_transform_coefficients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(pre_loss_transform_coefficients).to(device, dtype)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_79": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i.astype(np.float)) for i in ys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "r_xzs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in r_xzs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "t_xzs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in t_xzs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_105": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[split:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_106": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:split]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GoldDataset(thetas, xs, ys, r_xzs, t_xzs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GoldDataset(thetas, xs, ys, r_xzs, t_xzs)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "GoldDataset(thetas, xs, ys, r_xzs, t_xzs)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_132": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_76": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_196": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_304": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "data": {
                    "value": "i.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_81": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_83": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__261": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "goldmine/ml/trainer_checkpoint.py": {
        "torch": {
            "device_80": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if run_on_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "stack_88": {
                "variable": {
                    "value": "thetas",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i, requires_grad=True) for i in thetas]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in xs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_20": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor([0.0]) for _ in range(self.n)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_91": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i.astype(np.float)) for i in ys]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "r_xzs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in r_xzs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "t_xzs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in t_xzs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_97": {
                "variable": {
                    "value": "z_checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in z_checkpoints]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_99": {
                "variable": {
                    "value": "r_xz_checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in r_xz_checkpoints]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_101": {
                "variable": {
                    "value": "t_xz_checkpoints",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[tensor(i) for i in t_xz_checkpoints]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_124": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "train_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[split:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SubsetRandomSampler_125": {
                "variable": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "valid_idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "indices[:split]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_127": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CheckpointedGoldDataset(thetas, xs, ys, r_xzs, t_xzs, z_checkpoints, r_xz_checkpoints, t_xz_checkpoints)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(train_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_133": {
                "variable": {
                    "value": "validation_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CheckpointedGoldDataset(thetas, xs, ys, r_xzs, t_xzs, z_checkpoints, r_xz_checkpoints, t_xz_checkpoints)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "validation_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SubsetRandomSampler(valid_idx)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "DataLoader_140": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CheckpointedGoldDataset(thetas, xs, ys, r_xzs, t_xzs, z_checkpoints, r_xz_checkpoints, t_xz_checkpoints)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "run_on_gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "run_on_gpu and torch.cuda.is_available()",
                            "BoolOp"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_159": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "list(model.parameters()) + list(score_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_available_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_161": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_model.parameters()",
                            "Call"
                        ],
                        [
                            "model.parameters()",
                            "Call"
                        ],
                        [
                            "list(model.parameters()) + list(score_model.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "initial_learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_247": {
                "variable": {
                    "value": "that_xv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "that_xv_checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_model.forward_trajectory(theta, z_checkpoints)",
                            "Call"
                        ],
                        [
                            "score_model.forward_trajectory(theta, z_checkpoints)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_350": {
                "variable": {
                    "value": "that_xv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "that_xv_checkpoints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "score_model.forward_trajectory(theta, z_checkpoints)",
                            "Call"
                        ],
                        [
                            "score_model.forward_trajectory(theta, z_checkpoints)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_88": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_89": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_238": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_343": {
                "variable": {
                    "value": "theta1_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_91": {
                "data": {
                    "value": "i.astype(np.float)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_95": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_97": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_99": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_101": {
                "data": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i in enumerate(loss_labels)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ],
                        [
                            "i in enumerate(losses)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__286": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_gradient",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10.0",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "goldmine/various/settings.py": {
        "torch": {}
    },
    "goldmine/various/utils.py": {
        "torch": {
            "any_183": {
                "input": {
                    "value": "torch.isnan(param)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_183": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "any_186": {
                "input": {
                    "value": "torch.isnan(param.grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isnan_186": {
                "input": {
                    "value": "param.grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}