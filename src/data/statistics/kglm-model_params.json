{
    "kglm/commands/evaluate_perplexity.py": {
        "torch": {
            "no_grad_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_115": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "summands",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_116": {
                "variable": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "penalized_summands",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "logsumexp_117": {
                "variable": {
                    "value": "t_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(summands)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_118": {
                "variable": {
                    "value": "p_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tensor(penalized_summands)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/commands/sample.py": {
        "torch": {}
    },
    "kglm/common/testing/kglm_model_test_case.py": {
        "torch": {}
    },
    "kglm/common/typing.py": {
        "torch": {}
    },
    "kglm/data/alias_database.py": {
        "torch": {
            "zeros_131": {
                "variable": {
                    "value": "global_id_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_aliases",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(tokenized_aliases)",
                            "Call"
                        ],
                        [
                            "len(tokenized_aliases)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_alias_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "max((len(tokenized_alias) for tokenized_alias in tokenized_aliases))",
                            "Call"
                        ],
                        [
                            "max((len(tokenized_alias) for tokenized_alias in tokenized_aliases))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "local_id_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self._id_array_lookup[entity]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_154": {
                "variable": {
                    "value": "potential_entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vocab.get_token_index(str(x), 'entity_ids') for x in potential_entities]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/data/fields/sequential_array.py": {
        "torch": {
            "from_numpy_42": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "return_array",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.asarray(np.full(max_shape, self.padding_value), dtype=self._dtype)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "kglm/data/iterators/awd_iterator.py": {
        "torch": {
            "cat_57": {
                "variable": {
                    "value": "big_ass_sequence",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x['tokens']['tokens'] for x in tensor_dicts]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_73": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_75": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/data/iterators/fancy_iterator.py": {
        "torch": {}
    },
    "kglm/data/iterators/split_iterator.py": {
        "torch": {}
    },
    "kglm/models/alias_copynet.py": {
        "torch": {
            "ModuleList_96": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[WeightDrop(rnn, ['weight_hh_l0'], dropout=wdrop) for rnn in rnns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self._fc_generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('tokens')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self._fc_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "bmm_200": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self._fc_copy(encoded_aliases))",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "projected.view(batch_size * sequence_length, -1, num_aliases * alias_length)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shortlist_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_236": {
                "variable": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._fc_copy(encoded_aliases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_243": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded.view(batch_size * sequence_length, 1, -1)",
                            "Call"
                        ],
                        [
                            "current_input",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self._fc_copy(encoded_aliases))",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "projected.view(batch_size * sequence_length, -1, num_aliases * alias_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_271": {
                "variable": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_299": {
                "variable": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs_extended_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_302": {
                "variable": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs_extended_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs_extended_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_309": {
                "variable": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs_source_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_312": {
                "variable": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs_source_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs_source_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_317": {
                "variable": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(penalized_log_probs_source_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_320": {
                "variable": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "generate_log_probs_source_vocab - self._unk_penalty * unks.float()",
                            "BinOp"
                        ],
                        [
                            "torch.cat((penalized_log_probs_source_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(penalized_log_probs_source_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_210": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._fc_mention(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(projected, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "shortlist_mask[i].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LSTM_94": {
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/awd_lstm.py": {
        "torch": {
            "Embedding_82": {
                "variable": {
                    "value": "self.embedder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab.get_vocab_size(namespace='tokens')",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[WeightDrop(rnn, ['weight_hh_l0'], dropout=wdrop) for rnn in rnns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "output_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_size",
                            "Name"
                        ],
                        [
                            "hidden_size",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size(namespace='tokens')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_95": {
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_134": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_135": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/entity_disc.py": {
        "torch": {
            "Dropout_79": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self._entity_type_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self._mention_length_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "max_mention_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_193": {
                "variable": {
                    "value": "entity_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_194": {
                "variable": {
                    "value": "entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_195": {
                "variable": {
                    "value": "mention_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tokens['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "variable": {
                    "value": "entity_type_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "entity_id_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "mention_length_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "hidden.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_softmax_209": {
                "variable": {
                    "value": "entity_type_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_type_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._entity_type_projection(current_hidden[predict_mask])",
                            "Call"
                        ],
                        [
                            "self._entity_type_projection(current_hidden[predict_all])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_222": {
                "variable": {
                    "value": "entity_id_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_id_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_id_prediction_outputs['logits']",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_229": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_hidden[predict_em], predicted_entity_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_231": {
                "variable": {
                    "value": "mention_length_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_length_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._mention_length_projection(concatenated)",
                            "Call"
                        ],
                        [
                            "self._mention_length_projection(concatenated)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_373": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_hidden[predict_em], predicted_entity_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_347": {
                "input": {
                    "value": "entity_type_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._entity_type_projection(current_hidden[predict_mask])",
                            "Call"
                        ],
                        [
                            "self._entity_type_projection(current_hidden[predict_all])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "current_entity_types[predict_all].long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cross_entropy_375": {
                "input": {
                    "value": "mention_length_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._mention_length_projection(concatenated)",
                            "Call"
                        ],
                        [
                            "self._mention_length_projection(concatenated)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "current_mention_lengths[predict_em]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/entity_nlm.py": {
        "torch": {
            "Dropout_86": {
                "variable": {
                    "value": "self._dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_rate",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self._entity_type_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self._mention_length_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "max_mention_length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self._dummy_context_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "F.normalize(torch.randn(1, embedding_dim))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self._entity_output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self._context_output_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self._vocab_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('tokens')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_224": {
                "variable": {
                    "value": "entity_types",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self._state['prev_entity_types'], entity_types)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_225": {
                "variable": {
                    "value": "entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self._state['prev_entity_ids'], entity_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_226": {
                "variable": {
                    "value": "mention_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self._state['prev_mention_lengths'], mention_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_354": {
                "variable": {
                    "value": "_vocab_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vocab_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._vocab_projection(vocab_features)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "next_tokens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tokens['tokens'][:, timestep + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_100": {
                "input": {
                    "value": "torch.randn(1, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_293": {
                "variable": {
                    "value": "_entity_type_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_type_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._entity_type_projection(current_hidden[predict_all])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "next_entity_types[predict_all].long()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_298": {
                "variable": {
                    "value": "entity_type_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_entity_types",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_types[:, timestep + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_100": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_222": {
                "tensors": {
                    "value": "(self._state['prev_tokens'][field], tokens[field])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_315": {
                "variable": {
                    "value": "entity_id_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_entity_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_ids[:, timestep + 1]",
                            "Subscript"
                        ],
                        [
                            "next_entity_ids.clone()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(current_hidden[predict_em], next_entity_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cross_entropy_327": {
                "variable": {
                    "value": "_mention_length_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_length_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._mention_length_projection(concatenated)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "next_mention_lengths[predict_em]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_332": {
                "variable": {
                    "value": "mention_length_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_mention_lengths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mention_lengths[:, timestep + 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/kglm.py": {
        "torch": {
            "ModuleList_102": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[WeightDrop(rnn, ['weight_hh_l0'], dropout=wdrop) for rnn in rnns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self._fc_mention_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self._fc_condense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim + entity_embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_121": {
                "variable": {
                    "value": "self._fc_generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('tokens')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_125": {
                "variable": {
                    "value": "self._fc_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_157": {
                "variable": {
                    "value": "mention_type_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_type_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_mention_type(encoded_token)",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded_token)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_196": {
                "variable": {
                    "value": "raw_entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "entity_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_entity_ids",
                            "Name"
                        ],
                        [
                            "entity_ids['entity_ids']",
                            "Subscript"
                        ],
                        [
                            "torch.zeros_like(source)",
                            "Call"
                        ],
                        [
                            "tail_ids",
                            "Name"
                        ]
                    ]
                }
            },
            "zeros_like_209": {
                "variable": {
                    "value": "parent_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel_sample(new_entity_probs)",
                            "Call"
                        ],
                        [
                            "shortlist_mask.new_zeros(encoded.shape[:-1])",
                            "Call"
                        ],
                        [
                            "shortlist['entity_ids'].gather(1, shortlist_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_210": {
                "variable": {
                    "value": "relations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel_sample(new_entity_probs)",
                            "Call"
                        ],
                        [
                            "shortlist_mask.new_zeros(encoded.shape[:-1])",
                            "Call"
                        ],
                        [
                            "shortlist['entity_ids'].gather(1, shortlist_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_211": {
                "variable": {
                    "value": "derived_entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel_sample(new_entity_probs)",
                            "Call"
                        ],
                        [
                            "shortlist_mask.new_zeros(encoded.shape[:-1])",
                            "Call"
                        ],
                        [
                            "shortlist['entity_ids'].gather(1, shortlist_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_212": {
                "variable": {
                    "value": "derived_raw_entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel_sample(new_entity_probs)",
                            "Call"
                        ],
                        [
                            "shortlist_mask.new_zeros(encoded.shape[:-1])",
                            "Call"
                        ],
                        [
                            "shortlist['entity_ids'].gather(1, shortlist_inds)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_550": {
                "variable": {
                    "value": "(_, mention_type)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_type_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_mention_type(encoded_token)",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded_token)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_568": {
                "variable": {
                    "value": "entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source['tokens']",
                            "Subscript"
                        ],
                        [
                            "source['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_572": {
                "variable": {
                    "value": "raw_entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "source",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "source['tokens']",
                            "Subscript"
                        ],
                        [
                            "source['tokens']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_617": {
                "variable": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_621": {
                "variable": {
                    "value": "score_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_scores, copy_scores), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((generate_scores, copy_scores), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((generate_scores, copy_scores), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_781": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_log_softmax(logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(selection_logits, candidate_mask)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(concatenated_scores, score_mask)",
                            "Call"
                        ],
                        [
                            "self._vocab_logp(generate_scores, copy_scores, alias_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "target_inds.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_781": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_808": {
                "variable": {
                    "value": "selection_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_input",
                            "Name"
                        ],
                        [
                            "self._locked_dropout(encoded_head, self._dropout)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(encoded_relation, self._dropout)",
                            "Call"
                        ],
                        [
                            "encoded.view(batch_size * sequence_length, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "candidate_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_842": {
                "variable": {
                    "value": "(_, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(source)",
                            "Call"
                        ],
                        [
                            "is_parent & non_null",
                            "BinOp"
                        ],
                        [
                            "tail_id.eq(target_id)",
                            "Call"
                        ],
                        [
                            "~parent_ids.eq(0).all(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "flattened.gt(0)",
                            "Call"
                        ],
                        [
                            "kg_mask | bg_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_843": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.unsqueeze(2) + (mask.float() + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_843": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_895": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parent_log_probs + relation_log_probs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_913": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoded, entity_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_935": {
                "variable": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._fc_copy(encoded_aliases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_942": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_input",
                            "Name"
                        ],
                        [
                            "self._locked_dropout(encoded_head, self._dropout)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(encoded_relation, self._dropout)",
                            "Call"
                        ],
                        [
                            "encoded.view(batch_size * sequence_length, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self._fc_copy(encoded_aliases))",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "projected.view(batch_size * sequence_length, -1, num_aliases * alias_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_942": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_962": {
                "variable": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1009": {
                "variable": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs_extended_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_1012": {
                "variable": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs_extended_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs_extended_vocab, dim=1)",
                            "Call"
                        ],
                        [
                            "combined_log_probs_extended_vocab * flattened_mask.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1028": {
                "variable": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs_source_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_1031": {
                "variable": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs_source_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs_source_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_1037": {
                "variable": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(penalized_log_probs_source_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_1040": {
                "variable": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "generate_log_probs_source_vocab - self._unk_penalty * unks.float()",
                            "BinOp"
                        ],
                        [
                            "torch.cat((penalized_log_probs_source_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(penalized_log_probs_source_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_110": {
                "variable": {
                    "value": "self._fc_new_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "entity_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('entity_ids')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_187": {
                "variable": {
                    "value": "new_entity_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded_head + encoded_relation, shortlist)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_230": {
                "variable": {
                    "value": "current_parent_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_entity_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_entity_ids[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_231": {
                "variable": {
                    "value": "current_relations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_entity_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_entity_ids[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_232": {
                "variable": {
                    "value": "current_raw_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_entity_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_entity_ids[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_233": {
                "variable": {
                    "value": "current_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_entity_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "new_entity_ids[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_238": {
                "variable": {
                    "value": "selection_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_encoded_head",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_head[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "candidate_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_371": {
                "variable": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_376": {
                "variable": {
                    "value": "score_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_scores, copy_scores), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((generate_scores, copy_scores), dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat((generate_scores, copy_scores), dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_559": {
                "variable": {
                    "value": "(_, shortlist_inds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(new_entity_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_softmax(new_entity_logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(new_entity_logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_entity_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_564": {
                "variable": {
                    "value": "new_entity_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded_head + encoded_relation, shortlist)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_565": {
                "variable": {
                    "value": "(_, new_entity_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(new_entity_logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_softmax(new_entity_logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(new_entity_logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "F.softmax(new_entity_logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_585": {
                "variable": {
                    "value": "selection_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded_head",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "candidate_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_587": {
                "variable": {
                    "value": "(_, selection_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "selection_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_softmax(selection_logits, candidate_mask)",
                            "Call"
                        ],
                        [
                            "masked_softmax(selection_logits, candidate_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_594": {
                "variable": {
                    "value": "raw_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parent_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(new_entity_ids)",
                            "Call"
                        ],
                        [
                            "parent_ids['entity_ids']",
                            "Subscript"
                        ],
                        [
                            "candidate_ids.gather(-1, selection_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_595": {
                "variable": {
                    "value": "tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "parent_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(new_entity_ids)",
                            "Call"
                        ],
                        [
                            "parent_ids['entity_ids']",
                            "Subscript"
                        ],
                        [
                            "candidate_ids.gather(-1, selection_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_757": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._locked_dropout(encoded, self._dropout)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shortlist_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_780": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mv_869": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "encoded[index[:-1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_871": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_877": {
                "variable": {
                    "value": "target_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relevant_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.masked_select(tail_id.eq(target_id))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_177": {
                "variable": {
                    "value": "shortlist_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(source)",
                            "Call"
                        ],
                        [
                            "is_parent & non_null",
                            "BinOp"
                        ],
                        [
                            "tail_id.eq(target_id)",
                            "Call"
                        ],
                        [
                            "~parent_ids.eq(0).all(dim=-1)",
                            "UnaryOp"
                        ],
                        [
                            "flattened.gt(0)",
                            "Call"
                        ],
                        [
                            "kg_mask | bg_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mv_260": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "current_encoded_relation[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_261": {
                "variable": {
                    "value": "tail_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_262": {
                "variable": {
                    "value": "tail_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_299": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_411": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_412": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_597": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "encoded_relation[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_598": {
                "variable": {
                    "value": "(_, selected_relation)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded_relation[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "LSTM_100": {
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_902": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_903": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_902": {
                "input": {
                    "value": "parent_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._parent_log_probs(encoded_head, entity_ids, parent_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_903": {
                "input": {
                    "value": "relation_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._relation_log_probs(encoded_relation, raw_entity_ids, parent_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/kglm_disc.py": {
        "torch": {
            "ModuleList_99": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[WeightDrop(rnn, ['weight_hh_l0'], dropout=wdrop) for rnn in rnns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self._fc_mention_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_169": {
                "variable": {
                    "value": "mention_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_mention_type(encoded_token)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_203": {
                "variable": {
                    "value": "entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_207": {
                "variable": {
                    "value": "raw_entity_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_214": {
                "variable": {
                    "value": "parent_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target['tokens']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_214": {
                "variable": {
                    "value": "parent_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_476": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_log_softmax(logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "log_probs.view(-1, num_categories)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(selection_logits, candidate_mask)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "target_inds.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_476": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_503": {
                "variable": {
                    "value": "selection_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_input",
                            "Name"
                        ],
                        [
                            "self._locked_dropout(encoded_head, self._dropout)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(encoded_relation, self._dropout)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "candidate_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_537": {
                "variable": {
                    "value": "(_, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_text_field_mask(target).byte()",
                            "Call"
                        ],
                        [
                            "~target_inds.eq(0)",
                            "UnaryOp"
                        ],
                        [
                            "is_parent & non_null",
                            "BinOp"
                        ],
                        [
                            "tail_id.eq(target_id)",
                            "Call"
                        ],
                        [
                            "~parent_ids.eq(0).all(dim=-1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_538": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.unsqueeze(2) + (mask.float() + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_538": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_590": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parent_log_probs + relation_log_probs",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self._fc_new_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "entity_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('entity_ids')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_182": {
                "variable": {
                    "value": "shortlist_inds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mention_type",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "parallel_sample(mention_probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_193": {
                "variable": {
                    "value": "new_entity_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_entity_logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._new_entity_logits(encoded_head + encoded_relation, shortlist)",
                            "Call"
                        ],
                        [
                            "new_entity_logits",
                            "Name"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_238": {
                "variable": {
                    "value": "selection_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_head_encoding",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded_head[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "candidate_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_245": {
                "variable": {
                    "value": "_parent_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_entity_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_ids[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_246": {
                "variable": {
                    "value": "parent_logp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "current_entity_id",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_ids[:, i].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_267": {
                "variable": {
                    "value": "_raw_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_parent_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(current_entity_id)",
                            "Call"
                        ],
                        [
                            "parent_ids.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_267": {
                "variable": {
                    "value": "_raw_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_268": {
                "variable": {
                    "value": "_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_parent_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(current_entity_id)",
                            "Call"
                        ],
                        [
                            "parent_ids.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_268": {
                "variable": {
                    "value": "_tail_ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_449": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._locked_dropout(encoded, self._dropout)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shortlist_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_472": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_relation_encoding[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mv_564": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "encoded[index[:-1]]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_softmax_566": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_relation_encoding[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_572": {
                "variable": {
                    "value": "target_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relevant_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.masked_select(tail_id.eq(target_id))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mv_273": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "relation_embedding",
                    "type": "Variable",
                    "possible_values": []
                },
                "vec": {
                    "value": "current_relation_encoding[index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "softmax_275": {
                "variable": {
                    "value": "tail_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(relation_embedding, current_relation_encoding[index])",
                            "Call"
                        ],
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._new_entity_logits(encoded, shortlist)",
                            "Call"
                        ],
                        [
                            "logits",
                            "Name"
                        ],
                        [
                            "torch.mv(relation_embedding, encoded[index[:-1]])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_277": {
                "variable": {
                    "value": "tail_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_353": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_354": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_97": {
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_596": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_597": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "logsumexp_596": {
                "input": {
                    "value": "parent_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._parent_log_probs(encoded_head, entity_ids, parent_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_597": {
                "input": {
                    "value": "relation_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._relation_log_probs(encoded_relation, raw_entity_ids, parent_ids)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/no_story.py": {
        "torch": {
            "ModuleList_96": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[WeightDrop(rnn, ['weight_hh_l0'], dropout=wdrop) for rnn in rnns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self._fc_mention_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self._fc_condense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim + entity_embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self._fc_generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('tokens')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self._fc_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "token_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_325": {
                "variable": {
                    "value": "selection_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_input",
                            "Name"
                        ],
                        [
                            "self._locked_dropout(encoded_head, self._dropout)",
                            "Call"
                        ],
                        [
                            "encoded.view(batch_size * sequence_length, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "candidate_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_359": {
                "variable": {
                    "value": "(_, index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "~target_inds.eq(0)",
                            "UnaryOp"
                        ],
                        [
                            "~flat_target_inds.eq(0)",
                            "UnaryOp"
                        ],
                        [
                            "is_parent & non_null",
                            "BinOp"
                        ],
                        [
                            "flattened.gt(0)",
                            "Call"
                        ],
                        [
                            "kg_mask | bg_mask",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "gather_360": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "masked_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.unsqueeze(2) + (mask.float() + 1e-45).log()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_360": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_370": {
                "variable": {
                    "value": "concatenated",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(encoded, entity_embeddings)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_392": {
                "variable": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._fc_copy(encoded_aliases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_399": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "current_input",
                            "Name"
                        ],
                        [
                            "self._locked_dropout(encoded_head, self._dropout)",
                            "Call"
                        ],
                        [
                            "encoded.view(batch_size * sequence_length, 1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(self._fc_copy(encoded_aliases))",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "projected.view(batch_size * sequence_length, -1, num_aliases * alias_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_399": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_427": {
                "variable": {
                    "value": "concatenated_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_scores, copy_scores)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_455": {
                "variable": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs_extended_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_458": {
                "variable": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs_extended_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs_extended_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs_extended_vocab, dim=1)",
                            "Call"
                        ],
                        [
                            "combined_log_probs_extended_vocab * flattened_mask.float()",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_474": {
                "variable": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs_source_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_477": {
                "variable": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs_source_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs_source_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_482": {
                "variable": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(penalized_log_probs_source_vocab, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_485": {
                "variable": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penalized_log_probs_source_vocab",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "generate_log_probs_source_vocab - self._unk_penalty * unks.float()",
                            "BinOp"
                        ],
                        [
                            "torch.cat((penalized_log_probs_source_vocab, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(penalized_log_probs_source_vocab, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_104": {
                "variable": {
                    "value": "self._fc_new_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "entity_embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "entity_embedder.get_output_dim()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('entity_ids')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_273": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encodings",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._locked_dropout(encoded, self._dropout)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shortlist_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gather_277": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "masked_log_softmax(logits, shortlist_mask)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(logits, dim=-1)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(selection_logits, candidate_mask)",
                            "Call"
                        ],
                        [
                            "masked_log_softmax(concatenated_scores, score_mask)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "target_inds.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_277": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_294": {
                "variable": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_mention_type(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(encodings, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "self._fc_new_entity(encoded)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_299": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_probs.view(-1, num_categories)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "flat_target_inds.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_299": {
                "variable": {
                    "value": "target_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_167": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_168": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LSTM_94": {
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/models/simplified.py": {
        "torch": {
            "ModuleList_96": {
                "variable": {
                    "value": "self.rnns",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "rnns",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[WeightDrop(rnn, ['weight_hh_l0'], dropout=wdrop) for rnn in rnns]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "Linear_99": {
                "variable": {
                    "value": "self._fc_mention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self._fc_entity",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_107": {
                "variable": {
                    "value": "self._fc_condense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * embedding_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_111": {
                "variable": {
                    "value": "self._fc_generate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab.get_vocab_size('tokens')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self._fc_copy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "token_embedding_dim",
                            "Name"
                        ]
                    ]
                }
            },
            "bmm_198": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self._fc_copy(encoded_aliases))",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "projected.view(batch_size * sequence_length, -1, alias_length)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "shortlist_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_234": {
                "variable": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._fc_copy(encoded_aliases)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_241": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "encoded",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "encoded.view(batch_size * sequence_length, 1, -1)",
                            "Call"
                        ],
                        [
                            "current_input",
                            "Name"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projected",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_entity(encoded)",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self._fc_copy(encoded_aliases))",
                            "Call"
                        ],
                        [
                            "self._locked_dropout(projected, self._dropout)",
                            "Call"
                        ],
                        [
                            "projected.view(batch_size * sequence_length, -1, alias_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_241": {
                "variable": {
                    "value": "copy_scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "combined_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(generate_log_probs, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_300": {
                "variable": {
                    "value": "combined_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combined_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((generate_log_probs, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(combined_log_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "penalized_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(penalized_log_probs, copy_log_probs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_313": {
                "variable": {
                    "value": "penalized_log_probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "penalized_log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "generate_log_probs - self._unk_penalty * unks.float()",
                            "BinOp"
                        ],
                        [
                            "torch.cat((penalized_log_probs, copy_log_probs), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.logsumexp(penalized_log_probs, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_157": {
                "variable": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "h[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_158": {
                "variable": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "c[:, reset, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cross_entropy_208": {
                "input": {
                    "value": "logits[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "self._fc_mention(encoded)",
                            "Call"
                        ],
                        [
                            "torch.bmm(projected, shortlist_embeddings.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight": {
                    "value": "shortlist_mask[i].float()",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_265": {
                "input": {
                    "value": "generate_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._fc_generate(encoded)",
                            "Call"
                        ]
                    ]
                }
            },
            "LSTM_94": {
                "*args": {
                    "value": "input_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/modules/dynamic_embeddings.py": {
        "torch": {
            "Parameter_33": {
                "variable": {
                    "value": "self._initial_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "F.normalize(torch.randn(embedding_dim), dim=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_35": {
                "variable": {
                    "value": "self._distance_scalar",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(1e-06)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self._embedding_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self._delta_projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normalize_96": {
                "variable": {
                    "value": "normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial + noise",
                            "BinOp"
                        ],
                        [
                            "delta * embeddings + (1 - delta) * hidden",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_137": {
                "variable": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden.view(batch_size, 1, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "projected.view(batch_size, -1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_140": {
                "variable": {
                    "value": "delta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "score",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.bmm(hidden.view(batch_size, 1, -1), projected.view(batch_size, -1, 1))",
                            "Call"
                        ],
                        [
                            "score.view(batch_size, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "normalize_143": {
                "variable": {
                    "value": "normalized",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "initial + noise",
                            "BinOp"
                        ],
                        [
                            "delta * embeddings + (1 - delta) * hidden",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "bmm_193": {
                "variable": {
                    "value": "bilinear",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden.clone()[mask]",
                            "Subscript"
                        ],
                        [
                            "hidden[mask].unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "projected_embeddings.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_197": {
                "variable": {
                    "value": "distance_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._distance_scalar * self.last_seen[mask].float()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_204": {
                "variable": {
                    "value": "arange",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self._max_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "num_embeddings.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_215": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bilinear + distance_score",
                            "BinOp"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "target[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_33": {
                "input": {
                    "value": "torch.randn(embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_35": {
                "data": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_like_94": {
                "input": {
                    "value": "initial",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._initial_embedding.repeat((mask.sum(), 1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_33": {
                "*size": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/modules/embed_regularize.py": {
        "torch": {
            "embedding_22": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "words",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "masked_embed_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask * embed.weight",
                            "BinOp"
                        ],
                        [
                            "embed.weight",
                            "Attribute"
                        ],
                        [
                            "scale.expand_as(masked_embed_weight) * masked_embed_weight",
                            "BinOp"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embed.padding_index",
                            "Attribute"
                        ],
                        [
                            "embed.padding_idx",
                            "Attribute"
                        ],
                        [
                            "0",
                            "Constant"
                        ]
                    ]
                },
                "max_norm": {
                    "value": "embed.max_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "norm_type": {
                    "value": "embed.norm_type",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_grad_by_freq": {
                    "value": "embed.scale_grad_by_freq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sparse": {
                    "value": "embed.sparse",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/modules/knowledge_graph_lookup.py": {
        "torch": {}
    },
    "kglm/modules/locked_dropout.py": {
        "torch": {}
    },
    "kglm/modules/recent_entities.py": {
        "torch": {
            "unique_110": {
                "variable": {
                    "value": "unique",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat((ids.view(-1), previous_ids), dim=0)",
                            "Call"
                        ]
                    ]
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "ids",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(ids.view(-1), previous_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/modules/splitcross.py": {
        "torch": {
            "cat_130": {
                "variable": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "linear_132": {
                "variable": {
                    "value": "all_head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "combo",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([split_hiddens[i] for i in range(self.nsplits) if len(split_hiddens[i])])",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_133": {
                "variable": {
                    "value": "softmaxed_all_head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "all_head_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(combo, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.tail_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.tail_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.nsplits - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_39": {
                "variable": {
                    "value": "head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "head_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else weight[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_vectors if head_weight is None else torch.cat([head_weight, self.tail_vectors])",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "head_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ],
                        [
                            "None if end - start == 0 else bias[start:end]",
                            "IfExp"
                        ],
                        [
                            "self.tail_bias if head_bias is None else torch.cat([head_bias, self.tail_bias])",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_softmax_40": {
                "variable": {
                    "value": "softmaxed_head_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "head_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, head_weight, bias=head_bias)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_60": {
                "variable": {
                    "value": "tail_res",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hiddens",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hiddens.view(-1, hiddens.size(2))",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "tail_weight",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "weight[start:end]",
                            "Subscript"
                        ],
                        [
                            "weight[start:end]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "tail_bias",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "bias[start:end]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_65": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tail_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_69": {
                "tensors": {
                    "value": "results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_164": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.nn.functional.log_softmax(tail_res, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(split_targets[idx] - self.splits[idx]).view(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_164": {
                "variable": {
                    "value": "tail_entropy",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.nsplits - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "masked_select_102": {
                "input": {
                    "value": "targets",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "targets.view(-1)",
                            "Call"
                        ]
                    ]
                },
                "mask": {
                    "value": "tmp_mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mask == idx",
                            "Compare"
                        ]
                    ]
                }
            },
            "cat_125": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_126": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_34": {
                "tensors": {
                    "value": "[head_weight, self.tail_vectors]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_35": {
                "tensors": {
                    "value": "[head_bias, self.tail_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_145": {
                "input": {
                    "value": "softmaxed_head_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.log_softmax(head_res, dim=-1)",
                            "Call"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "softmaxed_all_head_res[running_offset:running_offset + len(split_hiddens[idx])]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "split_targets[idx].view(-1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_164": {
                "input": {
                    "value": "tail_res",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.linear(hiddens, tail_weight, bias=tail_bias)",
                            "Call"
                        ],
                        [
                            "self.logprob(weight, bias, split_hiddens[idx], splits=[idx], softmaxed_head_res=softmaxed_head_res)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/modules/weight_drop.py": {
        "torch": {
            "dropout_18": {
                "variable": {
                    "value": "self.module._parameters[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self.module, weight)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dropout_24": {
                "variable": {
                    "value": "self.module._parameters[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, f'{weight}_raw')",
                            "Call"
                        ],
                        [
                            "getattr(self, f'{weight}_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_33": {
                "variable": {
                    "value": "self.module._parameters[weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "raw_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "getattr(self, f'{weight}_raw')",
                            "Call"
                        ],
                        [
                            "getattr(self, f'{weight}_raw')",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "data": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/nn/util.py": {
        "torch": {
            "multinomial_37": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs.view(-1, n_categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_57": {
                "variable": {
                    "value": "pdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logp",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cumsum_58": {
                "variable": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.exp(logp)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_59": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logp.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "logp.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_59": {
                "variable": {
                    "value": "rng",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_61": {
                "variable": {
                    "value": "hack",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logp.shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "logp.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_tensor_17": {
                "obj": {
                    "value": "obj",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "gc.get_objects()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_23": {
                "obj": {
                    "value": "obj.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/predictors/complete_the_sentence.py": {
        "torch": {
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kglm/predictors/kglm.py": {
        "torch": {
            "no_grad_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "kglm/tests/models/awd_lstm_test.py": {
        "torch": {}
    },
    "kglm/tests/models/entity_nlm_test.py": {
        "torch": {}
    },
    "kglm/tests/models/kglm_test.py": {
        "torch": {
            "manual_seed_84": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_86": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/tests/models/no_story_test.py": {
        "torch": {}
    },
    "kglm/tests/modules/test_dynamic_entity_embeddings.py": {
        "torch": {
            "tensor_51": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_57": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dynamic_embedding.embeddings[0, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "randn_76": {
                "variable": {
                    "value": "hidden",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, embedding_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_77": {
                "variable": {
                    "value": "update_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "allclose_58": {
                "input": {
                    "value": "embedding_0",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dynamic_embedding.embeddings[0, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(embedding_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_59": {
                "input": {
                    "value": "embedding_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dynamic_embedding.embeddings[1, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "other": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(embedding_0)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_84": {
                "input": {
                    "value": "original",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dynamic_embedding.embeddings[0, 0].clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "updated",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dynamic_embedding.embeddings[0, 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "kglm/tests/modules/test_knowledge_graph_lookup.py": {
        "torch": {}
    },
    "kglm/tests/modules/test_locked_dropout.py": {
        "torch": {
            "randn_15": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_28": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/tests/modules/test_recent_entities.py": {
        "torch": {
            "tensor_18": {
                "variable": {
                    "value": "entity_ids_t0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 2], [3, 0], [4, 0]], [[1, 0], [0, 0], [2, 0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_23": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "entity_ids_t0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_28": {
                "variable": {
                    "value": "expected",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 1, 2, 3, 4], [0, 1, 2, 0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "variable": {
                    "value": "entity_ids_t0",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[[1, 2], [3, 0], [4, 0]], [[1, 0], [0, 0], [2, 0]]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "entity_ids_t0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_47": {
                "variable": {
                    "value": "expected_3",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "variable": {
                    "value": "expected_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "expected_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "reset",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_68": {
                "variable": {
                    "value": "expected_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/tests/training/nt_asgd_test.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_35": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "y_true",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/training/metrics/perplexity.py": {
        "torch": {
            "log_softmax_41": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_42": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.log_softmax(logits, dim=2)",
                            "Call"
                        ],
                        [
                            "torch.gather(log_p, dim=2, index=labels.unsqueeze(2)).squeeze(2)",
                            "Call"
                        ],
                        [
                            "-F.cross_entropy(logits, labels, reduction='none')",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "labels.unsqueeze(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_42": {
                "variable": {
                    "value": "log_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "numel_48": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_entropy_111": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "numel_122": {
                "input": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/training/nt_asgd.py": {
        "torch": {
            "SGD_27": {
                "variable": {
                    "value": "self._sgd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ASGD_30": {
                "variable": {
                    "value": "self._asgd",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(params)",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "t0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "lambd": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "kglm/training/trainer.py": {
        "torch": {
            "isnan_300": {
                "input": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "output_dict['loss']",
                            "Subscript"
                        ],
                        [
                            "loss + self.model.get_regularization_penalty()",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "self.batch_loss(batch, for_training=True)",
                            "Call"
                        ],
                        [
                            "self.batch_loss(batch, for_training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__309": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self._grad_clipping",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_332": {
                "variable": {
                    "value": "update_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param_updates[name].view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_333": {
                "variable": {
                    "value": "param_norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "param.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_479": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}