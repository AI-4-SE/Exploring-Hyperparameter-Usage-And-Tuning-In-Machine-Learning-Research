{
    "src/corpus/corpus.py": {
        "sklearn": {
            "LabelEncoder_301": {
                "variable": {
                    "value": "self.type_encoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "tensor_325": {
                "variable": {
                    "value": "data_point[sidx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.sidx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_326": {
                "variable": {
                    "value": "data_point[left_chunks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.left_chunks_tokenized",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_327": {
                "variable": {
                    "value": "data_point[right_chunks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.right_chunks_tokenized",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_328": {
                "variable": {
                    "value": "data_point[left_chunk_emb_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.left_chunk_emb_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_329": {
                "variable": {
                    "value": "data_point[right_chunk_emb_ids]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.right_chunk_emb_ids",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_335": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[sum(l) for (l, _) in zip(aligned_input.left_content_mask, aligned_input.left_chunk_ids)]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(ll).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_339": {
                "variable": {
                    "value": "data_point[left_content_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.left_content_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_340": {
                "variable": {
                    "value": "data_point[right_content_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.right_content_mask",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_344": {
                "variable": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "rr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[sum(r) for (r, _) in zip(aligned_input.right_content_mask, aligned_input.right_chunk_ids)]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(rr).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_346": {
                "variable": {
                    "value": "data_point[num_left_chunks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.num_left_chunks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_347": {
                "variable": {
                    "value": "data_point[num_right_chunks]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned_input.num_right_chunks",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_416": {
                "variable": {
                    "value": "data_point[is_aligned]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "np.logical_not(np.any(aligned, axis=1)).astype(np.int)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_417": {
                "variable": {
                    "value": "data_point[aligned]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "aligned",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "set()",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=(self.reader.max_chunks, self.reader.max_chunks))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_418": {
                "variable": {
                    "value": "data_point[scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=(self.reader.max_chunks, self.reader.max_chunks))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_419": {
                "variable": {
                    "value": "data_point[types]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "types",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "set()",
                            "Call"
                        ],
                        [
                            "np.zeros(shape=(self.reader.max_chunks, self.reader.max_chunks))",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_359": {
                "variable": {
                    "value": "lx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.chunk_embedding(lx)",
                            "Call"
                        ],
                        [
                            "torch.mean(lx, 1)",
                            "Call"
                        ],
                        [
                            "self.chunk_embedding(lx)",
                            "Call"
                        ],
                        [
                            "torch.sum(lx * lm.unsqueeze(2), 1) / (torch.sum(lm, 1).unsqueeze(1) + 1e-15)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_362": {
                "variable": {
                    "value": "rx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.chunk_embedding(rx)",
                            "Call"
                        ],
                        [
                            "torch.mean(rx, 1)",
                            "Call"
                        ],
                        [
                            "self.chunk_embedding(rx)",
                            "Call"
                        ],
                        [
                            "torch.sum(rx * rm.unsqueeze(2), 1) / (torch.sum(rm, 1).unsqueeze(1) + 1e-15)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_400": {
                "variable": {
                    "value": "data_point[syn_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "syn_scores",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.zeros(shape=(self.reader.max_chunks, self.reader.max_chunks))",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_331": {
                "data": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_337": {
                "data": {
                    "value": "l",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_422": {
                "data": {
                    "value": "constr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.constr_res.get(str(item_id + 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_422": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_372": {
                "input": {
                    "value": "lm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_point['left_content_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_377": {
                "input": {
                    "value": "rm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data_point['right_content_mask']",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_372": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_377": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/constraints/C1.py": {
        "torch": {
            "zeros_10": {
                "variable": {
                    "value": "rel_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "data_point['left_chunks'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "data_point['right_chunks'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/embed/embedding.py": {
        "torch": {}
    },
    "src/embed/vocab.py": {
        "torch": {}
    },
    "src/model/PointerNetwork.py": {
        "torch": {}
    }
}