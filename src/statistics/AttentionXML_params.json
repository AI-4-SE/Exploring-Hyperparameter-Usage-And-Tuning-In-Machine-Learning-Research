{
    "deepxml/cluster.py": {
        "sklearn": {
            "normalize_27": {
                "variable": {
                    "value": "labels_f",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "csr_matrix(sparse_y.T) @ csc_matrix(sparse_x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normalize_64": {
                "variable": {
                    "value": "centers",
                    "type": "Name",
                    "possible_values": []
                },
                "X": {
                    "value": "np.asarray([np.squeeze(np.asarray(labels_f[l_labels_i].sum(axis=0))), np.squeeze(np.asarray(labels_f[r_labels_i].sum(axis=0)))])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "deepxml/data_utils.py": {
        "sklearn": {
            "MultiLabelBinarizer_78": {
                "variable": {
                    "value": "mlb",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_svmlight_file_85": {
                "variable": {
                    "value": "(sparse_x, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "feature_file",
                    "type": "Name",
                    "possible_values": []
                },
                "multilabel": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_86": {
                "X": {
                    "value": "sparse_x",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "deepxml/evaluation.py": {
        "sklearn": {
            "MultiLabelBinarizer_30": {
                "variable": {
                    "value": "mlb",
                    "type": "Name",
                    "possible_values": []
                },
                "classes": {
                    "value": "classes",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiLabelBinarizer_33": {
                "variable": {
                    "value": "mlb",
                    "type": "Name",
                    "possible_values": []
                },
                "classes": {
                    "value": "range(targets.shape[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MultiLabelBinarizer_36": {
                "variable": {
                    "value": "mlb",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "evaluation.py": {
        "sklearn": {
            "MultiLabelBinarizer_27": {
                "variable": {
                    "value": "mlb",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse_output": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "sklearn": {
            "train_test_split_44": {
                "variable": {
                    "value": "(train_x, valid_x, train_labels, valid_labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "train_x",
                    "type": null,
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "train_labels",
                    "type": null,
                    "possible_values": []
                },
                "test_size": {
                    "value": "data_cnf['valid']['size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_cnf['valid'].get('random_state', 1240)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_58": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(train_x, train_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['train']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_60": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(valid_x, valid_y, training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['valid']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(test_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['predict']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "deepxml/dataset.py": {
        "torch": {}
    },
    "deepxml/models.py": {
        "torch": {
            "DataParallel_32": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "network(**kwargs).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_33": {
                "variable": {
                    "value": "self.loss_fn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_146": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "{'Network': self.network.module, 'AttentionWeights': self.attn_weights}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "topk_52": {
                "variable": {
                    "value": "(scores, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self.model(data_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_93": {
                "obj": {
                    "value": "self.model.module.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__101": {
                "variable": {
                    "value": "total_norm",
                    "type": "Name",
                    "possible_values": []
                },
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_norm * self.gradient_clip_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.network(data_x, candidates=candidates, attn_weights=self.attn_weights)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "topk_165": {
                "variable": {
                    "value": "(scores, labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores * group_scores.cuda()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "k": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "5",
                            "MethodArgument"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_181": {
                "obj": {
                    "value": "self.model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_96": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_184": {
                "f": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_53": {
                "input": {
                    "value": "scores",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.model(train_x)",
                            "Call"
                        ],
                        [
                            "self.network(train_x, candidates=candidates, attn_weights=self.attn_weights)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.network(data_x, candidates=candidates, attn_weights=self.attn_weights))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deepxml/modules.py": {
        "torch": {
            "Embedding_30": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "padding_idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "_weight": {
                    "value": "torch.from_numpy(emb_init).float() if emb_init is not None else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LSTM_48": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_size",
                    "type": null,
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.init_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(2 * 2 * layers_num, 1, hidden_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_50": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "argsort_56": {
                "variable": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "lengths",
                    "type": "Name",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_57": {
                "variable": {
                    "value": "packed_inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "lengths": {
                    "value": "lengths[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_58": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "self.lstm(packed_inputs, (hidden_init, cell_init))[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "labels_num",
                    "type": "Name",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_73": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(masks, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_75": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attention(inputs).transpose(1, 2).masked_fill(1.0 - masks, -np.inf)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, -1)",
                            "Call"
                        ],
                        [
                            "(attn_weights @ attn_inputs).masked_fill(1.0 - masks, -np.inf)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self.emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Embedding(size, hidden_size, sparse=True).cuda(device_ids[i]) for (i, size) in enumerate(self.group))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "variable": {
                    "value": "outputs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*inputs.size()",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "inputs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_119": {
                "variable": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "masks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.unsqueeze(masks, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(masks, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_123": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.attention(inputs).transpose(1, 2).masked_fill(1.0 - masks, -np.inf)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, -1)",
                            "Call"
                        ],
                        [
                            "(attn_weights @ attn_inputs).masked_fill(1.0 - masks, -np.inf)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_133": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "(nn.Linear(in_s, out_s) for (in_s, out_s) in zip(linear_size[:-1], linear_size[1:]))",
                    "type": "GeneratorExp",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "linear_size[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Embedding_115": {
                "variable": {
                    "value": "self.attention",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "labels_num + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "linear_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "linear(linear_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "input": {
                    "value": "self.output(linear_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_49": {
                "*size": {
                    "value": "2 * 2 * layers_num",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "no_grad_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "argsort_60": {
                "input": {
                    "value": "idx",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.argsort(lengths, descending=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_91": {
                "num_embeddings": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "Name",
                    "possible_values": []
                },
                "sparse": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_133": {
                "in_features": {
                    "value": "in_s",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_s",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_31": {
                "ndarray": {
                    "value": "emb_init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_count_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "deepxml/networks.py": {
        "torch": {}
    },
    "deepxml/optimizers.py": {
        "torch": {
            "zeros_like_59": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "p.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "deepxml/tree.py": {
        "torch": {
            "DataLoader_68": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(train_x, train_y)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['train'][level]['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_70": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(valid_x, valid_y, training=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['valid']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(train_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['valid']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "XMLDataset(train_x, train_y, labels_num=labels_num, groups=last_groups, group_labels=group_candidates)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['train'][level]['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "valid_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "XMLDataset(valid_x, valid_y, training=False, labels_num=labels_num, groups=last_groups, group_labels=group_labels, group_scores=group_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['valid']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_150": {
                "variable": {
                    "value": "train_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "XMLDataset(train_x, labels_num=labels_num, groups=last_groups, group_labels=group_labels, group_scores=group_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['valid']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_167": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "MultiLabelDataset(test_x)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['predict']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_182": {
                "variable": {
                    "value": "test_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "XMLDataset(test_x, labels_num=labels_num, groups=groups, group_labels=group_labels, group_scores=group_scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "model_cnf['predict']['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_cache_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_cache_176": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}