{
    "data_generator.py": {
        "torch": {
            "DenoisingDataset_18": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.xs": {
                    "value": "xs",
                    "possible_values": []
                },
                "self.sigma": {
                    "value": "sigma",
                    "possible_values": []
                },
                "self.img_size": {
                    "value": "img_size",
                    "possible_values": [
                        [
                            "180",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.random_corp": {
                    "value": "random_corp",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_39": {
                "variable": {
                    "value": "ix",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "iw - self.img_size + 1",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "randint_40": {
                "variable": {
                    "value": "iy",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "ih - self.img_size + 1",
                    "possible_values": []
                },
                "size": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "batch_x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img for img in batch_x]",
                    "possible_values": []
                }
            },
            "stack_55": {
                "variable": {
                    "value": "batch_y",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img for img in batch_y]",
                    "possible_values": []
                }
            },
            "randn_29": {
                "variable": {
                    "value": "noise",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_x.size()",
                    "possible_values": []
                }
            },
            "randn_33": {
                "variable": {
                    "value": "noise",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_x.size()",
                    "possible_values": []
                }
            },
            "flip_44": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "img[:, 0:x, :]",
                            "Subscript"
                        ],
                        [
                            "img[0:y, :, :]",
                            "Subscript"
                        ],
                        [
                            "crop_center(size, size)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=2)",
                            "Call"
                        ],
                        [
                            "cv2.imread(file_name, 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=2)",
                            "Call"
                        ],
                        [
                            "cv2.imread(file_name, cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, (2,))",
                            "Call"
                        ],
                        [
                            "torch.flip(img, (1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(2,)",
                    "possible_values": []
                }
            },
            "flip_45": {
                "variable": {
                    "value": "img",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "possible_values": [
                        [
                            "img[:, 0:x, :]",
                            "Subscript"
                        ],
                        [
                            "img[0:y, :, :]",
                            "Subscript"
                        ],
                        [
                            "crop_center(size, size)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=2)",
                            "Call"
                        ],
                        [
                            "cv2.imread(file_name, 0)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=2)",
                            "Call"
                        ],
                        [
                            "cv2.imread(file_name, cv2.IMREAD_UNCHANGED)",
                            "Call"
                        ],
                        [
                            "torch.flip(img, (2,))",
                            "Call"
                        ],
                        [
                            "torch.flip(img, (1,))",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(1,)",
                    "possible_values": []
                }
            },
            "from_numpy_171": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + np.random.normal(0, hyper_params.sigma / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_173": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "x + np.random.normal(0, hyper_params.sigma / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/GTCNN.py": {
        "torch": {
            "OperationLayer_28": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.C_out": {
                    "value": "C",
                    "possible_values": []
                },
                "self.C_in": {
                    "value": "C",
                    "possible_values": []
                }
            },
            "GTCNN_42": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.NetConfig": {
                    "value": "NetConfig",
                    "possible_values": []
                },
                "ModuleList_51": {
                    "variable": {
                        "value": "self.layers",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_52": {
                    "variable": {
                        "value": "self.input",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=NetConfig['image_channels'], out_channels=self.n_channels, kernel_size=NetConfig['kernel_size'], padding=padding, bias=True)",
                        "possible_values": []
                    }
                },
                "ModuleList_55": {
                    "variable": {
                        "value": "self.layers",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_65": {
                    "variable": {
                        "value": "self.out",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Conv2d(in_channels=self.n_channels, out_channels=NetConfig['image_channels'], kernel_size=NetConfig['kernel_size'], padding=padding, bias=False)",
                        "possible_values": []
                    }
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "NetConfig['image_channels']",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_channels",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "NetConfig['kernel_size']",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "self.n_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "NetConfig['image_channels']",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "NetConfig['kernel_size']",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "models/GTL.py": {
        "torch": {
            "Up_46": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.upmodule": {
                    "value": "upmodule",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ],
                        [
                            "'bilinear'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.concat_type": {
                    "value": "concat_type",
                    "possible_values": [
                        [
                            "'concat'",
                            "MethodArgument"
                        ],
                        [
                            "'concat'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Down_70": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "GTL_83": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.stage_option": {
                    "value": "stage_option",
                    "possible_values": [
                        [
                            "'slim'",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stage": {
                    "value": "stage",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Upsample_55": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_58": {
                "variable": {
                    "value": "self.up",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels // 2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels // 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x2, x1]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "MaxPool2d_74": {
                "variable": {
                    "value": "self.subpixel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.maxpool_conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "double_conv(in_channels, out_channels, num_cbr, use_bnorm)",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "in_channels // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Softmax_90": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "variable": {
                    "value": "self.out",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=n_chan, out_channels=GTL_OC, kernel_size=1, padding=0)",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_41": {
                "in_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sigmoid_92": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.act",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "n_chan",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "GTL_OC",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Sequential_208": {
                "variable": {
                    "value": "self.dconv",
                    "possible_values": []
                },
                "*args": {
                    "value": "double_conv(n_chan, n_chan, num_cbr, use_bnorm)",
                    "possible_values": []
                }
            }
        }
    },
    "models/operations.py": {
        "torch": {
            "Conv_6": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                }
            },
            "Sequential_10": {
                "variable": {
                    "value": "self.op",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=C_in, out_channels=C_out, kernel_size=3, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.op",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=C_in, out_channels=C_out, kernel_size=3, padding=1, bias=True)",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "C_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "C_out",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.0001",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.95",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "C_in",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "C_out",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_16": {
                "inplace": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "test.py": {
        "torch": {
            "load_82": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_dir + model_file_name + '.pth'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:' + str(self.gpuID)",
                    "possible_values": []
                }
            },
            "no_grad_102": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "from_numpy_145": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_147": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "synchronize_148": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_155": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "texture_modulation_demo.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "state_dict",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_dir + self.hyper_params['best_model'] + '.pth'",
                    "possible_values": []
                },
                "map_location": {
                    "value": "'cuda:' + str(self.gpuID)",
                    "possible_values": []
                }
            },
            "manual_seed_78": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "set_device_82": {
                "device": {
                    "value": "self.gpuID",
                    "possible_values": []
                }
            },
            "manual_seed_122": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "set_device_126": {
                "device": {
                    "value": "self.gpuID",
                    "possible_values": []
                }
            },
            "no_grad_83": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_103": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_105": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_135": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_155": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_155": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "y_",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y",
                    "possible_values": [
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ],
                        [
                            "x + np.random.normal(0, self.hyper_params['sigma'] / 255.0, x.shape)",
                            "BinOp"
                        ],
                        [
                            "y.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(y, (2, 0, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_cache_167": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "train_imai.py": {
        "torch": {
            "from_numpy_81": {
                "variable": {
                    "value": "xs",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "xs.transpose((0, 3, 1, 2))",
                    "possible_values": []
                }
            },
            "DataLoader_96": {
                "variable": {
                    "value": "self.dataloader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "DDataset",
                    "possible_values": [
                        [
                            "DenoisingDataset(xs, self.sigma, self.imgSize, self.hyper_params['random_corp'])",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_work",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "DDataset.collate_fn",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batchsize",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MSELoss_137": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "set_device_104": {
                "device": {
                    "value": "gpuID",
                    "possible_values": [
                        [
                            "self.hyper_params['device_ids'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "empty_cache_119": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "manual_seed_126": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "manual_seed_127": {
                "seed": {
                    "value": "self.hyper_params['seed']",
                    "possible_values": []
                }
            },
            "Adam_154": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "self.hyper_params['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "possible_values": []
                }
            },
            "DataParallel_159": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "eval(self.Model_conf.name)(self.Model_conf)",
                            "Call"
                        ],
                        [
                            "model.cuda(gpuID)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=device_ids)",
                            "Call"
                        ],
                        [
                            "model.cuda(gpuID)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "possible_values": [
                        [
                            "self.hyper_params['device_ids']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adam_170": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "possible_values": [
                        [
                            "self.hyper_params['lr']",
                            "Subscript"
                        ]
                    ]
                },
                "betas": {
                    "value": "(0.9, 0.999)",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_181": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "epoch_num",
                    "possible_values": [
                        [
                            "self.hyper_params['epoch_num']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_344": {
                "obj": {
                    "value": "model.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_dir + best_model + '.pth'",
                    "possible_values": []
                }
            },
            "empty_cache_345": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_device_171": {
                "device": {
                    "value": "gpuID",
                    "possible_values": [
                        [
                            "self.hyper_params['device_ids'][0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "MultiStepLR_184": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "scheduler_milestones",
                    "possible_values": [
                        [
                            "self.hyper_params['scheduler_milestones']",
                            "Subscript"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.hyper_params['scheduler_gamma']",
                    "possible_values": []
                }
            },
            "load_208": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "tmp",
                    "possible_values": [
                        [
                            "self.model_save_dir + checkpoint_PATH + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ExponentialLR_187": {
                "variable": {
                    "value": "scheduler",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=lr, betas=(0.9, 0.999))",
                            "Call"
                        ],
                        [
                            "optim.Adam(model.parameters(), lr=lr, betas=(0.9, 0.999))",
                            "Call"
                        ]
                    ]
                },
                "gamma": {
                    "value": "self.hyper_params['scheduler_gamma']",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_286": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "synchronize_295": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_328": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict(), 'amp': amp.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_dir + save_model_name + '.pth'",
                    "possible_values": []
                }
            },
            "save_335": {
                "obj": {
                    "value": "{'epoch': epoch + 1, 'model_state_dict': model.state_dict(), 'optimizer_state_dict': optimizer.state_dict(), 'scheduler_state_dict': scheduler.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "self.model_save_dir + save_model_name + '.pth'",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "from_numpy_66": {
                "ndarray": {
                    "value": "np.ascontiguousarray(img)",
                    "possible_values": []
                }
            },
            "permute_66": {
                "input": {
                    "value": "2",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_66": {
                "input": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    }
}