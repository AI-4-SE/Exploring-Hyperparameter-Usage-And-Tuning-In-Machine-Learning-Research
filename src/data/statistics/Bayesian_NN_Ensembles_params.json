{
    "classification/2d_class_need_03.py": {
        "sklearn": {
            "make_blobs_69": {
                "variable": {
                    "value": "(x_train, y_train)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "centers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "n_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "Session_285": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_286": {
                "logits": {
                    "value": "y_logit_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.array(y_logit_preds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regression/DataGen.py": {
        "sklearn": {
            "fetch_openml_352": {
                "variable": {
                    "value": "ml_data",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "mauna-loa-atmospheric-co2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "regression/main_exp.py": {
        "sklearn": {
            "KNeighborsRegressor_402": {
                "variable": {
                    "value": "sk_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "brute",
                    "type": "str",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "minkowski",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "regression/pymc_HMC_VI.py": {
        "sklearn": {}
    },
    "regression/script_anch_need.py": {
        "sklearn": {
            "KNeighborsRegressor_372": {
                "variable": {
                    "value": "sk_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "brute",
                    "type": "str",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "minkowski",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "regression/script_methods.py": {
        "sklearn": {
            "KNeighborsRegressor_449": {
                "variable": {
                    "value": "sk_model",
                    "type": "variable",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "weights": {
                    "value": "uniform",
                    "type": "str",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "brute",
                    "type": "str",
                    "possible_values": []
                },
                "leaf_size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "metric": {
                    "value": "minkowski",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {}
    },
    "regression/main_converge.py": {
        "tensorflow": {}
    },
    "regression/module_HMC.py": {
        "tensorflow": {
            "Session_222": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_223": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_224": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_104": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_147": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, X_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_67": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_86": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_92": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_93": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h1, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_105": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_125": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_initializer_227": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "maximum_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(X, W_0) + b_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_96": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(X, W_0) + b_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_97": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h1, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(h1, W_1) + b_1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, X_dim, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_156": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, X_dim, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_161": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_162": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_163": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_164": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_72": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_99": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h1, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_126": {
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "shape": {
                    "value": "[self.n_samples, X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_156": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "[self.n_samples, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "shape": {
                    "value": "[self.n_samples, X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_164": {
                "shape": {
                    "value": "[self.n_samples, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_74": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_92": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_93": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_126": {
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_133": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_133": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "[self.hidden_size, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_144": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_144": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_77": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_96": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_97": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_129": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_131": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_136": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_138": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_140": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_142": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_149": {
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_151": {
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_80": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_99": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_100": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_74": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_83": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-self.beta_2 * tf.square(X - W_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_77": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_80": {
                "x": {
                    "value": "tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_80": {
                "x": {
                    "value": "tf.multiply(tf.matmul(X, W_0) + b_0, c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_83": {
                "x": {
                    "value": "X - W_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_80": {
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_80": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regression/module_HMC_orig.py": {
        "tensorflow": {
            "matmul_83": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_102": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_2')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_145": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, X_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_65": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_90": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_91": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h1, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_103": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(h1, W_1) + b_1, a * (tf.matmul(h1, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(h1, W_1) + b_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_2)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(h1, W_1) + b_1, a * (np.matmul(h, W_1) + b_1))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(h1, W_1) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_123": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_68": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(X, W_0) + b_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_94": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(X, W_0) + b_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_95": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h1, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(h1, W_1) + b_1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_152": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, X_dim, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_153": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_155": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_157": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, X_dim, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_158": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_159": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_160": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_161": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, self.hidden_size])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_162": {
                "initial_value": {
                    "value": "tf.zeros([self.n_samples, y_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_70": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_97": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_98": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h1, W_1) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "shape": {
                    "value": "[self.n_samples, X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "shape": {
                    "value": "[self.n_samples, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_157": {
                "shape": {
                    "value": "[self.n_samples, X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_160": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_161": {
                "shape": {
                    "value": "[self.n_samples, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_162": {
                "shape": {
                    "value": "[self.n_samples, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_65": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_72": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_91": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_124": {
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_131": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_131": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "shape": {
                    "value": "[self.hidden_size, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_136": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_142": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_68": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_75": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_94": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_95": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_127": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_129": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_134": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_136": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_138": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_140": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_147": {
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ones_149": {
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_70": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_78": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_97": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_98": {
                "a": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ],
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, self.hidden_size]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_72": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_81": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-self.beta_2 * tf.square(X - W_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_78": {
                "x": {
                    "value": "tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_78": {
                "x": {
                    "value": "tf.multiply(tf.matmul(X, W_0) + b_0, c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_81": {
                "x": {
                    "value": "X - W_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_78": {
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_78": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regression/module_NN_ens.py": {
        "tensorflow": {
            "placeholder_61": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_114": {
                "variable": {
                    "value": "self.l_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_370": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_68": {
                "variable": {
                    "value": "self.layer_1_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "fn_use",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "tp_Lrelu",
                            "variable"
                        ],
                        [
                            "tf.erf",
                            "Attribute"
                        ],
                        [
                            "tp_softplus",
                            "variable"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_1_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_1_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_77": {
                "variable": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_2_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([x_dim, hidden_size], mean=0.0, stddev=anchor_factor * init_stddev_1_w, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[init_stddev_1_b]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * tf.square(self.beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "self.w2_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_size, y_dim], mean=0.0, stddev=anchor_factor * init_stddev_2_w, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "-self.beta_2 * tf.square(self.inputs - self.c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w2_rbf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.l_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_369": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_386": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.layer_2_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "fn_use",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "tp_Lrelu",
                            "variable"
                        ],
                        [
                            "tf.erf",
                            "Attribute"
                        ],
                        [
                            "tp_softplus",
                            "variable"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_2_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_2_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_124": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_135": {
                "input_tensor": {
                    "value": "tf.square(self.y_target - self.output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "tf.square(self.y_target - self.output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "tf.square(self.w1_init - self.layer_1_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "tf.square(self.b1_init - self.layer_1_w.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_244": {
                "input_tensor": {
                    "value": "tf.square(self.w2_init - self.layer_2_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_245": {
                "input_tensor": {
                    "value": "tf.square(self.b2_init - self.layer_2_w.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "tf.square(self.w3_init - self.output_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_93": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_126": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_135": {
                "x": {
                    "value": "self.y_target - self.output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "self.y_target - self.output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "tf.square(self.w1_init - self.layer_1_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "input_tensor": {
                    "value": "tf.square(self.b1_init - self.layer_1_w.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "tf.square(self.w2_init - self.output_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "tf.square(self.w1_init - self.c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_192": {
                "input_tensor": {
                    "value": "tf.square(self.b1_init - self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.square(self.w2_init - self.w2_rbf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_242": {
                "x": {
                    "value": "self.w1_init - self.layer_1_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_243": {
                "x": {
                    "value": "self.b1_init - self.layer_1_w.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_244": {
                "x": {
                    "value": "self.w2_init - self.layer_2_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_245": {
                "x": {
                    "value": "self.b2_init - self.layer_2_w.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_246": {
                "x": {
                    "value": "self.w3_init - self.output_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_70": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_1_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_71": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_1_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_79": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_2_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_101": {
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_104": {
                "x": {
                    "value": "self.inputs - self.c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_128": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_135": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_137": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_187": {
                "x": {
                    "value": "self.w1_init - self.layer_1_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_188": {
                "x": {
                    "value": "self.b1_init - self.layer_1_w.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "self.w2_init - self.output_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_191": {
                "x": {
                    "value": "self.w1_init - self.c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_192": {
                "x": {
                    "value": "self.b1_init - self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_193": {
                "x": {
                    "value": "self.w2_init - self.w2_rbf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_387": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_390": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for (v, f) in zip(global_vars, is_not_initialized) if not f]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "maximum_41": {
                "x": {
                    "value": "a * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_88": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_2_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_89": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_2_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_130": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_196": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_249": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_51": {
                "x": {
                    "value": "tf.log(tf.exp(tf.multiply(x, c)) + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "float"
                        ]
                    ]
                }
            },
            "log_51": {
                "x": {
                    "value": "tf.exp(tf.multiply(x, c)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_51": {
                "x": {
                    "value": "tf.multiply(x, c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_51": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    },
    "regression/module_VI.py": {
        "tensorflow": {
            "placeholder_104": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n, X_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reset_default_graph_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_74": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([self.hidden_size, y_dim]), scale=init_stddev_1_w * tf.ones([self.hidden_size, y_dim]), name='W_1')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "tensor": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "tf.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.matmul(X, W_0) + b_0, a * (tf.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "tf.erf(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.tanh(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(tf.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "tf.divide(tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1), c)",
                            "Call"
                        ],
                        [
                            "tf.exp(-self.beta_2 * tf.square(X - W_0))",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, 0)",
                            "Call"
                        ],
                        [
                            "np.matmul(h, W_1)",
                            "Call"
                        ],
                        [
                            "np.maximum(np.matmul(X, W_0) + b_0, a * (np.matmul(X, W_0) + b_0))",
                            "Call"
                        ],
                        [
                            "erf(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.log(1 + np.exp(self.c * (np.matmul(X, W_0) + b_0))) / self.c",
                            "BinOp"
                        ],
                        [
                            "np.tanh(np.matmul(X, W_0) + b_0)",
                            "Call"
                        ],
                        [
                            "np.exp(-self.beta_2 * np.square(X - W_0))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_135": {
                "values": {
                    "value": "[neural_network(tf.cast(X_pred, dtype=tf.float32), self.qW_0.sample(), self.qW_1.sample(), self.qb_0.sample(), self.qb_1.sample()) for _ in range(self.n_predict)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "maximum_59": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "a * (tf.matmul(X, W_0) + b_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_102": {
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_108": {
                "name": {
                    "value": "qW_0/loc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_109": {
                "features": {
                    "value": "np.log(np.exp(init_stddev_0_w) - 1) * tf.get_variable('qW_0/scale', [X_dim, self.hidden_size], initializer=tf.ones_initializer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_110": {
                "name": {
                    "value": "qW_1/loc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_111": {
                "features": {
                    "value": "np.log(np.exp(init_stddev_1_w) - 1) * tf.get_variable('qW_1/scale', [self.hidden_size, y_dim], initializer=tf.ones_initializer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_112": {
                "name": {
                    "value": "qb_0/loc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_113": {
                "features": {
                    "value": "np.log(np.exp(init_stddev_0_b) - 1) * tf.get_variable('qb_0/scale', [self.hidden_size], initializer=tf.ones_initializer)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_114": {
                "name": {
                    "value": "qb_1/loc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_115": {
                "features": {
                    "value": "tf.get_variable('qb_1/scale', [y_dim], initializer=tf.ones_initializer)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "erf_61": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_96": {
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_98": {
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_100": {
                "shape": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_105": {
                "shape": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X_train.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_115": {
                "name": {
                    "value": "qb_1/scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_56": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_63": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_109": {
                "name": {
                    "value": "qW_0/scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[X_dim, self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_111": {
                "name": {
                    "value": "qW_1/scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size, y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_113": {
                "name": {
                    "value": "qb_0/scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_135": {
                "x": {
                    "value": "X_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_59": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_66": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_61": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "divide_69": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.log(tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_63": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_72": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-self.beta_2 * tf.square(X - W_0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_66": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            },
            "log_69": {
                "x": {
                    "value": "tf.exp(tf.multiply(tf.matmul(X, W_0) + b_0, c)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_69": {
                "x": {
                    "value": "tf.multiply(tf.matmul(X, W_0) + b_0, c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_72": {
                "x": {
                    "value": "X - W_0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "multiply_69": {
                "x": {
                    "value": "tf.matmul(X, W_0) + b_0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [n, X_dim], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Normal(loc=tf.zeros([X_dim, self.hidden_size]), scale=init_stddev_0_w * tf.ones([X_dim, self.hidden_size]), name='W_0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regression/module_gp.py": {
        "tensorflow": {
            "Session_168": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_171": {
                "variable": {
                    "value": "tf_inputs_X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "tf_inputs_X2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, X.shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "X2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "acos_178": {
                "variable": {
                    "value": "tf_theta",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf_k_x_x2 / tf.sqrt(tf_k_x_x * tf_k_x2_x2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_189": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_174": {
                "a": {
                    "value": "tf_inputs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, X.shape[1]], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf_inputs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, X.shape[1]], name='X')",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_175": {
                "a": {
                    "value": "tf_inputs_X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, X.shape[1]], name='X2')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf_inputs_X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, X.shape[1]], name='X2')",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "a": {
                    "value": "tf_inputs_X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, X.shape[1]], name='X')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf_inputs_X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, X.shape[1]], name='X2')",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "x": {
                    "value": "tf_k_x_x * tf_k_x2_x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_183": {
                "x": {
                    "value": "tf_k_x_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.b_0_var + self.w_0_var * tf.matmul(tf_inputs_X, tf_inputs_X, transpose_b=True)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_183": {
                "x": {
                    "value": "tf_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.acos(tf_k_x_x2 / tf.sqrt(tf_k_x_x * tf_k_x2_x2))",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_183": {
                "x": {
                    "value": "tf_theta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.acos(tf_k_x_x2 / tf.sqrt(tf_k_x_x * tf_k_x2_x2))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "regression/module_last_layer.py": {
        "tensorflow": {
            "placeholder_61": {
                "variable": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, x_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "inputs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_62": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, y_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_111": {
                "variable": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_114": {
                "variable": {
                    "value": "self.l_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "20",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "self.decay_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_402": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_68": {
                "variable": {
                    "value": "self.layer_1_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "fn_use",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "tp_Lrelu",
                            "variable"
                        ],
                        [
                            "tf.erf",
                            "Attribute"
                        ],
                        [
                            "tp_softplus",
                            "variable"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_1_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_1_b)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dense_77": {
                "variable": {
                    "value": "self.output_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "y_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_2_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_99": {
                "variable": {
                    "value": "self.c",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([x_dim, hidden_size], mean=0.0, stddev=anchor_factor * init_stddev_1_w, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "[init_stddev_1_b]",
                    "type": "List",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_101": {
                "variable": {
                    "value": "self.beta_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * tf.square(self.beta)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Variable_102": {
                "variable": {
                    "value": "self.w2_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([hidden_size, y_dim], mean=0.0, stddev=anchor_factor * init_stddev_2_w, dtype=tf.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_104": {
                "variable": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "-self.beta_2 * tf.square(self.inputs - self.c)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w2_rbf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_122": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.l_rate_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reset_default_graph_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_418": {
                "variable": {
                    "value": "global_vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "dropout_75": {
                "variable": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layer_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_86": {
                "variable": {
                    "value": "self.layer_2_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "fn_use",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh",
                            "Attribute"
                        ],
                        [
                            "tf.nn.relu",
                            "Attribute"
                        ],
                        [
                            "tp_Lrelu",
                            "variable"
                        ],
                        [
                            "tf.erf",
                            "Attribute"
                        ],
                        [
                            "tp_softplus",
                            "variable"
                        ]
                    ]
                },
                "kernel_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_2_w)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias_initializer": {
                    "value": "tf.random_normal_initializer(mean=0.0, stddev=anchor_factor * init_stddev_2_w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_106": {
                "variable": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layer_1_rbf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_124": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_135": {
                "input_tensor": {
                    "value": "tf.square(self.y_target - self.output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_137": {
                "input_tensor": {
                    "value": "tf.square(self.y_target - self.output)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_242": {
                "input_tensor": {
                    "value": "tf.square(self.w1_init - self.layer_1_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_243": {
                "input_tensor": {
                    "value": "tf.square(self.b1_init - self.layer_1_w.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_244": {
                "input_tensor": {
                    "value": "tf.square(self.w2_init - self.layer_2_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_245": {
                "input_tensor": {
                    "value": "tf.square(self.b2_init - self.layer_2_w.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_246": {
                "input_tensor": {
                    "value": "tf.square(self.w3_init - self.output_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dropout_93": {
                "variable": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.layer_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AdadeltaOptimizer_126": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "square_135": {
                "x": {
                    "value": "self.y_target - self.output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_137": {
                "x": {
                    "value": "self.y_target - self.output",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "tf.square(self.w1_init - self.layer_1_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_188": {
                "input_tensor": {
                    "value": "tf.square(self.b1_init - self.layer_1_w.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "tf.square(self.w2_init - self.output_w.kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_191": {
                "input_tensor": {
                    "value": "tf.square(self.w1_init - self.c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_192": {
                "input_tensor": {
                    "value": "tf.square(self.b1_init - self.beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_193": {
                "input_tensor": {
                    "value": "tf.square(self.w2_init - self.w2_rbf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_242": {
                "x": {
                    "value": "self.w1_init - self.layer_1_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_243": {
                "x": {
                    "value": "self.b1_init - self.layer_1_w.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_244": {
                "x": {
                    "value": "self.w2_init - self.layer_2_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_245": {
                "x": {
                    "value": "self.b2_init - self.layer_2_w.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_246": {
                "x": {
                    "value": "self.w3_init - self.output_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_70": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_1_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_71": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_1_b",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_79": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_2_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_101": {
                "x": {
                    "value": "self.beta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_104": {
                "x": {
                    "value": "self.inputs - self.c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_128": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_135": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_137": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_187": {
                "x": {
                    "value": "self.w1_init - self.layer_1_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_188": {
                "x": {
                    "value": "self.b1_init - self.layer_1_w.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_189": {
                "x": {
                    "value": "self.w2_init - self.output_w.kernel",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_191": {
                "x": {
                    "value": "self.w1_init - self.c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_192": {
                "x": {
                    "value": "self.b1_init - self.beta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_193": {
                "x": {
                    "value": "self.w2_init - self.w2_rbf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_variable_initialized_419": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "variables_initializer_422": {
                "var_list": {
                    "value": "not_initialized_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for (v, f) in zip(global_vars, is_not_initialized) if not f]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "maximum_41": {
                "x": {
                    "value": "a * x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "random_normal_initializer_88": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_2_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_89": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "anchor_factor * init_stddev_2_w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_130": {
                "variable": {
                    "value": "self.opt_method",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_196": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_249": {
                "input": {
                    "value": "self.inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_type": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_51": {
                "x": {
                    "value": "tf.log(tf.exp(tf.multiply(x, c)) + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "float"
                        ]
                    ]
                }
            },
            "log_51": {
                "x": {
                    "value": "tf.exp(tf.multiply(x, c)) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_51": {
                "x": {
                    "value": "tf.multiply(x, c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_51": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3.0",
                            "float"
                        ]
                    ]
                }
            }
        }
    }
}