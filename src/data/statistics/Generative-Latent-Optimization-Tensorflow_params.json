{
    "download.py": {
        "sklearn": {
            "PCA_20": {
                "variable": {
                    "value": "pca",
                    "type": "variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "evaler.py": {
        "tensorflow": {
            "get_or_create_global_step_71": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "no_op_72": {
                "variable": {
                    "value": "self.step_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "step_no_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_76": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_81": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, gpu_options=tf.GPUOptions(allow_growth=True), device_count={'GPU': 1})",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_84": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Coordinator_108": {
                "variable": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "start_queue_runners_109": {
                "variable": {
                    "value": "threads",
                    "type": "variable",
                    "possible_values": []
                },
                "sess": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "coord": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Coordinator()",
                            "Call"
                        ]
                    ]
                },
                "start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "set_random_seed_74": {
                "seed": {
                    "value": "123",
                    "type": "int",
                    "possible_values": []
                }
            },
            "latest_checkpoint_88": {
                "variable": {
                    "value": "self.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GPUOptions_78": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "global_variables_initializer_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "input_ops.py": {
        "tensorflow": {
            "string_input_producer_45": {
                "variable": {
                    "value": "input_ops[id]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "string_tensor": {
                    "value": "tf.convert_to_tensor(data_id)",
                    "type": "Call",
                    "possible_values": []
                },
                "capacity": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "py_func_59": {
                "variable": {
                    "value": "(input_ops[id], input_ops[image], input_ops[code])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "func": {
                    "value": "load_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "inp": {
                    "value": "[input_ops['id']]",
                    "type": "List",
                    "possible_values": []
                },
                "Tout": {
                    "value": "[tf.string, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "func",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shuffle_batch_74": {
                "variable": {
                    "value": "batch_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * batch_size * num_threads",
                            "BinOp"
                        ]
                    ]
                },
                "min_after_dequeue": {
                    "value": "min_capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(int(capacity * 0.75), 1024)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_82": {
                "variable": {
                    "value": "batch_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "input_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "capacity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * batch_size * num_threads",
                            "BinOp"
                        ]
                    ]
                }
            },
            "device_44": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_44": {
                "name": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'inputs'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "convert_to_tensor_46": {
                "value": {
                    "value": "data_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.ids",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "placeholder_26": {
                "variable": {
                    "value": "self.image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.input_height, self.input_width, self.c_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_31": {
                "variable": {
                    "value": "self.code",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "code",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, self.d_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_36": {
                "variable": {
                    "value": "self.is_train",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "is_train",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_with_default_41": {
                "variable": {
                    "value": "self.is_training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "bool(is_train)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "is_training",
                    "type": "str",
                    "possible_values": []
                }
            },
            "gradients_118": {
                "variable": {
                    "value": "self.z_grad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ys": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_121": {
                "name": {
                    "value": "loss/loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "image_122": {
                "name": {
                    "value": "img/reconstructed",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "image_123": {
                "name": {
                    "value": "img/real",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_64": {
                "variable": {
                    "value": "local_patch",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(ksz, ksz, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_68": {
                "variable": {
                    "value": "pr_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.conv2d(x, local_patch, strides=[1, kst, kst, 1], padding='VALID') for x in tf.split(pred, c, axis=3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_69": {
                "variable": {
                    "value": "pr_var",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.conv2d(tf.square(x), local_patch, strides=[1, kst, kst, 1], padding='VALID') for x in tf.split(pred, c, axis=3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_73": {
                "variable": {
                    "value": "gt_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.conv2d(x, local_patch, strides=[1, kst, kst, 1], padding='VALID') for x in tf.split(gt, c, axis=3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_74": {
                "variable": {
                    "value": "gt_var",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.conv2d(tf.square(x), local_patch, strides=[1, kst, kst, 1], padding='VALID') for x in tf.split(gt, c, axis=3)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_79": {
                "variable": {
                    "value": "local_mean_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(pr_mean - gt_mean)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_80": {
                "variable": {
                    "value": "local_var_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(pr_var - gt_var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.batch_size, 1, 1, d_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_61": {
                "name": {
                    "value": "local_moment_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'g'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_79": {
                "x": {
                    "value": "pr_mean - gt_mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_80": {
                "x": {
                    "value": "pr_var - gt_var",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "conv2d_68": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "local_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((ksz, ksz, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, kst, kst, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "input": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "local_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((ksz, ksz, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, kst, kst, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "local_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((ksz, ksz, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, kst, kst, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_74": {
                "input": {
                    "value": "tf.square(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "local_patch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones((ksz, ksz, 1, 1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, kst, kst, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_68": {
                "value": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.get_shape()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_69": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_69": {
                "value": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.get_shape()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_70": {
                "x": {
                    "value": "pr_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.conv2d(x, local_patch, strides=[1, kst, kst, 1], padding='VALID') for x in tf.split(pred, c, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "pr_mean / ksz ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "split_73": {
                "value": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.get_shape()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_74": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_74": {
                "value": {
                    "value": "gt",
                    "type": "variable",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred.get_shape()[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_75": {
                "x": {
                    "value": "gt_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.nn.conv2d(x, local_patch, strides=[1, kst, kst, 1], padding='VALID') for x in tf.split(gt, c, axis=3)], axis=3)",
                            "Call"
                        ],
                        [
                            "gt_mean / ksz ** 2",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "ops.py": {
        "tensorflow": {
            "abs_19": {
                "variable": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "predictions - labels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_20": {
                "variable": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(predictions - labels)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_89": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size, filter_size, input.get_shape()[3], num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0.0, 0.02)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [p, p], [p, p], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "REFLECT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_92": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [p, p], [p, p], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input.get_shape()[-1], output_shape], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "int(input.get_shape()[2]) * s",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('w', filter_shape, dtype, tf.random_normal_initializer(0.0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride, stride, 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_23": {
                "condition": {
                    "value": "condition",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.less(residual, delta)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "small_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.square(residual)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "large_res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta * residual - 0.5 * tf.square(delta)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_variable_41": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[k_h, k_w, input.get_shape()[-1], output_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [k_h, k_w, input.get_shape()[-1], output_shape], initializer=tf.truncated_normal_initializer(stddev=stddev))",
                            "Call"
                        ],
                        [
                            "int(input.get_shape()[2]) * s",
                            "BinOp"
                        ],
                        [
                            "tf.get_variable('w', filter_shape, dtype, tf.random_normal_initializer(0.0, 0.02))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, s, s, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_shape]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer(0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_48": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.bias_add(_, biases)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "_.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_transpose_59": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "num_outputs": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ],
                        [
                            "deconv_info[0]",
                            "Subscript"
                        ]
                    ]
                },
                "weights_initializer": {
                    "value": "tf.truncated_normal_initializer(stddev=stddev)",
                    "type": "Call",
                    "possible_values": []
                },
                "biases_initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[k, k]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "resize_bilinear_78": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_6": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "where_15": {
                "condition": {
                    "value": "x > 0.0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [p, p], [p, p], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alpha * tf.exp(x) - alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_21": {
                "x": {
                    "value": "residual",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.abs(predictions - labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_40": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_55": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_72": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_89": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.02",
                    "type": "float",
                    "possible_values": []
                }
            },
            "variable_scope_97": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'lrelu'",
                            "Method Argument"
                        ],
                        [
                            "'conv2d'",
                            "Method Argument"
                        ],
                        [
                            "'deconv2d'",
                            "Method Argument"
                        ],
                        [
                            "'bilinear_deconv2d'",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_104": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "residual_conv(input, num_filters, 3, 1, reuse, pad)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out, center=True, scale=True, decay=0.9, is_training=is_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(out)",
                            "Call"
                        ],
                        [
                            "residual_conv(out, num_filters, 3, 1, reuse, pad)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(out, center=True, scale=True, decay=0.9, is_training=is_train, updates_collections=None)",
                            "Call"
                        ]
                    ]
                }
            },
            "relu_113": {
                "features": {
                    "value": "input + out",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_22": {
                "x": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_48": {
                "value": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "activation_fn(_)",
                            "Call"
                        ],
                        [
                            "tf.contrib.layers.batch_norm(_, center=True, scale=True, decay=0.9, is_training=is_train, updates_collections=None)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(input, w, strides=[1, s, s, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tf.nn.bias_add(_, biases), _.get_shape())",
                            "Call"
                        ],
                        [
                            "layers.conv2d_transpose(input, num_outputs=output_shape, weights_initializer=tf.truncated_normal_initializer(stddev=stddev), biases_initializer=tf.zeros_initializer(), kernel_size=[k, k], stride=[s, s], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.image.resize_bilinear(input, [h, w])",
                            "Call"
                        ],
                        [
                            "conv2d(_, output_shape, is_train, k_h=k, s=1, k_w=k, batch_norm=False, activation_fn=None)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', [output_shape], initializer=tf.constant_initializer(0.0))",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_98": {
                "name_or_scope": {
                    "value": "res1",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "res2",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_42": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_46": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_62": {
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_15": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input, [[0, 0], [p, p], [p, p], [0, 0]], 'REFLECT')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "tensorflow": {
            "get_or_create_global_step_51": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "no_op_63": {
                "variable": {
                    "value": "self.check_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "merge_all_78": {
                "variable": {
                    "value": "self.summary_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_80": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                }
            },
            "FileWriter_81": {
                "variable": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Supervisor_85": {
                "variable": {
                    "value": "self.supervisor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.train_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "is_chief": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "saver": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "summary_op": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "summary_writer": {
                    "value": "self.summary_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_summaries_secs": {
                    "value": "300",
                    "type": "int",
                    "possible_values": []
                },
                "save_model_secs": {
                    "value": "self.checkpoint_secs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_96": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "tf.GPUOptions(allow_growth=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 1}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "exponential_decay_54": {
                "variable": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "10000",
                    "type": "int",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "decaying_learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_98": {
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}