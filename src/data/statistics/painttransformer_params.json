{
    "inference/inference.py": {
        "torch": {
            "interpolate_36": {
                "variable": {
                    "value": "meta_brushes_resize",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_brushes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([brush_large_vertical, brush_large_horizontal], dim=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "split_39": {
                "variable": {
                    "value": "param_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "param.view(-1, 8).contiguous()",
                            "Call"
                        ],
                        [
                            "net_g.parameters()",
                            "Call"
                        ],
                        [
                            "stroke_param.view(1, patch_num, patch_num, stroke_num, 8).contiguous()",
                            "Call"
                        ],
                        [
                            "stroke_param.view(1, h, w, stroke_num, 8).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_43": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.acos(torch.tensor(-1.0, device=param.device)) * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_44": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.acos(torch.tensor(-1.0, device=param.device)) * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_47": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_59": {
                "variable": {
                    "value": "warp_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[warp_00, warp_01, warp_02]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_60": {
                "variable": {
                    "value": "warp_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[warp_10, warp_11, warp_12]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "warp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[warp_0, warp_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_63": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "warp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([warp_0, warp_1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "[b, 3, H, W]",
                    "type": "List",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_64": {
                "variable": {
                    "value": "brush",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "brush",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "meta_brushes_resize[index.long()]",
                            "Subscript"
                        ],
                        [
                            "F.grid_sample(brush, grid, align_corners=False)",
                            "Call"
                        ],
                        [
                            "brush.repeat(1, 3, 1, 1)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.affine_grid(warp, [b, 3, H, W], align_corners=False)",
                            "Call"
                        ],
                        [
                            "shape_param[:, :, :2].view(img_patch.shape[0] * stroke_num, 1, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "shape_param[:, :, :2].view(img_patch.shape[0] * stroke_num, 1, 1, 2).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_70": {
                "variable": {
                    "value": "color_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R, G, B]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_113": {
                "variable": {
                    "value": "even_idx_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[2] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "even_idx_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[3] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_115": {
                "variable": {
                    "value": "odd_idx_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[2] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_116": {
                "variable": {
                    "value": "odd_idx_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[3] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_117": {
                "variable": {
                    "value": "(even_y_even_x_coord_y, even_y_even_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[even_idx_y, even_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_118": {
                "variable": {
                    "value": "(odd_y_odd_x_coord_y, odd_y_odd_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[odd_idx_y, odd_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_119": {
                "variable": {
                    "value": "(even_y_odd_x_coord_y, even_y_odd_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[even_idx_y, odd_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_120": {
                "variable": {
                    "value": "(odd_y_even_x_coord_y, odd_y_even_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[odd_idx_y, even_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_121": {
                "variable": {
                    "value": "cur_canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_canvas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(cur_canvas, [patch_size_x // 4, patch_size_x // 4, patch_size_y // 4, patch_size_y // 4, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "cur_canvas[:, :, patch_size_y // 4:-patch_size_y // 4, patch_size_x // 4:-patch_size_x // 4]",
                            "Subscript"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "F.pad(cur_canvas, [patch_size_x // 4, patch_size_x // 4, patch_size_y // 4, patch_size_y // 4, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "cur_canvas[:, :, patch_size_y // 4:-patch_size_y // 4, patch_size_x // 4:-patch_size_x // 4]",
                            "Subscript"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "[patch_size_x // 4, patch_size_x // 4, patch_size_y // 4, patch_size_y // 4, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_251": {
                "variable": {
                    "value": "even_idx_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[2] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_252": {
                "variable": {
                    "value": "even_idx_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[3] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_253": {
                "variable": {
                    "value": "odd_idx_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[2] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_254": {
                "variable": {
                    "value": "odd_idx_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(img.shape[3] - patch_size) // patch_size + 1",
                            "BinOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "meshgrid_255": {
                "variable": {
                    "value": "(even_y_even_x_coord_y, even_y_even_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[even_idx_y, even_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_256": {
                "variable": {
                    "value": "(odd_y_odd_x_coord_y, odd_y_odd_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[odd_idx_y, odd_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_257": {
                "variable": {
                    "value": "(even_y_odd_x_coord_y, even_y_odd_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[even_idx_y, odd_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "meshgrid_258": {
                "variable": {
                    "value": "(odd_y_even_x_coord_y, odd_y_even_x_coord_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[odd_idx_y, even_idx_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_259": {
                "variable": {
                    "value": "cur_canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_canvas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(cur_canvas, [patch_size_x // 4, patch_size_x // 4, patch_size_y // 4, patch_size_y // 4, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "cur_canvas[:, :, patch_size_y // 4:-patch_size_y // 4, patch_size_x // 4:-patch_size_x // 4]",
                            "Subscript"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "F.pad(cur_canvas, [patch_size_x // 4, patch_size_x // 4, patch_size_y // 4, patch_size_y // 4, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "cur_canvas[:, :, patch_size_y // 4:-patch_size_y // 4, patch_size_x // 4:-patch_size_x // 4]",
                            "Subscript"
                        ],
                        [
                            "canvas",
                            "Name"
                        ],
                        [
                            "canvas",
                            "Name"
                        ]
                    ]
                },
                "pad": {
                    "value": "[patch_size_x // 4, patch_size_x // 4, patch_size_y // 4, patch_size_y // 4, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_261": {
                "variable": {
                    "value": "foregrounds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch_size_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * H // h",
                            "BinOp"
                        ],
                        [
                            "2 * H // h",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "patch_size_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * W // w",
                            "BinOp"
                        ],
                        [
                            "2 * W // w",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "param.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch_size_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * H // h",
                            "BinOp"
                        ],
                        [
                            "2 * H // h",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "patch_size_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * W // w",
                            "BinOp"
                        ],
                        [
                            "2 * W // w",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "cur_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((b, c, pad_h, w), device=img.device), img, torch.zeros((b, c, pad_h + remainder_h, w), device=img.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((b, c, H, pad_w), device=img.device), img, torch.zeros((b, c, H, pad_w + remainder_w), device=img.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "device_391": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "cat_400": {
                "variable": {
                    "value": "meta_brushes",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[brush_large_vertical, brush_large_horizontal]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unfold_125": {
                "variable": {
                    "value": "canvas_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_canvas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selected_canvas_patch.permute(0, 3, 1, 4, 2, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "this_canvas.view(b, 3, selected_h * patch_size_y, selected_w * patch_size_x).contiguous()",
                            "Call"
                        ],
                        [
                            "selected_canvas_patch.permute(0, 3, 1, 4, 2, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "this_canvas.view(b, 3, h_half * patch_size_y, w_half * patch_size_x).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size_y, patch_size_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(patch_size_y // 2, patch_size_x // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "selected_foregrounds",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "selected_param.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch_size_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * H // h",
                            "BinOp"
                        ],
                        [
                            "2 * H // h",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "patch_size_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * W // w",
                            "BinOp"
                        ],
                        [
                            "2 * W // w",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "this_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_137": {
                "variable": {
                    "value": "selected_alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "selected_param.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "patch_size_y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * H // h",
                            "BinOp"
                        ],
                        [
                            "2 * H // h",
                            "BinOp"
                        ]
                    ]
                },
                "layout": {
                    "value": "patch_size_x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * W // w",
                            "BinOp"
                        ],
                        [
                            "2 * W // w",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "this_canvas.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unfold_276": {
                "variable": {
                    "value": "canvas_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "this_canvas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "selected_canvas_patch.permute(0, 3, 1, 4, 2, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "this_canvas.view(b, 3, selected_h * patch_size_y, selected_w * patch_size_x).contiguous()",
                            "Call"
                        ],
                        [
                            "selected_canvas_patch.permute(0, 3, 1, 4, 2, 5).contiguous()",
                            "Call"
                        ],
                        [
                            "this_canvas.view(b, 3, h_half * patch_size_y, w_half * patch_size_x).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size_y, patch_size_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(patch_size_y // 2, patch_size_x // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, :patch_size_y // 2, -canvas.shape[3]:], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, -canvas.shape[2]:, :patch_size_x // 2], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_320": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, :patch_size_y // 2, :canvas.shape[3]], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, :canvas.shape[2], :patch_size_x // 2], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_409": {
                "variable": {
                    "value": "final_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_img_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad(original_img, original_img_pad_size, original_img_pad_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "interpolate_448": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_img_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad(original_img, original_img_pad_size, original_img_pad_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(patch_size * 2 ** layer, patch_size * 2 ** layer)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_449": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(original_img_pad).to(device)",
                            "Call"
                        ],
                        [
                            "F.pad(final_result, [border_size, border_size, border_size, border_size, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "param2img_serial(param, decision, meta_brushes, final_result, frame_dir, False, original_h, original_w)",
                            "Call"
                        ],
                        [
                            "param2img_parallel(param, decision, meta_brushes, final_result)",
                            "Call"
                        ],
                        [
                            "param2img_serial(param, decision, meta_brushes, final_result, frame_dir, True, original_h, original_w)",
                            "Call"
                        ],
                        [
                            "param2img_parallel(param, decision, meta_brushes, final_result)",
                            "Call"
                        ],
                        [
                            "final_result[:, :, border_size:-border_size, border_size:-border_size]",
                            "Subscript"
                        ],
                        [
                            "crop(final_result, original_h, original_w)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(patch_size * 2 ** layer, patch_size * 2 ** layer)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_450": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path).convert(img_type)",
                            "Call"
                        ],
                        [
                            "img.resize((w, h), resample=Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, pad_h, w), device=img.device), img, torch.zeros((b, c, pad_h + remainder_h, w), device=img.device)], dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, H, pad_w), device=img.device), img, torch.zeros((b, c, H, pad_w + remainder_w), device=img.device)], dim=-1)",
                            "Call"
                        ],
                        [
                            "img[:, :, pad_h:H - pad_h - remainder_h, pad_w:W - pad_w - remainder_w]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(original_img_pad, (layer_size, layer_size))",
                            "Call"
                        ],
                        [
                            "F.interpolate(original_img_pad, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(img, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_452": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.fromarray((img.data.cpu().numpy().transpose((1, 2, 0)) * 255).astype(np.uint8))",
                            "Call"
                        ],
                        [
                            "F.interpolate(final_result, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.interpolate(final_result, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(result, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unfold_454": {
                "variable": {
                    "value": "img_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path).convert(img_type)",
                            "Call"
                        ],
                        [
                            "img.resize((w, h), resample=Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, pad_h, w), device=img.device), img, torch.zeros((b, c, pad_h + remainder_h, w), device=img.device)], dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, H, pad_w), device=img.device), img, torch.zeros((b, c, H, pad_w + remainder_w), device=img.device)], dim=-1)",
                            "Call"
                        ],
                        [
                            "img[:, :, pad_h:H - pad_h - remainder_h, pad_w:W - pad_w - remainder_w]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(original_img_pad, (layer_size, layer_size))",
                            "Call"
                        ],
                        [
                            "F.interpolate(original_img_pad, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(img, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_455": {
                "variable": {
                    "value": "result_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.fromarray((img.data.cpu().numpy().transpose((1, 2, 0)) * 255).astype(np.uint8))",
                            "Call"
                        ],
                        [
                            "F.interpolate(final_result, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.interpolate(final_result, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(result, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "pad_456": {
                "variable": {
                    "value": "final_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(original_img_pad).to(device)",
                            "Call"
                        ],
                        [
                            "F.pad(final_result, [border_size, border_size, border_size, border_size, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "param2img_serial(param, decision, meta_brushes, final_result, frame_dir, False, original_h, original_w)",
                            "Call"
                        ],
                        [
                            "param2img_parallel(param, decision, meta_brushes, final_result)",
                            "Call"
                        ],
                        [
                            "param2img_serial(param, decision, meta_brushes, final_result, frame_dir, True, original_h, original_w)",
                            "Call"
                        ],
                        [
                            "param2img_parallel(param, decision, meta_brushes, final_result)",
                            "Call"
                        ],
                        [
                            "final_result[:, :, border_size:-border_size, border_size:-border_size]",
                            "Subscript"
                        ],
                        [
                            "crop(final_result, original_h, original_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[border_size, border_size, border_size, border_size, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grid_sample_467": {
                "variable": {
                    "value": "color",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_patch.unsqueeze(1).contiguous().repeat(1, stroke_num, 1, 1, 1).view(img_patch.shape[0] * stroke_num, 3, patch_size, patch_size).contiguous()",
                            "Call"
                        ],
                        [
                            "img_patch.unsqueeze(1).contiguous().repeat(1, stroke_num, 1, 1, 1).view(img_patch.shape[0] * stroke_num, 3, patch_size, patch_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "2 * grid - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_469": {
                "variable": {
                    "value": "stroke_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shape_param, color]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_175": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, :patch_size_y // 2, -canvas.shape[3]:], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, -canvas.shape[2]:, :patch_size_x // 2], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, :patch_size_y // 2, :canvas.shape[3]], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_206": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cur_canvas[:, :, :canvas.shape[2], :patch_size_x // 2], canvas]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_303": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, :canvas.shape[3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_305": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_313": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, :canvas.shape[3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_315": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_322": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, :canvas.shape[3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_324": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_331": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, -canvas.shape[3]:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_333": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_349": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path).convert(img_type)",
                            "Call"
                        ],
                        [
                            "img.resize((w, h), resample=Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, pad_h, w), device=img.device), img, torch.zeros((b, c, pad_h + remainder_h, w), device=img.device)], dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, H, pad_w), device=img.device), img, torch.zeros((b, c, H, pad_w + remainder_w), device=img.device)], dim=-1)",
                            "Call"
                        ],
                        [
                            "img[:, :, pad_h:H - pad_h - remainder_h, pad_w:W - pad_w - remainder_w]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(original_img_pad, (layer_size, layer_size))",
                            "Call"
                        ],
                        [
                            "F.interpolate(original_img_pad, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(img, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_349": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_393": {
                "f": {
                    "value": "model_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_403": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_412": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_img_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pad(original_img, original_img_pad_size, original_img_pad_size)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(layer_size, layer_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "interpolate_413": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "final_result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(original_img_pad).to(device)",
                            "Call"
                        ],
                        [
                            "F.pad(final_result, [border_size, border_size, border_size, border_size, 0, 0, 0, 0])",
                            "Call"
                        ],
                        [
                            "param2img_serial(param, decision, meta_brushes, final_result, frame_dir, False, original_h, original_w)",
                            "Call"
                        ],
                        [
                            "param2img_parallel(param, decision, meta_brushes, final_result)",
                            "Call"
                        ],
                        [
                            "param2img_serial(param, decision, meta_brushes, final_result, frame_dir, True, original_h, original_w)",
                            "Call"
                        ],
                        [
                            "param2img_parallel(param, decision, meta_brushes, final_result)",
                            "Call"
                        ],
                        [
                            "final_result[:, :, border_size:-border_size, border_size:-border_size]",
                            "Subscript"
                        ],
                        [
                            "crop(final_result, original_h, original_w)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(patch_size * 2 ** layer, patch_size * 2 ** layer)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_414": {
                "variable": {
                    "value": "img_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path).convert(img_type)",
                            "Call"
                        ],
                        [
                            "img.resize((w, h), resample=Image.NEAREST)",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0).float() / 255.0",
                            "BinOp"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, pad_h, w), device=img.device), img, torch.zeros((b, c, pad_h + remainder_h, w), device=img.device)], dim=-2)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((b, c, H, pad_w), device=img.device), img, torch.zeros((b, c, H, pad_w + remainder_w), device=img.device)], dim=-1)",
                            "Call"
                        ],
                        [
                            "img[:, :, pad_h:H - pad_h - remainder_h, pad_w:W - pad_w - remainder_w]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(original_img_pad, (layer_size, layer_size))",
                            "Call"
                        ],
                        [
                            "F.interpolate(original_img_pad, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(img, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unfold_415": {
                "variable": {
                    "value": "result_patch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.fromarray((img.data.cpu().numpy().transpose((1, 2, 0)) * 255).astype(np.uint8))",
                            "Call"
                        ],
                        [
                            "F.interpolate(final_result, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.interpolate(final_result, (patch_size * 2 ** layer, patch_size * 2 ** layer))",
                            "Call"
                        ],
                        [
                            "F.pad(result, [patch_size // 2, patch_size // 2, patch_size // 2, patch_size // 2, 0, 0, 0, 0])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(patch_size, patch_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "grid_sample_430": {
                "variable": {
                    "value": "color",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img_patch.unsqueeze(1).contiguous().repeat(1, stroke_num, 1, 1, 1).view(img_patch.shape[0] * stroke_num, 3, patch_size, patch_size).contiguous()",
                            "Call"
                        ],
                        [
                            "img_patch.unsqueeze(1).contiguous().repeat(1, stroke_num, 1, 1, 1).view(img_patch.shape[0] * stroke_num, 3, patch_size, patch_size).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "2 * grid - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_432": {
                "variable": {
                    "value": "stroke_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[shape_param, color]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "acos_43": {
                "input": {
                    "value": "torch.tensor(-1.0, device=param.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_44": {
                "input": {
                    "value": "torch.tensor(-1.0, device=param.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_162": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, :canvas.shape[3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_178": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, :canvas.shape[3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, :canvas.shape[3]]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_208": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, -patch_size_y // 2:, -canvas.shape[3]:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_210": {
                "variable": {
                    "value": "canvas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[canvas, cur_canvas[:, :, :canvas.shape[2], -patch_size_x // 2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_359": {
                "*size": {
                    "value": "(b, c, pad_h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_360": {
                "*size": {
                    "value": "(b, c, pad_h + remainder_h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_361": {
                "*size": {
                    "value": "(b, c, H, pad_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "*size": {
                    "value": "(b, c, H, pad_w + remainder_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_391": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_43": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "inference/morphology.py": {
        "torch": {
            "pad_24": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[m, m, m, m]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unfold_25": {
                "variable": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=[m, m, m, m], mode='constant', value=1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[m, m, m, m], mode='constant', value=-1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self.pad, mode='constant', value=1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self.pad, mode='constant', value=-1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2 * m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_48": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "[m, m, m, m]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unfold_49": {
                "variable": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(x, pad=[m, m, m, m], mode='constant', value=1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=[m, m, m, m], mode='constant', value=-1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self.pad, mode='constant', value=1000000000.0)",
                            "Call"
                        ],
                        [
                            "F.pad(x, pad=self.pad, mode='constant', value=-1000000000.0)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2 * m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Unfold_12": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_16": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Unfold_36": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_40": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_26": {
                "input": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_50": {
                "input": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_18": {
                "input": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "nn.functional.unfold(x_pad, 2 * m + 1, padding=0, stride=1).view(b, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad).view(batch_size, c, -1, h, w)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "inference/network.py": {
        "torch": {
            "sigmoid_10": {
                "variable": {
                    "value": "sigmoid_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.enc_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.enc_canvas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Transformer_55": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.linear_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "variable": {
                    "value": "self.linear_decider",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_63": {
                "variable": {
                    "value": "self.query_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(total_strokes, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_64": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(8, hidden_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_65": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(8, hidden_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_feat, canvas_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_75": {
                "variable": {
                    "value": "pos_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.col_embed[:w].unsqueeze(0).contiguous().repeat(h, 1, 1), self.row_embed[:h].unsqueeze(1).contiguous().repeat(1, w, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_75": {
                "variable": {
                    "value": "pos_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_75": {
                "variable": {
                    "value": "pos_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_29": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_33": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_37": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_42": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_46": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_49": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_50": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param_per_stroke",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_63": {
                "*size": {
                    "value": "total_strokes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "train/data/__init__.py": {
        "torch": {}
    },
    "train/data/base_dataset.py": {
        "torch": {}
    },
    "train/models/base_model.py": {
        "torch": {
            "device_35": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_192": {
                "variable": {
                    "value": "state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, load_filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "str(self.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_157": {
                "obj": {
                    "value": "net.module.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_160": {
                "obj": {
                    "value": "net.cpu().state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "train/models/networks.py": {
        "torch": {
            "LambdaLR_14": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lambda_rule",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(net, gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_64": {
                "variable": {
                    "value": "sigmoid_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.enc_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "variable": {
                    "value": "self.enc_canvas",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Transformer_109": {
                "variable": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_110": {
                "variable": {
                    "value": "self.linear_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(hidden_dim, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.linear_decider",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_117": {
                "variable": {
                    "value": "self.query_pos",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(total_strokes, hidden_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_118": {
                "variable": {
                    "value": "self.row_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(8, hidden_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_119": {
                "variable": {
                    "value": "self.col_embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(8, hidden_dim // 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "feat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[img_feat, canvas_feat]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "pos_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.col_embed[:w].unsqueeze(0).contiguous().repeat(h, 1, 1), self.row_embed[:h].unsqueeze(1).contiguous().repeat(1, w, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_129": {
                "variable": {
                    "value": "pos_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_129": {
                "variable": {
                    "value": "pos_embed",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grid_sample_140": {
                "variable": {
                    "value": "color",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "img.unsqueeze(1).contiguous().repeat(1, s, 1, 1, 1).view(b * s, 3, H, W).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "2 * grid - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "StepLR_16": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "step_size": {
                    "value": "opt.lr_decay_iters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "is_available_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_18": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "threshold": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_83": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_85": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_86": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_87": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_91": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_96": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_98": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_99": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_100": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_101": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_103": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_104": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_105": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_106": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_107": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_113": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_115": {
                "in_features": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "param_per_stroke",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_117": {
                "*size": {
                    "value": "total_strokes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_118": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_119": {
                "*size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "hidden_dim // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[param, color, color, torch.rand(b, s, 1, device=img.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_20": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "T_max": {
                    "value": "opt.n_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_142": {
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "hidden_state.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "img.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train/models/painter_model.py": {
        "torch": {
            "cat_45": {
                "variable": {
                    "value": "self.meta_brushes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[brush_large_vertical, brush_large_horizontal]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "self.loss_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_59": {
                "variable": {
                    "value": "self.loss_gt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_60": {
                "variable": {
                    "value": "self.loss_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_61": {
                "variable": {
                    "value": "self.loss_decision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "L1Loss_62": {
                "variable": {
                    "value": "self.criterion_pixel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_63": {
                "variable": {
                    "value": "self.criterion_decision",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pos_weight": {
                    "value": "torch.tensor(opt.lambda_recall)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_71": {
                "variable": {
                    "value": "param_list",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "param.view(-1, self.d).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sin_74": {
                "variable": {
                    "value": "sin_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.acos(torch.tensor(-1.0, device=param.device)) * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_75": {
                "variable": {
                    "value": "cos_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.acos(torch.tensor(-1.0, device=param.device)) * theta",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "full_76": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(b,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_80": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[brush, brush, brush]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_83": {
                "variable": {
                    "value": "color_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[R0 * (1 - t) + R2 * t, G0 * (1 - t) + G2 * t, B0 * (1 - t) + B2 * t]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "variable": {
                    "value": "warp_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[warp_00, warp_01, warp_02]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_94": {
                "variable": {
                    "value": "warp_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[warp_10, warp_11, warp_12]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "warp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[warp_0, warp_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_96": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "warp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([warp_0, warp_1], dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((b, 3, H, W))",
                    "type": "Call",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_97": {
                "variable": {
                    "value": "brush",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "brush",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.meta_brushes[index.long()]",
                            "Subscript"
                        ],
                        [
                            "brush * color_map",
                            "BinOp"
                        ],
                        [
                            "torch.nn.functional.grid_sample(brush, grid, align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(warp, torch.Size((b, 3, H, W)), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_98": {
                "variable": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alphas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cat([brush, brush, brush], dim=1)",
                            "Call"
                        ],
                        [
                            "(alphas > 0).float()",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.grid_sample(alphas, grid, align_corners=False)",
                            "Call"
                        ],
                        [
                            "morphology.Erosion2d(m=1)(alphas)",
                            "Call"
                        ],
                        [
                            "alphas.view(self.opt.batch_size // 4, self.opt.used_strokes, 3, self.patch_size * 2, self.patch_size * 2).contiguous()",
                            "Call"
                        ],
                        [
                            "morphology.Erosion2d(m=1)(alphas)",
                            "Call"
                        ],
                        [
                            "alphas.view(self.opt.batch_size, self.opt.used_strokes, 3, self.patch_size, self.patch_size).contiguous()",
                            "Call"
                        ],
                        [
                            "morphology.Erosion2d(m=1)(alphas)",
                            "Call"
                        ],
                        [
                            "alphas.view(-1, self.opt.used_strokes, 3, self.patch_size, self.patch_size)",
                            "Call"
                        ]
                    ]
                },
                "grid": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.affine_grid(warp, torch.Size((b, 3, H, W)), align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_177": {
                "variable": {
                    "value": "sigma_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigma_00, sigma_01]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "sigma_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigma_01, sigma_11]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_179": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigma_0, sigma_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_187": {
                "variable": {
                    "value": "sigma_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigma_00, sigma_01]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_188": {
                "variable": {
                    "value": "sigma_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigma_01, sigma_11]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_189": {
                "variable": {
                    "value": "sigma",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[sigma_0, sigma_1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_193": {
                "variable": {
                    "value": "(mu_1, w_1, h_1, theta_1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "(2, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_198": {
                "variable": {
                    "value": "(mu_2, w_2, h_2, theta_2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "param_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "(2, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_205": {
                "input": {
                    "value": "sigma_1_sqrt",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_sigma_sqrt(w_1, h_1, theta_1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "sigma_2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.get_sigma(w_2, h_2, theta_2)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_206": {
                "input": {
                    "value": "trace_12[..., 0, 0] * trace_12[..., 1, 1] - trace_12[..., 0, 1] * trace_12[..., 1, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net_g.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_105": {
                "variable": {
                    "value": "old_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.batch_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.used_strokes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.batch_size // 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.patch_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_125": {
                "variable": {
                    "value": "gt_param",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.used_strokes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_138": {
                "variable": {
                    "value": "gt_decision",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.opt.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.opt.used_strokes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_232": {
                "variable": {
                    "value": "r_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "r_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(r_idx, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "c_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "c_idx",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(c_idx, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "paired_gt_decision",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.gt_decision.shape[0] * self.gt_decision.shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_82": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "brush.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_82": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "acos_196": {
                "input": {
                    "value": "torch.tensor(-1.0, device=param_1.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_201": {
                "input": {
                    "value": "torch.tensor(-1.0, device=param_2.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_214": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cdist_220": {
                "variable": {
                    "value": "cost_matrix_l1",
                    "type": "Variable",
                    "possible_values": []
                },
                "x1": {
                    "value": "self.pred_param[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x2": {
                    "value": "valid_gt_param",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.gt_param[i, is_valid_gt]",
                            "Subscript"
                        ]
                    ]
                },
                "p": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Image.open(img_path).convert(img_type)",
                            "Call"
                        ],
                        [
                            "np.array(img)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img).unsqueeze(0).float() / 255.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_40": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "acos_74": {
                "input": {
                    "value": "torch.tensor(-1.0, device=param.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_75": {
                "input": {
                    "value": "torch.tensor(-1.0, device=param.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_175": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_185": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_196": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param_1.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_201": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param_2.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_75": {
                "data": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "device": {
                    "value": "param.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_175": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_185": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_208": {
                "input": {
                    "value": "(mu_1 - mu_2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_229": {
                "data": {
                    "value": "r + self.pred_param.shape[1] * i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_230": {
                "data": {
                    "value": "c + cur_valid_gt_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_63": {
                "data": {
                    "value": "opt.lambda_recall",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_174": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_174": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_176": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_176": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_184": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_184": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_186": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sin_186": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_143": {
                "input": {
                    "value": "alpha * alphas[:, j, :, :, :]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_144": {
                "input": {
                    "value": "alphas[:, j, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "(-3, -2, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "train/options/base_options.py": {
        "torch": {
            "set_device_148": {
                "device": {
                    "value": "opt.gpu_ids[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "train/util/morphology.py": {
        "torch": {
            "Unfold_12": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_16": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "1000000000.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Unfold_32": {
                "variable": {
                    "value": "self.unfold",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2 * m + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_36": {
                "variable": {
                    "value": "x_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "pad": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_19": {
                "input": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.unfold(x_pad[:, [i], :, :])",
                            "Call"
                        ],
                        [
                            "torch.min(channel, dim=1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "channel.view([batch_size, 1, h, w])",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad[:, [i], :, :])",
                            "Call"
                        ],
                        [
                            "torch.max(channel, dim=1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "channel.view([batch_size, 1, h, w])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_39": {
                "input": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.unfold(x_pad[:, [i], :, :])",
                            "Call"
                        ],
                        [
                            "torch.min(channel, dim=1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "channel.view([batch_size, 1, h, w])",
                            "Call"
                        ],
                        [
                            "self.unfold(x_pad[:, [i], :, :])",
                            "Call"
                        ],
                        [
                            "torch.max(channel, dim=1, keepdim=True)[0]",
                            "Subscript"
                        ],
                        [
                            "channel.view([batch_size, 1, h, w])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "train/util/util.py": {
        "torch": {
            "mean_41": {
                "input": {
                    "value": "torch.abs(param.grad.data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_41": {
                "input": {
                    "value": "param.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}