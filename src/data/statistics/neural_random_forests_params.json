{
    "forest_fitting.py": {
        "sklearn": {
            "RandomForestRegressor_12": {
                "variable": {
                    "value": "rf",
                    "type": "variable",
                    "possible_values": []
                },
                "n_estimators": {
                    "value": "ntrees",
                    "type": "variable",
                    "possible_values": [
                        [
                            "30",
                            "Method Argument"
                        ]
                    ]
                },
                "criterion": {
                    "value": "mse",
                    "type": "str",
                    "possible_values": []
                },
                "max_depth": {
                    "value": "depth",
                    "type": "variable",
                    "possible_values": [
                        [
                            "6",
                            "Method Argument"
                        ]
                    ]
                },
                "min_samples_split": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "min_samples_leaf": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "min_weight_fraction_leaf": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max_features": {
                    "value": "auto",
                    "type": "str",
                    "possible_values": []
                },
                "max_leaf_nodes": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "bootstrap": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "oob_score": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "n_jobs": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "random_state": {
                    "value": "random_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                },
                "verbose": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "forest_functions.py": {
        "sklearn": {}
    },
    "feedforward.py": {
        "tensorflow": {
            "placeholder_121": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, n_inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_128": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.pow(prediction - Y, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_129": {
                "variable": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_01) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h, W_12) + b_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_inputs, HL1N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL1N, HL2N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "W_23",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL2N, 1], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL1N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_36": {
                "variable": {
                    "value": "b_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL2N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "b_3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_44": {
                "variable": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_45": {
                "variable": {
                    "value": "W_23",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_46": {
                "variable": {
                    "value": "b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "b1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_47": {
                "variable": {
                    "value": "b_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "b2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_48": {
                "variable": {
                    "value": "b_3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.sum(W3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_inputs, HL1N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_64": {
                "variable": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL1N, 1], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_65": {
                "variable": {
                    "value": "b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL1N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_66": {
                "variable": {
                    "value": "b_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_67": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_01) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_128": {
                "x": {
                    "value": "prediction - Y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_51": {
                "variable": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(W1 != 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_52": {
                "variable": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "np.float32(W2 != 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_53": {
                "variable": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.float32(W1 != 0.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask1, W_01)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_54": {
                "variable": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(np.float32(W2 != 0.0))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, 1], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask2, W_12)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_59": {
                "a": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(h, W_12) + b_2)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(h, W_12) + b_2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_23",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL2N, 1], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W3)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL2N, HL2N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_71": {
                "variable": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([n_inputs, HL1N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_72": {
                "variable": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL1N, HL2N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_73": {
                "variable": {
                    "value": "W_23",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL2N, HL2N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_74": {
                "variable": {
                    "value": "W_34",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL2N, 1], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_75": {
                "variable": {
                    "value": "b_1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL1N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_76": {
                "variable": {
                    "value": "b_2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL2N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_77": {
                "variable": {
                    "value": "b_3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([HL2N], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_78": {
                "variable": {
                    "value": "b_4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal([1], 0.0, sigma)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_80": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(X, W_01) + b_1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_81": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h, W_12) + b_2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_82": {
                "variable": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(h2, W_23) + b_3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_57": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_inputs])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask1, W_01)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_58": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, 1], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask2, W_12)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_68": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, 1], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask2, W_12)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_67": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_inputs])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask1, W_01)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_83": {
                "a": {
                    "value": "h3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(h2, W_23) + b_3)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_34",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL2N, 1], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "a": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder('float', [None, n_inputs])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_01",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W1)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask1, W_01)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([n_inputs, HL1N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(X, W_01) + b_1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W2)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, 1], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.multiply(mask2, W_12)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL1N, HL2N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_82": {
                "a": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.tanh(tf.matmul(h, W_12) + b_2)",
                            "Call"
                        ],
                        [
                            "tf.nn.tanh(tf.matmul(h, W_12) + b_2)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_23",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_normal([HL2N, 1], 0.0, sigma))",
                            "Call"
                        ],
                        [
                            "tf.Variable(W3)",
                            "Call"
                        ],
                        [
                            "tf.Variable(tf.random_normal([HL2N, HL2N], 0.0, sigma))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "individually_trained.py": {
        "tensorflow": {
            "reset_default_graph_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}