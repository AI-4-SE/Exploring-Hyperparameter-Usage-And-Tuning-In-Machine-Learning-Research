{
    "logger.py": {
        "tensorflow": {
            "summary_iterator_468": {
                "path": {
                    "value": "fname",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fnames",
                            "variable"
                        ]
                    ]
                }
            },
            "as_bytes_153": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "gdqn.py": {
        "torch": {
            "device_22": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_81": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BCELoss_82": {
                "variable": {
                    "value": "self.loss_fn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_83": {
                "variable": {
                    "value": "self.loss_fn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_84": {
                "variable": {
                    "value": "self.loss_fn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "squeeze_113": {
                "variable": {
                    "value": "obj_target_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_192": {
                "variable": {
                    "value": "(topk_tmpl_probs, topk_tmpl_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "tmpl_pred_tt[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_192": {
                "variable": {
                    "value": "(topk_tmpl_probs, topk_tmpl_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_202": {
                "variable": {
                    "value": "(topk_o1_probs, topk_o1_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_pred_tt[0, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "topk_202": {
                "variable": {
                    "value": "(topk_o1_probs, topk_o1_idxs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_217": {
                "variable": {
                    "value": "rew_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_270": {
                "variable": {
                    "value": "tmpl_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmpl_pred_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_274": {
                "variable": {
                    "value": "obj_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_pred_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_302": {
                "variable": {
                    "value": "log_probs_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "obj_pred_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_303": {
                "variable": {
                    "value": "log_probs_tmpl",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tmpl_pred_tt",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_grad_norm__329": {
                "parameters": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.params['clip']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "self.params['preload_weights']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "save_259": {
                "obj": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(self.params['output_dir'], 'kga2c.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_293": {
                "variable": {
                    "value": "action_log_probs_obj",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "obj_pred_tt[0, i, graph_mask_tt[i]]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "data": {
                    "value": "dones",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "layers.py": {
        "torch": {
            "device_10": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_16": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_17": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_34": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "input_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_35": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_48": {
                "variable": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_50": {
                "variable": {
                    "value": "packed",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.embedding(input)",
                            "Call"
                        ],
                        [
                            "self.embedding(input).permute(1, 0, 2)",
                            "Call"
                        ],
                        [
                            "self.embedding(input).view(1, 1, -1)",
                            "Call"
                        ],
                        [
                            "self.dropout(embedded)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "lengths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.tensor(lengths, dtype=torch.long).cuda()",
                            "Call"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "enforce_sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_53": {
                "variable": {
                    "value": "(output, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded",
                            "variable"
                        ],
                        [
                            "output.gather(0, idx).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ],
                        [
                            "self.embedding(input).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((output, encoder_output), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.combine(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ],
                        [
                            "torch.cat((embedded[0], attn_applied[0]), 1)",
                            "Call"
                        ],
                        [
                            "self.attn_combine(output).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(output[0]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_67": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_68": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Softmax_70": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_103": {
                "variable": {
                    "value": "self.combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRU_104": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_105": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output, encoder_output)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "relu_114": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded",
                            "variable"
                        ],
                        [
                            "output.gather(0, idx).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ],
                        [
                            "self.embedding(input).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((output, encoder_output), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.combine(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ],
                        [
                            "torch.cat((embedded[0], attn_applied[0]), 1)",
                            "Call"
                        ],
                        [
                            "self.attn_combine(output).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(output[0]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Embedding_137": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_138": {
                "variable": {
                    "value": "self.attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.max_length",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_139": {
                "variable": {
                    "value": "self.attn_combine",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_140": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GRU_141": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_147": {
                "variable": {
                    "value": "attn_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.attn(torch.cat((embedded[0], hidden[0]), 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_149": {
                "variable": {
                    "value": "attn_applied",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_weights.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "encoder_outputs.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(embedded[0], attn_applied[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_153": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedded",
                            "variable"
                        ],
                        [
                            "output.gather(0, idx).squeeze(0)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ],
                        [
                            "self.embedding(input).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.cat((output, encoder_output), dim=-1)",
                            "Call"
                        ],
                        [
                            "self.combine(output)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "self.out(output[0])",
                            "Call"
                        ],
                        [
                            "torch.cat((embedded[0], attn_applied[0]), 1)",
                            "Call"
                        ],
                        [
                            "self.attn_combine(output).unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "F.relu(output)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(self.out(output[0]), dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_155": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.out(output[0])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_uniform_(torch.Tensor(in_features, out_features).type(torch.cuda.FloatTensor if torch.cuda.is_available() else torch.FloatTensor), gain=np.sqrt(2.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_174": {
                "variable": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "nn.init.xavier_uniform_(torch.Tensor(2 * out_features, 1).type(torch.cuda.FloatTensor if torch.cuda.is_available() else torch.FloatTensor), gain=np.sqrt(2.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_175": {
                "variable": {
                    "value": "self.leakyrelu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "self.alpha",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_178": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.unsqueeze_(0).expand(100, -1, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_180": {
                "variable": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_182": {
                "variable": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(torch.matmul(a_input, self.a).squeeze(2))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_184": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "adj > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "e",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.leakyrelu(torch.matmul(a_input, self.a).squeeze(2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "zero_vec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(e)",
                            "Call"
                        ],
                        [
                            "zero_vec.fill_(9e-15)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_185": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_186": {
                "variable": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_187": {
                "variable": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(adj > 0, e, zero_vec)",
                            "Call"
                        ],
                        [
                            "F.softmax(attention, dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(attention, self.dropout, training=self.training)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(input, self.W)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_203": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "LSTM_207": {
                "variable": {
                    "value": "self.gru",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "embedding_size",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dropout": {
                    "value": "dropout_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_210": {
                "variable": {
                    "value": "self.encoder2decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_size * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_27": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nonzero_43": {
                "variable": {
                    "value": "curr_len",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ]
                    ]
                }
            },
            "zeros_60": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_79": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Binomial_92": {
                "variable": {
                    "value": "binomial",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "1 - self.p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_127": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_234": {
                "variable": {
                    "value": "h_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_h_t[-1], enc_h_t[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "c_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(enc_c_t[-1], enc_c_t[-2])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_181": {
                "input": {
                    "value": "a_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([h.repeat(1, N).view(N * N, -1), h.repeat(N, 1)], dim=1).view(N, -1, 2 * self.out_features)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.a",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_181": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "elu_189": {
                "input": {
                    "value": "h_prime",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.matmul(attention, h)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_216": {
                "*size": {
                    "value": "self.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_221": {
                "*size": {
                    "value": "self.num_layers * self.num_directions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.hidden_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tanh_239": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(embedded[0], hidden[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_174": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Embedding_33": {
                "variable": {
                    "value": "self.action_emb",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(vocab_act)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "params['embedding_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.SAN1_Q_fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "60",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "variable": {
                    "value": "self.SAN1_A_fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.SAN1_Q_fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.SAN1_P_fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.SAN2_Q_fc_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.SAN2_A_fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "variable": {
                    "value": "self.SAN2_Q_fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_60": {
                "variable": {
                    "value": "self.SAN2_P_fc_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.state_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_69": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.critic",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_104": {
                "variable": {
                    "value": "h_regions_gru",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o_t_l, o_t_i, o_t_o, o_t_p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "h_query_0_san1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.SAN1_Q_fc_0(torch.cat((g_t_full, src_t), dim=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_106": {
                "variable": {
                    "value": "h_A_1_san1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.SAN1_A_fc_1(h_regions_gru) + self.SAN1_Q_fc_1(h_query_0_san1).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_108": {
                "variable": {
                    "value": "att_1_san1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.SAN1_P_fc_1(h_A_1_san1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_112": {
                "variable": {
                    "value": "h_regions_kg",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g_t_1, g_t_2, g_t_3, g_t_4]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "h_query_0_san2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.SAN2_Q_fc_0(h_query_1_san1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_114": {
                "variable": {
                    "value": "h_A_1_san2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.SAN2_A_fc_1(h_regions_kg) + self.SAN2_Q_fc_1(h_query_0_san2).unsqueeze(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_116": {
                "variable": {
                    "value": "att_1_san2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.SAN2_P_fc_1(h_A_1_san2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_118": {
                "variable": {
                    "value": "state_emb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.state_fc(h_query_1_san2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_181": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_ent_emb.weight.size()[0] * 3 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_ent_emb.weight.size()[0] * 3 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_183": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_ent_emb.weight.size()[0] * 3 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_184": {
                "variable": {
                    "value": "self.fc4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_ent_emb.weight.size()[0] * 3 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.fc_full",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.state_ent_emb.weight.size()[0] * 3 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_231": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[att(x, adj) for att in self.attentions]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_234": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.dropout(x, self.dropout)",
                            "Call"
                        ],
                        [
                            "torch.cat([att(x, adj) for att in self.attentions], dim=1)",
                            "Call"
                        ],
                        [
                            "F.dropout(x, self.dropout)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_245": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_254": {
                "variable": {
                    "value": "self.fch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "100 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_296": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fch(torch.cat((h_l, h_i, h_o, h_p), dim=2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Softmax_306": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_310": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[vocab_rev['<s>']] * input.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_printoptions_312": {
                "profile": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_136": {
                "data": {
                    "value": "templ_enc_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "clone_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_180": {
                "*size": {
                    "value": "(len(self.vocab_kge), self.embedding_size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_214": {
                "tensors": {
                    "value": "out1",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "out2",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_216": {
                "tensors": {
                    "value": "out3",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_217": {
                "tensors": {
                    "value": "out4",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_218": {
                "tensors": {
                    "value": "out_full",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_342": {
                "tensors": {
                    "value": "all_words",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "(g_t_full, src_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_296": {
                "tensors": {
                    "value": "(h_l, h_i, h_o, h_p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_321": {
                "variable": {
                    "value": "dec_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ret_decoder_output[i][graphs[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}