{
    "reprieve/algorithms/torch_mlp.py": {
        "torch": {
            "is_available_7": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_22": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_35": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_43": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_44": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_48": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_30": {
                "seed": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_58": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_59": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_62": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(x)",
                            "Call"
                        ],
                        [
                            "model(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(y, dtype=torch.long).to(DEVICE)",
                            "Call"
                        ]
                    ]
                }
            },
            "Flatten_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "dims[-2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "LogSoftmax_21": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_18": {
                "in_features": {
                    "value": "dims[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dims[i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reprieve/api.py": {
        "torch": {
            "manual_seed_84": {
                "seed": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_90": {
                "variable": {
                    "value": "data_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(data_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_91": {
                "variable": {
                    "value": "data_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "data_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.as_tensor(data_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_92": {
                "variable": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "data_x",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_268": {
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "manual_seed_275": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range(self.n_seeds)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "reprieve/dataset_wrappers.py": {
        "torch": {
            "stack_54": {
                "variable": {
                    "value": "all_unwhite_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.dataset[i][0] for i in range(len(self.dataset))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "DataLoader_113": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "reprieve/mnist_noisy_label.py": {
        "torch": {
            "zeros_like_39": {
                "variable": {
                    "value": "x_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flatten_39": {
                "variable": {
                    "value": "x_fake",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reprieve/representations/common.py": {
        "torch": {
            "as_tensor_7": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x).to(device)",
                            "Call"
                        ],
                        [
                            "repr_fn(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_6": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reprieve/representations/mnist_vae.py": {
        "torch": {
            "binary_cross_entropy_74": {
                "variable": {
                    "value": "BCE",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "recon_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "x.view(-1, 784)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('./data', train=True, download=True, transform=transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.1307,), (0.3081,))]))",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "BATCH_SIZE",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "Constant"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_27": {
                "variable": {
                    "value": "self.encoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(784, 400)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.fc21",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.fc22",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_38": {
                "variable": {
                    "value": "self.decoder_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.latent_dim, 400)",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0.5 * logvar",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_52": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "std",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.exp(0.5 * logvar)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_117": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "model.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_56": {
                "input": {
                    "value": "self.decoder_layers(z)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "nn.Flatten()",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_80": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_28": {
                "in_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_39": {
                "in_features": {
                    "value": "self.latent_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_42": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_43": {
                "in_features": {
                    "value": "400",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "784",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "reprieve/utils.py": {
        "torch": {
            "DataLoader_60": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST('../data', train=True, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ],
                        [
                            "dataset_wrappers.DatasetCache(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_126": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST('../data', train=True, download=True, transform=torchvision.transforms.Compose([torchvision.transforms.ToTensor(), torchvision.transforms.Normalize((0.1307,), (0.3081,))]))",
                            "Call"
                        ],
                        [
                            "dataset_wrappers.DatasetCache(dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_transforms(batch_transforms, x.numpy())",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "t(x)",
                            "Call"
                        ],
                        [
                            "apply_transforms(batch_transforms, x)",
                            "Call"
                        ],
                        [
                            "x.reshape((x.shape[0], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_48": {
                "variable": {
                    "value": "xs[i:i + x.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "apply_transforms(batch_transforms, x.numpy())",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(x)",
                            "Call"
                        ],
                        [
                            "t(x)",
                            "Call"
                        ],
                        [
                            "apply_transforms(batch_transforms, x)",
                            "Call"
                        ],
                        [
                            "x.reshape((x.shape[0], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_49": {
                "variable": {
                    "value": "ys[i:i + y.shape[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_46": {
                "variable": {
                    "value": "xs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(dataset_len, *x.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t_dtype_32(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_47": {
                "variable": {
                    "value": "ys",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(dataset_len, *y.shape[1:])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "t_dtype_32(y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}