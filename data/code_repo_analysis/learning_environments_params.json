{
    "agents/DDQN.py": {
        "torch": {
            "mse_loss_86": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.gather(1, actions.long().unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expected_q_value.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_120": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_127": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_110": {
                "input": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_110": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_104": {
                "input": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_104": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/DDQN_vary.py": {
        "torch": {
            "set_num_threads_66": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/DuelingDDQN.py": {
        "torch": {
            "mse_loss_85": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "expected_q_value.detach()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.gather(1, actions.long().unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_119": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_126": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_109": {
                "input": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_109": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_103": {
                "input": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_103": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/DuelingDDQN_vary.py": {
        "torch": {
            "set_num_threads_82": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/GTN.py": {
        "torch": {
            "set_num_threads_67": {
                "int": {
                    "value": "gtn_config['num_threads_per_worker']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "agents/GTN_base.py": {
        "torch": {}
    },
    "agents/GTN_master.py": {
        "torch": {
            "save_139": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.model_dir, self.model_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_187": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_input_file_name(id=id)",
                            "Call"
                        ],
                        [
                            "self.get_result_file_name(id)",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_175": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(file_name)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_input_file_name(id=id)",
                            "Call"
                        ],
                        [
                            "self.get_result_file_name(id)",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_176": {
                "obj": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "check_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_input_check_file_name(id=id)",
                            "Call"
                        ],
                        [
                            "self.get_result_check_file_name(id)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "l_orig.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.weight * (1 - self.weight_decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_286": {
                "variable": {
                    "value": "l_orig.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.bias * (1 - self.weight_decay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_294": {
                "variable": {
                    "value": "l_orig.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.weight + ss * score_transform * l_eps.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_296": {
                "variable": {
                    "value": "l_orig.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.bias + ss * score_transform * l_eps.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "agents/GTN_worker.py": {
        "torch": {
            "load_124": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_input_file_name(id=self.id)",
                            "Call"
                        ],
                        [
                            "self.get_result_file_name(id=self.id)",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_24": {
                "seed": {
                    "value": "id + bohb_id * id * 1000 + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_25": {
                "seed": {
                    "value": "id + bohb_id * id * 1000 + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(file_name)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_input_file_name(id=self.id)",
                            "Call"
                        ],
                        [
                            "self.get_result_file_name(id=self.id)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_154": {
                "obj": {
                    "value": "{}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "check_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.get_input_check_file_name(id=self.id)",
                            "Call"
                        ],
                        [
                            "self.get_result_check_file_name(id=self.id)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "l_eps.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(mean=torch.zeros_like(l_virt.weight), std=torch.ones_like(l_virt.weight)) * self.noise_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_183": {
                "variable": {
                    "value": "l_eps.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-l_eps.weight",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_162": {
                "variable": {
                    "value": "l_eps.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.normal(mean=torch.zeros_like(l_virt.bias), std=torch.ones_like(l_virt.bias)) * self.noise_std",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_169": {
                "variable": {
                    "value": "l_virt.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.weight + l_eps.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_173": {
                "variable": {
                    "value": "l_virt.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.weight - l_eps.weight",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_185": {
                "variable": {
                    "value": "l_eps.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "-l_eps.bias",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "l_virt.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.bias + l_eps.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_175": {
                "variable": {
                    "value": "l_virt.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l_orig.bias - l_eps.bias",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "normal_159": {
                "mean": {
                    "value": "torch.zeros_like(l_virt.weight)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones_like(l_virt.weight)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normal_162": {
                "mean": {
                    "value": "torch.zeros_like(l_virt.bias)",
                    "type": "Call",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.ones_like(l_virt.bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_159": {
                "input": {
                    "value": "l_virt.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_160": {
                "input": {
                    "value": "l_virt.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_162": {
                "input": {
                    "value": "l_virt.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_163": {
                "input": {
                    "value": "l_virt.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agents/PPO.py": {
        "torch": {
            "Adam_37": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self.actor.parameters()) + list(self.critic.parameters())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "ppo_config['lr']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config['agents'][agent_name]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_168": {
                "variable": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logprobs - old_logprobs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_174": {
                "input": {
                    "value": "ratios",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(logprobs - old_logprobs)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1 - self.eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1 + self.eps_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_175": {
                "input": {
                    "value": "surr1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ratios * advantages",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mse_loss_175": {
                "input": {
                    "value": "state_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic(states).squeeze()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "new_rewards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.FloatTensor(new_rewards).to(self.device)",
                            "Call"
                        ],
                        [
                            "(new_rewards - new_rewards.mean()) / (new_rewards.std() + 1e-05)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "agents/QL.py": {
        "torch": {
            "tensor_97": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.q_table[int(state.item())]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_num_threads_112": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_93": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.q_table[int(state.item())]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_98": {
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_94": {
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_94": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/REPTILE.py": {
        "torch": {
            "sum_53": {
                "input": {
                    "value": "torch.abs(agent_state_dict[key] - old_state_dict[key])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_53": {
                "input": {
                    "value": "agent_state_dict[key] - old_state_dict[key]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "agents/SAC.py": {
        "torch": {
            "min_55": {
                "variable": {
                    "value": "min_q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.critic_1(states, pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_55": {
                "variable": {
                    "value": "min_q_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_56": {
                "variable": {
                    "value": "min_q_next_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.critic_target_1(next_states, next_pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "min_q_next_pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mse_loss_66": {
                "variable": {
                    "value": "critic1_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_1(states, actions).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "q_backup.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_67": {
                "variable": {
                    "value": "critic2_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_2(states, actions).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "q_backup.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_109": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "actor_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.actor.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_110": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.critic_1.parameters()) + list(self.critic_2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "self.log_alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "self.alpha_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.log_alpha]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agents/SARSA.py": {
        "torch": {
            "tensor_84": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.q_table[int(state.item())]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_num_threads_99": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "self.q_table[int(state.item())]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_85": {
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_85": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_81": {
                "input": {
                    "value": "q_vals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ],
                        [
                            "torch.tensor(self.q_table[int(state.item())])",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_81": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/TD3.py": {
        "torch": {
            "Adam_134": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "actor_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.actor.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.critic_1.parameters()) + list(self.critic_2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_81": {
                "variable": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target_1(next_states, next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_90": {
                "input": {
                    "value": "current_Q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_2(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(target_Q1, target_Q2)",
                            "Call"
                        ],
                        [
                            "rewards + (1 - dones) * self.gamma * target_Q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_75": {
                "input": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer.sample(self.batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_128": {
                "*size": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_123": {
                "*size": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "agents/TD3_discrete_vary.py": {
        "torch": {
            "Adam_172": {
                "variable": {
                    "value": "self.actor_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "actor_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.actor.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "self.critic_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "critic_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.critic_1.parameters()) + list(self.critic_2.parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_185": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_186": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_82": {
                "variable": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_Q1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_target_1(next_states, next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_159": {
                "variable": {
                    "value": "diag",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_91": {
                "input": {
                    "value": "current_Q2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.critic_2(states, actions)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(target_Q1, target_Q2)",
                            "Call"
                        ],
                        [
                            "rewards + (1 - dones) * self.gamma * target_Q",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_167": {
                "*size": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_163": {
                "*size": {
                    "value": "self.action_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_like_76": {
                "input": {
                    "value": "actions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer.sample(self.batch_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "agents/TD3_vary.py": {
        "torch": {
            "set_num_threads_66": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "agents/base_agent.py": {
        "torch": {
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "envs/env_factory.py": {
        "torch": {}
    },
    "envs/env_wrapper.py": {
        "torch": {
            "tensor_63": {
                "variable": {
                    "value": "next_state_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action=action.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action=action.to(self.env.device), state=state.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ],
                        [
                            "self.env.reset()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "variable": {
                    "value": "reward_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reward_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "reward_sum + reward",
                            "BinOp"
                        ],
                        [
                            "reward",
                            "variable"
                        ],
                        [
                            "reward",
                            "variable"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_65": {
                "variable": {
                    "value": "done_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "done",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action=action.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "done.to('cpu')",
                            "Call"
                        ],
                        [
                            "self.env.step(action=action.to(self.env.device), state=state.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "state_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action=action.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action=action.to(self.env.device), state=state.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ],
                        [
                            "self.env.reset()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_77": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.env.step(action=action.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action=action.to(self.env.device), state=state.to(self.env.device))",
                            "Call"
                        ],
                        [
                            "self.env.step(action)",
                            "Call"
                        ],
                        [
                            "self.env.reset()",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_80": {
                "variable": {
                    "value": "state_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[state]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "ndarray": {
                    "value": "self.env.action_space.sample()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_92": {
                "data": {
                    "value": "[action]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "envs/reward_env.py": {
        "torch": {
            "tensor_72": {
                "variable": {
                    "value": "reward_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "reward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.real_env.step(action)",
                            "Call"
                        ],
                        [
                            "reward",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "state_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_79": {
                "variable": {
                    "value": "next_state_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.real_env.step(action)",
                            "Call"
                        ],
                        [
                            "next_state",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "self.info_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "variable": {
                    "value": "info_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(info.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_95": {
                "variable": {
                    "value": "input_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_torch.to(self.device), info_torch.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "state_torch.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "input_state_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_state_torch.to(self.device), info_torch.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "state_torch.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_113": {
                "variable": {
                    "value": "info_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(info.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "input_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_torch.to(self.device), info_torch.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "state_torch.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "input_state_next",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_state_torch.to(self.device), info_torch.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "state_torch.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "variable": {
                    "value": "info_torch",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "list(info.values())",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "envs/virtual_env.py": {
        "torch": {
            "tensor_36": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "self.reset_env.reset()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_45": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(action.to(self.device), self.state.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "action.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_47": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(action.to(self.device), state.to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "action.dim() - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_acrobot.py": {
        "torch": {
            "manual_seed_86": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_96": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_acrobot_params.py": {
        "torch": {
            "manual_seed_131": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_141": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_acrobot_vary_hp.py": {
        "torch": {
            "manual_seed_96": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_97": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole.py": {
        "torch": {
            "manual_seed_85": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_86": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_95": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole_compare_reward_envs.py": {
        "torch": {
            "load_69": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_145": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole_params.py": {
        "torch": {
            "manual_seed_131": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_132": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_140": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_141": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole_reward_env.py": {
        "torch": {
            "manual_seed_95": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_96": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole_transfer_algo.py": {
        "torch": {
            "load_69": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_147": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_algo' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole_transfer_vary_hp.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_202": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_vary_hp' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cartpole_vary_hp.py": {
        "torch": {
            "manual_seed_95": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_96": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_104": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_105": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc.py": {
        "torch": {
            "manual_seed_94": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_95": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_compare_reward_envs.py": {
        "torch": {
            "load_62": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_140": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_compare_reward_envs_debug_td3.py": {
        "torch": {
            "load_53": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_107": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, time + '_' + 'best' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_params.py": {
        "torch": {
            "manual_seed_146": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_147": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_se_params.py": {
        "torch": {
            "manual_seed_146": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_147": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_se_params_v2.py": {
        "torch": {
            "manual_seed_146": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_147": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_transfer_algo.py": {
        "torch": {
            "load_61": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_140": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_algo' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_cmc_transfer_vary_hp.py": {
        "torch": {
            "load_65": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_195": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_vary_hp' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_exploration_gain.py": {
        "torch": {
            "manual_seed_91": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_100": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_101": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld.py": {
        "torch": {
            "manual_seed_86": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_87": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_95": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_96": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_compare_reward_envs.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_136": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_different_sizes.py": {
        "torch": {
            "manual_seed_88": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_89": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_97": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_heatmap.py": {
        "torch": {
            "load_52": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_115": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'heatmap_' + str(BREAK) + '_' + str(MODE) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_reward_env.py": {
        "torch": {
            "manual_seed_95": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_96": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_single_pc.py": {
        "torch": {
            "manual_seed_89": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_90": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "set_num_threads_92": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_step_size.py": {
        "torch": {
            "manual_seed_101": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_102": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_110": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_111": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_transfer_algo.py": {
        "torch": {
            "load_75": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_138": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_algo' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_gridworld_transfer_vary_hp.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_175": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_vary_hp' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah.py": {
        "torch": {
            "manual_seed_95": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_96": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah_compare_reward_envs.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_162": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah_params.py": {
        "torch": {
            "manual_seed_144": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_145": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah_se_params.py": {
        "torch": {
            "manual_seed_145": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_146": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah_transfer_algo.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_153": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_algo' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah_transfer_vary_hp.py": {
        "torch": {
            "load_76": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_215": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best_transfer_vary_hp' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_halfcheetah_vary_hp.py": {
        "torch": {
            "manual_seed_97": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_98": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_mountaincar_params.py": {
        "torch": {
            "manual_seed_133": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_134": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_142": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_143": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_evaluate_pendulum.py": {
        "torch": {
            "manual_seed_93": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_94": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_pendulum_compare_reward_envs.py": {
        "torch": {
            "load_47": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_88": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(model_file)",
                            "Call"
                        ],
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(SAVE_DIR, 'best' + str(MODEL_NUM) + '_' + str(mode) + '.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_evaluate_pendulum_params.py": {
        "torch": {
            "manual_seed_145": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_146": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_acrobot_histogram.py": {
        "torch": {
            "load_19": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "virt_next_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_states_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "virt_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "virt_rewards_incorrect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "virt_dones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_164": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_165": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_acrobot_vary_barplot.py": {
        "torch": {
            "load_84": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_96": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(FILE_DIR, '2.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_acrobot_vary_hp.py": {
        "torch": {
            "load_39": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_acrobot_vary_hp_both_lengths.py": {
        "torch": {
            "load_41": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_acrobot_vary_hp_kde_plot.py": {
        "torch": {
            "load_88": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_100": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(FILE_DIR, '2.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_compare_reward_envs.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_correlation_se_real.py": {
        "torch": {
            "load_8": {
                "variable": {
                    "value": "rewards_ddqn",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path_ddqn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/home/ferreira/Projects/learning_environments/experiments/correlation_hps_se_real/2_ddqn_vary_correlation_syn_real_10_agents_num_40_model_num.pt'",
                            "str"
                        ]
                    ]
                }
            },
            "load_9": {
                "variable": {
                    "value": "rewards_duelingddqn",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path_duelingddqn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/home/ferreira/Projects/learning_environments/experiments/correlation_hps_se_real/2_duelingddqn_vary_correlation_syn_real_10_agents_num_40_model_num.pt'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_histogram.py": {
        "torch": {
            "load_19": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_59": {
                "variable": {
                    "value": "virt_next_states",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_states_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "virt_rewards",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "virt_rewards_incorrect",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "rewards_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_62": {
                "variable": {
                    "value": "virt_dones",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dones_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "replay_buffer_test_all.get_all()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_151": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_152": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_threshold.py": {
        "torch": {
            "load_172": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, model_file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_133": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "q_values.gather(1, actions.long().unsqueeze(1)).squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "expected_q_value.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_167": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_205": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(reward_file_name)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "reward_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_file_name in enumerate(reward_file_names)",
                            "Call"
                        ],
                        [
                            "reward_file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_216": {
                "variable": {
                    "value": "state_reward",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(states, rewards)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_226": {
                "input": {
                    "value": "state_reward_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state_reward",
                            "variable"
                        ],
                        [
                            "torch.cat((state_reward_concat, state_reward), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_234": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "reward_file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reward_file_name in enumerate(reward_file_names)",
                            "Call"
                        ],
                        [
                            "reward_file_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_157": {
                "input": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_157": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "state_reward_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_reward_concat, state_reward)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_151": {
                "input": {
                    "value": "qvals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ],
                        [
                            "self.model(state.to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_151": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_224": {
                "input": {
                    "value": "state_reward_concat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "state_reward",
                            "variable"
                        ],
                        [
                            "torch.cat((state_reward_concat, state_reward), 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_107": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_transfer.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_transfer_algo.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_transfer_vary_hp.py": {
        "torch": {
            "load_70": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_vary_hp.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_vary_hp_barplot.py": {
        "torch": {
            "load_81": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_93": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(FILE_DIR, '2.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_vary_hp_barplot_generalization_gap.py": {
        "torch": {
            "load_83": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_95": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(FILE_DIR, '2.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_vary_hp_both_lengths.py": {
        "torch": {
            "load_67": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_vary_hp_kde_plot.py": {
        "torch": {
            "load_92": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_104": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(FILE_DIR, '2.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cartpole_vary_hp_kde_plot_generalization_gap.py": {
        "torch": {
            "load_94": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_106": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(FILE_DIR, '2.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_cmc_compare_reward_envs.py": {
        "torch": {
            "load_51": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cmc_compare_reward_envs_debug_td3.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cmc_compare_reward_envs_print_baseline.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "LOG_FILE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../results/cmc_compare_reward_envs/best0.pt'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cmc_transfer_algo.py": {
        "torch": {
            "load_48": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_cmc_transfer_vary_hp.py": {
        "torch": {
            "load_49": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_gridworld.py": {
        "torch": {
            "load_98": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_gridworld_compare_reward_envs.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_gridworld_heatmap.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "RESULT_FILE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/home/dingsda/master_thesis/learning_environments/results/cliff_compare_reward_envs/heatmap_solved_6.pt'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_gridworld_learned_reward_env.py": {
        "torch": {
            "load_189": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_74": {
                "data": {
                    "value": "[action]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTNC_visualize_gridworld_transfer_algo.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_gridworld_transfer_vary_hp.py": {
        "torch": {
            "load_68": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_halfcheetah_compare_reward_envs.py": {
        "torch": {
            "load_78": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_halfcheetah_transfer_algo.py": {
        "torch": {
            "load_77": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_halfcheetah_transfer_vary_hp.py": {
        "torch": {
            "load_80": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTNC_visualize_pendulum_compare_reward_envs.py": {
        "torch": {
            "load_16": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "log_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LOG_FILES",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/GTN_Worker.py": {
        "torch": {
            "set_num_threads_8": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/GTN_Worker_single_pc.py": {
        "torch": {
            "set_num_threads_13": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/bohb_params_DDQN_ICM_cartpole.py": {
        "torch": {
            "manual_seed_103": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_104": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_112": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_113": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/bohb_params_DuelingDDQN_cartpole.py": {
        "torch": {
            "manual_seed_114": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_115": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_123": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_124": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/bohb_params_QL_CB.py": {
        "torch": {
            "manual_seed_89": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_90": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_98": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_99": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/bohb_params_TD3_discrete_cartpole.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "best_models",
                            "variable"
                        ],
                        [
                            "model_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "manual_seed_218": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_219": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_227": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_228": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/bohb_params_TD3_halfcheetah.py": {
        "torch": {}
    },
    "experiments/bohb_params_TD3_halfcheetah_after.py": {
        "torch": {
            "load_101": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "SAVE_FILE",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/home/fr/fr_fr/fr_tn87/master_thesis/learning_environments/results/GTNC_evaluate_halfcheetah_params_2020-12-26-19_2/GTN_models_HalfCheetah-v3/HalfCheetah-v3_ZW3ZIL.pt'",
                            "str"
                        ],
                        [
                            "'/home/fr/fr_fr/fr_tn87/master_thesis/learning_environments/results/GTNC_evaluate_halfcheetah_params_2020-12-31-13_4/GTN_models_HalfCheetah-v3/HalfCheetah-v3_96MQNQ.pt'",
                            "str"
                        ],
                        [
                            "'/home/fr/fr_fr/fr_tn87/master_thesis/learning_environments/results/GTNC_evaluate_halfcheetah_params_2020-12-29-19_102/GTN_models_HalfCheetah-v3/HalfCheetah-v3_XB6ARP.pt'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/bohb_params_TD3_mountaincar_halfcheetah_ICM.py": {
        "torch": {
            "manual_seed_110": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_all_111": {
                "seed": {
                    "value": "int(sys.argv[1]) + int(time.time())",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_119": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_all_120": {
                "seed": {
                    "value": "int(time.time())",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "experiments/bohb_params_TD3_pendulum.py": {
        "torch": {}
    },
    "experiments/syn_env_evaluate_acrobot_vary_hp_2.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_acrobot_vary_hp_2_DuelingDDQN.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_acrobot_vary_hp_2_TD3_discrete.py": {
        "torch": {
            "load_21": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_for_visualization.py": {
        "torch": {
            "load_13": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/home/ferreira/Projects/learning_environments/results/thomas_results/GTN_models_CartPole-v0_opt/CartPole-v0_39_ICNUC3.pt'",
                            "str"
                        ],
                        [
                            "file_path",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_mbrl_baseline.py": {
        "torch": {
            "load_36": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_vary_hp_2.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_vary_hp_2_DuelingDDQN.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_vary_hp_2_DuelingDDQN_correlation.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_vary_hp_2_TD3_discrete.py": {
        "torch": {
            "load_26": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_vary_hp_2_correlation.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_cartpole_vary_hp_2_eval_generalization_gap.py": {
        "torch": {
            "load_14": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_evaluate_inference_time.py": {
        "torch": {
            "load_15": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_136": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(file_path)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "file_name in enumerate(file_list)",
                            "Call"
                        ],
                        [
                            "os.path.join(os.getcwd(), experiment_name + '.pt')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_learn_halfcheetah.py": {
        "torch": {
            "manual_seed_91": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "manual_seed_all_92": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "id + int(time.time())",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "experiments/syn_env_visualize_consistency.py": {
        "torch": {
            "load_25": {
                "variable": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "file_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FILE_DIR, file)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/actor_critic.py": {
        "torch": {
            "Parameter_43": {
                "variable": {
                    "value": "self.action_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(action_dim, device=config['device']) * config['agents'][agent_name]['action_std']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_46": {
                "variable": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_48": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.net(state))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.net(state))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "self.action_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tanh_52": {
                "variable": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.net(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_53": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "action_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.net(state))",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.net(state))",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "self.action_std",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_54": {
                "variable": {
                    "value": "action_logprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.log_prob(action)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "dist_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist.entropy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_135": {
                "variable": {
                    "value": "self.mu_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_136": {
                "variable": {
                    "value": "self.log_std_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_145": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ],
                        [
                            "self.mu_layer(x)",
                            "Call"
                        ],
                        [
                            "self.apply_squashing_func(mu, pi, log_pi)",
                            "Call"
                        ],
                        [
                            "mu * self.output_limit",
                            "BinOp"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_146": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(pi)",
                            "Call"
                        ],
                        [
                            "dist.rsample()",
                            "Call"
                        ],
                        [
                            "self.apply_squashing_func(mu, pi, log_pi)",
                            "Call"
                        ],
                        [
                            "pi * self.output_limit",
                            "BinOp"
                        ],
                        [
                            "pi",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_155": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_std_layer(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_157": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(self.log_std_layer(x))",
                            "Call"
                        ],
                        [
                            "self.log_std_min + 0.5 * (self.log_std_max - self.log_std_min) * (log_std + 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_160": {
                "variable": {
                    "value": "dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tanh(mu)",
                            "Call"
                        ],
                        [
                            "self.mu_layer(x)",
                            "Call"
                        ],
                        [
                            "self.apply_squashing_func(mu, pi, log_pi)",
                            "Call"
                        ],
                        [
                            "mu * self.output_limit",
                            "BinOp"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(log_std)",
                            "Call"
                        ]
                    ]
                }
            },
            "gumbel_softmax_35": {
                "logits": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.net(state) * self.max_action",
                            "BinOp"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ],
                        [
                            "action",
                            "Method Argument"
                        ]
                    ]
                },
                "tau": {
                    "value": "tau",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tau",
                            "Method Argument"
                        ]
                    ]
                },
                "hard": {
                    "value": "self.gumbel_softmax_hard",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "torch.log(self.clip_but_pass_gradient(1 - pi.pow(2), l=0.0, u=1.0) + 1e-06)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_19": {
                "input": {
                    "value": "self.net(state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "tensors": {
                    "value": "[state, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "len(state.shape) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_148": {
                "input": {
                    "value": "self.clip_but_pass_gradient(1 - pi.pow(2), l=0.0, u=1.0) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_43": {
                "*size": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ],
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "config['device']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ],
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "models/icm_baseline.py": {
        "torch": {
            "cat_86": {
                "variable": {
                    "value": "state_next_state_concat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(state_encoded, next_state_encoded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_90": {
                "variable": {
                    "value": "forward_model_input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[state_encoded, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_132": {
                "variable": {
                    "value": "self.icm_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "icm_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_119": {
                "variable": {
                    "value": "self.action_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_142": {
                "variable": {
                    "value": "actions_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "actions.to(torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_166": {
                "variable": {
                    "value": "actions_inp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "action.to(torch.long)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(input_dim, output_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_115": {
                "variable": {
                    "value": "self.action_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_117": {
                "variable": {
                    "value": "self.action_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mse_loss_171": {
                "input": {
                    "value": "next_states_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input=(states, next_states, actions_inp))",
                            "Call"
                        ],
                        [
                            "self.model(input=(state, next_state, actions_inp))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "next_states_pred_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input=(states, next_states, actions_inp))",
                            "Call"
                        ],
                        [
                            "self.model(input=(state, next_state, actions_inp))",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_171": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mse_loss_149": {
                "input": {
                    "value": "next_states_pred_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input=(states, next_states, actions_inp))",
                            "Call"
                        ],
                        [
                            "self.model(input=(state, next_state, actions_inp))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "next_states_encoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(input=(states, next_states, actions_inp))",
                            "Call"
                        ],
                        [
                            "self.model(input=(state, next_state, actions_inp))",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_57": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_58": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_66": {
                "tensors": {
                    "value": "[x, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "tensors": {
                    "value": "[x, action]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/model_utils.py": {
        "torch": {
            "Identity_22": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "PReLU_10": {
                "variable": {
                    "value": "act_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_39": {
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ReLU_12": {
                "variable": {
                    "value": "act_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LayerNorm_27": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_config['hidden_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_config['hidden_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_config['hidden_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_14": {
                "variable": {
                    "value": "act_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_config['hidden_size']",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nn_config['hidden_size']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tanh_16": {
                "variable": {
                    "value": "act_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_18": {
                "variable": {
                    "value": "act_fn",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "self.state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, state_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_19": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, action_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "self.next_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, state_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "variable": {
                    "value": "self.reward",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "self.done",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(max_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_72": {
                "variable": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.action",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_109": {
                "obj": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal.squeeze()",
                            "Call"
                        ],
                        [
                            "normal",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_113": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "one_hot_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_130": {
                "data": {
                    "value": "[torch.argmax(one_hot)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "save_160": {
                "obj": {
                    "value": "save_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(out_dir, str(mode) + '_' + experiment_name + '.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_83": {
                "obj": {
                    "value": "val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "val.item()",
                            "Call"
                        ],
                        [
                            "val",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_112": {
                "obj": {
                    "value": "normal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal.squeeze()",
                            "Call"
                        ],
                        [
                            "normal",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_116": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "one_hot_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(normal)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "one_hot_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "one_hot_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_130": {
                "input": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(one_hot_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(one_hot_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(n, one_hot_dim)",
                            "Call"
                        ],
                        [
                            "one_hot",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}