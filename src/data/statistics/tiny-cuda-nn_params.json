{
    "benchmarks/image/bench_tensorflow.py": {
        "tensorflow": {
            "matmul_166": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.cast(inputs, dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.cast(weights, dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_230": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relative_l2_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(target_tensor - output_tensor) ** 2 / (tf.stop_gradient(output_tensor) ** 2 + 0.01)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "trainable_variables_233": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_251": {
                "variable": {
                    "value": "batch_size_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "AdamOptimizer_252": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "config['optimizer']['learning_rate']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta1": {
                    "value": "config['optimizer']['beta1']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "beta2": {
                    "value": "config['optimizer']['beta2']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "config['optimizer']['epsilon']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ConfigProto_268": {
                "variable": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_68": {
                "variable": {
                    "value": "self.data_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_80": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xs * tf.constant([shape[1], shape[0]], dtype=tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_81": {
                "variable": {
                    "value": "indices_clipped",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.clip_by_value(indices[:, 1], 0, shape[0] - 1), tf.clip_by_value(indices[:, 0], 0, shape[1] - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_159": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "(inputs.shape[1], units)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.glorot_uniform_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_170": {
                "x": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.cast(inputs, dtype), tf.cast(weights, dtype))",
                            "Call"
                        ],
                        [
                            "result + tf.cast(biases, dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.concat(results, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [-1, self.n_bins * self.n_levels * dims])",
                            "Call"
                        ],
                        [
                            "cdfs[..., 1:] - cdfs[..., :-1]",
                            "BinOp"
                        ],
                        [
                            "result + cdfs_right[..., 1:] - cdfs_right[..., :-1] + cdfs_left[..., 1:] - cdfs_left[..., :-1]",
                            "BinOp"
                        ],
                        [
                            "result / scale",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_191": {
                "variable": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss * loss_scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "variables",
                            "Method Argument"
                        ],
                        [
                            "variables",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_198": {
                "variable": {
                    "value": "all_finite",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[f for f in finites if f is not None]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_204": {
                "variable": {
                    "value": "(gradients, gradients_norm)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss * loss_scale, variables)",
                            "Call"
                        ],
                        [
                            "[grad / loss_scale if grad is not None else None for grad in gradients]",
                            "ListComp"
                        ],
                        [
                            "[tf.where(finite, grad, zero) if grad is not None else None for (finite, grad, zero) in zip(finites, gradients, zeros)]",
                            "ListComp"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, clip_norm=clip_norm)",
                            "Call"
                        ],
                        [
                            "compute_gradients(loss, variables, LOSS_SCALE)",
                            "Call"
                        ],
                        [
                            "gradients",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "clip_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "global_norm_206": {
                "variable": {
                    "value": "gradients_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gradients(loss * loss_scale, variables)",
                            "Call"
                        ],
                        [
                            "[grad / loss_scale if grad is not None else None for grad in gradients]",
                            "ListComp"
                        ],
                        [
                            "[tf.where(finite, grad, zero) if grad is not None else None for (finite, grad, zero) in zip(finites, gradients, zeros)]",
                            "ListComp"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, clip_norm=clip_norm)",
                            "Call"
                        ],
                        [
                            "compute_gradients(loss, variables, LOSS_SCALE)",
                            "Call"
                        ],
                        [
                            "gradients",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_211": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "apply_gradients",
                    "type": "str",
                    "possible_values": []
                }
            },
            "disable_eager_execution_240": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_nd_85": {
                "params": {
                    "value": "self.data_tf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices_clipped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([tf.clip_by_value(indices[:, 1], 0, shape[0] - 1), tf.clip_by_value(indices[:, 0], 0, shape[1] - 1)], axis=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_108": {
                "variable": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stop": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "num": {
                    "value": "self.n_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "variable": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.linspace(0.0, 1.0, self.n_bins + 1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(boundaries, [1 for _ in inputs.shape] + [-1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1 for _ in inputs.shape] + [-1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_140": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "results",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.cast(inputs, dtype), tf.cast(weights, dtype))",
                            "Call"
                        ],
                        [
                            "result + tf.cast(biases, dtype)",
                            "BinOp"
                        ],
                        [
                            "tf.concat(results, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.reshape(result, [-1, self.n_bins * self.n_levels * dims])",
                            "Call"
                        ],
                        [
                            "cdfs[..., 1:] - cdfs[..., :-1]",
                            "BinOp"
                        ],
                        [
                            "result + cdfs_right[..., 1:] - cdfs_right[..., :-1] + cdfs_left[..., 1:] - cdfs_left[..., :-1]",
                            "BinOp"
                        ],
                        [
                            "result / scale",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_bins * self.n_levels * dims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_158": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_163": {
                "variable": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "biases",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "units",
                    "type": "variable",
                    "possible_values": [
                        [
                            "units",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_166": {
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('weights', (inputs.shape[1], units), initializer=tf.glorot_uniform_initializer())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_175": {
                "features": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "name_scope_190": {
                "name": {
                    "value": "gradient_computation",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_274": {
                "config": {
                    "value": "session_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_283": {
                "variable": {
                    "value": "output_dummy_variable",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros(shape=[batch_size, target_fun.n_channels], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "while_loop_295": {
                "variable": {
                    "value": "(train_op, _, loss)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lambda it, _, __: tf.less(it, PRINT_INTERVAL)",
                            "Lambda"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": [
                        [
                            "body",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[0, 1.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_101": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_168": {
                "x": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('biases', units, initializer=tf.constant_initializer())",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu6_177": {
                "features": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_193": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "constant_80": {
                "value": {
                    "value": "[shape[1], shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_82": {
                "t": {
                    "value": "indices[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "shape[0] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_83": {
                "t": {
                    "value": "indices[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "shape[1] - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_179": {
                "features": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_all_195": {
                "input_tensor": {
                    "value": "tf.is_finite(grad)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_196": {
                "condition": {
                    "value": "finite",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_229": {
                "input": {
                    "value": "output_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "make_graph()",
                            "Call"
                        ],
                        [
                            "linear_layer(current_tensor, target_fun.n_channels, tf.float16, f'fc_out', False)",
                            "Call"
                        ],
                        [
                            "activation(output_tensor, config['network']['output_activation'])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_283": {
                "shape": {
                    "value": "[batch_size, target_fun.n_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "initialize_all_variables_284": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "less_287": {
                "x": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": [
                        [
                            "it",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "PRINT_INTERVAL",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "int"
                        ],
                        [
                            "100",
                            "int"
                        ],
                        [
                            "PRINT_INTERVAL * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_292": {
                "variable": {
                    "value": "next_sequencer",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tanh_95": {
                "x": {
                    "value": "1.12 * x / (math.sqrt(2.0) * radius)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "erf_98": {
                "x": {
                    "value": "x / (math.sqrt(2.0) * radius)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "name_scope_112": {
                "name": {
                    "value": "f'level{level}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "abs_118": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_initializer_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "selu_181": {
                "features": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_finite_195": {
                "x": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "control_dependencies_289": {
                "control_inputs": {
                    "value": "[sequencer]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_291": {
                "control_inputs": {
                    "value": "[local_train_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "leaky_relu_183": {
                "features": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_120": {
                "x": {
                    "value": "inputs * scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "bindings/torch/setup.py": {
        "torch": {
            "is_available_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_device_capability_44": {
                "variable": {
                    "value": "(major, minor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "bindings/torch/tinycudann/modules.py": {
        "torch": {
            "Parameter_104": {
                "variable": {
                    "value": "self.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "initial_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.native_tcnn_module.initial_params(seed)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_118": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.cuda()",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, padded_batch_size - batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "samples/mlp_learning_an_image_pytorch.py": {
        "torch": {
            "device_104": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_133": {
                "variable": {
                    "value": "xs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "half_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 / resolution[0]",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "1 - half_dx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "linspace_134": {
                "variable": {
                    "value": "ys",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "half_dx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 / resolution[0]",
                            "BinOp"
                        ]
                    ]
                },
                "end": {
                    "value": "1 - half_dx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "meshgrid_135": {
                "variable": {
                    "value": "(xv, yv)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "[xs, ys]",
                    "type": "List",
                    "possible_values": []
                },
                "indexing": {
                    "value": "ij",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_137": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(yv.flatten(), xv.flatten())",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_137": {
                "variable": {
                    "value": "xy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trace_151": {
                "variable": {
                    "value": "traced_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Image(args.image, device)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_154": {
                "variable": {
                    "value": "batch",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_151": {
                "*size": {
                    "value": "[batch_size, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "device",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_65": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_70": {
                "data": {
                    "value": "[shape[1], shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "xs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_grid_bwdbwd.py": {
        "torch": {
            "Sequential_34": {
                "variable": {
                    "value": "self.decoder",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.encoder.n_output_dims, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.3, 0.4, 0.5]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "device_85": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_88": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.002",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_112": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_206": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.17, 0.55, 0.79]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_124": {
                "func": {
                    "value": "apply_on_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_on_x",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device).requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradgradcheck_132": {
                "func": {
                    "value": "apply_on_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "apply_on_x",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device).requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "nondet_tol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_142": {
                "variable": {
                    "value": "dL_dy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[*x.shape[:-1], model.encoder.n_output_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_torch_precision(_C.preferred_precision())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_152": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.17, 0.55, 0.79]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_153": {
                "variable": {
                    "value": "dL_dy",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[*x.shape[:-1], model.encoder.n_output_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_torch_precision(_C.preferred_precision())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_163": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0.17, 0.55, 0.79]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "gradcheck_186": {
                "func": {
                    "value": "backward_apply_on_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backward_apply_on_params",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "model.encoder.params",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradcheck_195": {
                "func": {
                    "value": "backward_apply_on_dLdy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "backward_apply_on_dLdy",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "torch.randn([1, model.encoder.n_output_dims], dtype=dtype, device=device).requires_grad_(True)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "atol": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "rtol": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "self.encoder.n_output_dims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_46": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_72": {
                "outputs": {
                    "value": "nablas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "autograd.grad(sdf, x, torch.ones_like(sdf, device=x.device), create_graph=True, retain_graph=True, only_inputs=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.3, 0.4, 0.5]], dtype=torch.float, device=device).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.rand([51200, 3], dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(nablas, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[51200, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "mse_loss_96": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "nablas_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nablas.norm(dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "nablas_norm.new_ones(nablas_norm.shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensor_127": {
                "data": {
                    "value": "[[0.17, 0.55, 0.79]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_135": {
                "data": {
                    "value": "[[0.17, 0.55, 0.79]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_197": {
                "*size": {
                    "value": "[1, model.encoder.n_output_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_torch_precision(_C.preferred_precision())",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ],
                        [
                            "torch.device('cuda')",
                            "Call"
                        ]
                    ]
                }
            },
            "grad_49": {
                "outputs": {
                    "value": "sdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(encoded)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor([[0.3, 0.4, 0.5]], dtype=torch.float, device=device).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.rand([51200, 3], dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device).requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "torch.tensor([[0.17, 0.55, 0.79]], dtype=torch.float, device=device)",
                            "Call"
                        ],
                        [
                            "x.requires_grad_(True)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones_like(sdf, device=x.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "input": {
                    "value": "nablas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "autograd.grad(sdf, x, torch.ones_like(sdf, device=x.device), create_graph=True, retain_graph=True, only_inputs=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_like_52": {
                "input": {
                    "value": "sdf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "model.forward_with_nablas(x)",
                            "Call"
                        ],
                        [
                            "self.decoder(encoded)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/test_random_input.py": {
        "torch": {
            "device_34": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_41": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[_x, 1000, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/test_toch_bindings.py": {
        "torch": {
            "rand_40": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "rand_45": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}