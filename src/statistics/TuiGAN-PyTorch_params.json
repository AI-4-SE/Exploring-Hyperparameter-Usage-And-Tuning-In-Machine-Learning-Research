{
    "utils/functions.py": {
        "sklearn": {},
        "torch": {
            "Upsample_74": {
                "variable": {
                    "value": "m",
                    "possible_values": []
                },
                "size": {
                    "value": "[round(sx), round(sy)]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "rand_95": {
                "variable": {
                    "value": "alpha",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_141": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "possible_values": [
                        [
                            "img.imread(paths_trainA[i])",
                            "Call"
                        ],
                        [
                            "np2torch(x, opt)",
                            "Call"
                        ],
                        [
                            "x[:, 0:3, :, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ],
                        [
                            "img.imread('%s/%s' % (opt.input_dir, opt.input_name))",
                            "Call"
                        ],
                        [
                            "x[:, :, 0:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "device_236": {
                "variable": {
                    "value": "opt.device",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu if opt.not_cuda else cuda:0",
                    "possible_values": []
                }
            },
            "randn_62": {
                "variable": {
                    "value": "noise",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "round(size[1] / scale)",
                    "possible_values": []
                },
                "layout": {
                    "value": "round(size[2] / scale)",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_66": {
                "variable": {
                    "value": "noise2",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_69": {
                "variable": {
                    "value": "noise",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_samp",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_85": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "save_162": {
                "obj": {
                    "value": "netG.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG.pth' % opt.outf",
                    "possible_values": []
                }
            },
            "save_163": {
                "obj": {
                    "value": "netD.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD.pth' % opt.outf",
                    "possible_values": []
                }
            },
            "save_164": {
                "obj": {
                    "value": "z",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/z_opt.pth' % opt.outf",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "netG2.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netG2.pth' % opt.outf",
                    "possible_values": []
                }
            },
            "save_167": {
                "obj": {
                    "value": "netD2.state_dict()",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/netD2.pth' % opt.outf",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "z2",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/z2_opt.pth' % opt.outf",
                    "possible_values": []
                }
            },
            "load_198": {
                "variable": {
                    "value": "Gs",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Gs.pth' % dir",
                    "possible_values": []
                }
            },
            "load_199": {
                "variable": {
                    "value": "Zs",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Zs.pth' % dir",
                    "possible_values": []
                }
            },
            "load_200": {
                "variable": {
                    "value": "reals",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/reals.pth' % dir",
                    "possible_values": []
                }
            },
            "load_201": {
                "variable": {
                    "value": "NoiseAmp",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/NoiseAmp.pth' % dir",
                    "possible_values": []
                }
            },
            "load_213": {
                "variable": {
                    "value": "Gs",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Gs.pth' % dir",
                    "possible_values": []
                }
            },
            "load_214": {
                "variable": {
                    "value": "Zs",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Zs.pth' % dir",
                    "possible_values": []
                }
            },
            "load_215": {
                "variable": {
                    "value": "reals",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/reals.pth' % dir",
                    "possible_values": []
                }
            },
            "load_216": {
                "variable": {
                    "value": "NoiseAmp",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/NoiseAmp.pth' % dir",
                    "possible_values": []
                }
            },
            "load_217": {
                "variable": {
                    "value": "Gs2",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Gs2.pth' % dir",
                    "possible_values": []
                }
            },
            "load_218": {
                "variable": {
                    "value": "Zs2",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/Zs2.pth' % dir",
                    "possible_values": []
                }
            },
            "load_219": {
                "variable": {
                    "value": "reals2",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/reals2.pth' % dir",
                    "possible_values": []
                }
            },
            "load_220": {
                "variable": {
                    "value": "NoiseAmp2",
                    "possible_values": []
                },
                "f": {
                    "value": "'%s/NoiseAmp2.pth' % dir",
                    "possible_values": []
                }
            },
            "manual_seed_249": {
                "seed": {
                    "value": "opt.manualSeed",
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cpu",
                    "possible_values": []
                }
            },
            "grad_104": {
                "outputs": {
                    "value": "disc_interpolates",
                    "possible_values": [
                        [
                            "netD(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "possible_values": [
                        [
                            "alpha * real_data + (1 - alpha) * fake_data",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(device)",
                            "Call"
                        ],
                        [
                            "torch.autograd.Variable(interpolates, requires_grad=True)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "cat_121": {
                "variable": {
                    "value": "trainA",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trainA, x)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "trainB",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(trainB, y)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "is_available_250": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randn_65": {
                "*size": {
                    "value": "num_samp",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "size[0]",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size[1]",
                    "possible_values": []
                },
                "layout": {
                    "value": "size[2]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": [
                        [
                            "'cuda'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_86": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            },
            "ones_105": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "possible_values": []
                }
            }
        }
    },
    "models/TuiGAN.py": {
        "torch": {
            "ZeroPad2d_120": {
                "variable": {
                    "value": "m_noise",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(pad_noise)",
                    "possible_values": []
                }
            },
            "ZeroPad2d_121": {
                "variable": {
                    "value": "m_image",
                    "possible_values": []
                },
                "padding": {
                    "value": "int(pad_image)",
                    "possible_values": []
                }
            },
            "Adam_133": {
                "variable": {
                    "value": "optimizerD",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(netD.parameters(), netD2.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_d",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizerG",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(netG.parameters(), netG2.parameters())",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.lr_g",
                    "possible_values": []
                },
                "betas": {
                    "value": "(opt.beta1, 0.999)",
                    "possible_values": []
                }
            },
            "L1Loss_233": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "is_available_25": {
                "variable": {
                    "value": "self.is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.body",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.tail",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "max(N, opt.min_nfc)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.ker_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "opt.padd_size",
                    "possible_values": []
                }
            },
            "is_available_44": {
                "variable": {
                    "value": "self.is_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.body",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.tail",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(max(N, opt.min_nfc), opt.nc_im, kernel_size=opt.ker_size, stride=1, padding=opt.padd_size)",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.body2",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.tail2",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(max(N, opt.min_nfc), opt.nc_im, kernel_size=opt.ker_size, stride=1, padding=opt.padd_size)",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "x_c",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, y1, y2)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "LeakyReLU_12": {
                "negative_slope": {
                    "value": "0.2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "max(N, opt.min_nfc)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nc_im",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.ker_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "opt.padd_size",
                    "possible_values": []
                }
            },
            "Tanh_54": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "max(N, opt.min_nfc)",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "opt.nc_im",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "opt.ker_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "opt.padd_size",
                    "possible_values": []
                }
            },
            "Sigmoid_65": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "in_channel",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channel",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "ker_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "padd",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "num_features": {
                    "value": "out_channel",
                    "possible_values": []
                }
            }
        }
    },
    "utils/imresize.py": {
        "torch": {
            "from_numpy_29": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "possible_values": [
                        [
                            "x[:, :, :, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose((3, 2, 0, 1)) / 255",
                            "BinOp"
                        ],
                        [
                            "color.rgb2gray(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, None, None]",
                            "Subscript"
                        ],
                        [
                            "x.transpose(3, 2, 0, 1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "move_to_gpu(x)",
                            "Call"
                        ],
                        [
                            "x.type(torch.cuda.FloatTensor) if not opt.not_cuda else x.type(torch.FloatTensor)",
                            "IfExp"
                        ],
                        [
                            "norm(x)",
                            "Call"
                        ],
                        [
                            "x[0, :, :, :]",
                            "Subscript"
                        ],
                        [
                            "x.permute((1, 2, 0))",
                            "Call"
                        ],
                        [
                            "255 * denorm(x)",
                            "BinOp"
                        ],
                        [
                            "x.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "x.astype(np.uint8)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "outs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(outs, im)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "device_18": {
                "type": {
                    "value": "cuda",
                    "possible_values": []
                }
            }
        }
    },
    "utils/manipulate.py": {
        "torch": {}
    }
}