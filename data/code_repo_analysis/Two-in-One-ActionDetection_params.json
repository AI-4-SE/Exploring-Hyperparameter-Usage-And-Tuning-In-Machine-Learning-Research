{
    "Modulssd_CONV2.py": {
        "torch": {
            "MaxPool2d_185": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_186": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_187": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.SFT_scale_conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.SFT_scale_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * s1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in enumerate(cfg)",
                            "Call"
                        ],
                        [
                            "k in enumerate(vgg_source)",
                            "Call"
                        ],
                        [
                            "k in enumerate(extra_layers[1::2], 2)",
                            "Call"
                        ],
                        [
                            "k in range(7)",
                            "Call"
                        ],
                        [
                            "k in range(7, 23)",
                            "Call"
                        ],
                        [
                            "k in range(23, len(self.vgg))",
                            "Call"
                        ],
                        [
                            "k in enumerate(self.extras)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.SFT_shift_conv0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.SFT_shift_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64 * s1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in enumerate(cfg)",
                            "Call"
                        ],
                        [
                            "k in enumerate(vgg_source)",
                            "Call"
                        ],
                        [
                            "k in enumerate(extra_layers[1::2], 2)",
                            "Call"
                        ],
                        [
                            "k in range(7)",
                            "Call"
                        ],
                        [
                            "k in range(7, 23)",
                            "Call"
                        ],
                        [
                            "k in range(23, len(self.vgg))",
                            "Call"
                        ],
                        [
                            "k in enumerate(self.extras)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "s2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_66": {
                "variable": {
                    "value": "self.vgg",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'300': [64, 64, 'M', 128, 128, 'M', 256, 256, 256, 'C', 512, 512, 512, 'M', 512, 512, 512], '512': []}",
                            "Dict"
                        ],
                        [
                            "base",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.CondNet",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_85": {
                "variable": {
                    "value": "self.extras",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "extras",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'300': [256, 'S', 512, 128, 'S', 256, 128, 256, 128, 256], '512': []}",
                            "Dict"
                        ],
                        [
                            "extras",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_87": {
                "variable": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_88": {
                "variable": {
                    "value": "self.conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "head[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_90": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_150": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in loc]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[o.view(o.size(0), -1) for o in conf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_141": {
                "variable": {
                    "value": "fea",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v(fea)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_189": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_31": {
                "input": {
                    "value": "self.SFT_scale_conv0(x[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "leaky_relu_32": {
                "input": {
                    "value": "self.SFT_shift_conv0(x[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_75": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_77": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_79": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_179": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ],
                        [
                            "v in enumerate(vgg_source)",
                            "Call"
                        ],
                        [
                            "v in enumerate(extra_layers[1::2], 2)",
                            "Call"
                        ],
                        [
                            "v in enumerate(self.extras)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_215": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "vgg[v].out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_220": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_222": {
                "in_channels": {
                    "value": "v.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "cfg[k] * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_162": {
                "f": {
                    "value": "base_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "base_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "MaxPool2d_175": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_177": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_201": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "cfg[k + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ],
                        [
                            "i",
                            "variable"
                        ],
                        [
                            "v",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ],
                        [
                            "v in enumerate(vgg_source)",
                            "Call"
                        ],
                        [
                            "v in enumerate(extra_layers[1::2], 2)",
                            "Call"
                        ],
                        [
                            "v in enumerate(self.extras)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 3)[flag]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_181": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "variable"
                        ],
                        [
                            "v in enumerate(cfg)",
                            "Call"
                        ],
                        [
                            "v in enumerate(vgg_source)",
                            "Call"
                        ],
                        [
                            "v in enumerate(extra_layers[1::2], 2)",
                            "Call"
                        ],
                        [
                            "v in enumerate(self.extras)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_181": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_183": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "data/ucf24.py": {
        "torch": {
            "stack_251": {
                "tensors": {
                    "value": "flos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "ndarray": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img[:, :, 3:6]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "permute_227": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "layers/box_utils.py": {
        "torch": {
            "min_47": {
                "variable": {
                    "value": "max_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, 2:].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_49": {
                "variable": {
                    "value": "min_xy",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "box_a[:, :2].unsqueeze(1).expand(A, B, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_51": {
                "variable": {
                    "value": "inter",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_xy - min_xy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(priors[:, :2] + loc[:, :2] * variances[0] * priors[:, 2:], priors[:, 2:] * torch.exp(loc[:, 2:] * variances[1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_199": {
                "variable": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x2 - x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "y2 - y1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_18": {
                "tensors": {
                    "value": "(boxes[:, :2] - boxes[:, 2:] / 2, boxes[:, :2] + boxes[:, 2:] / 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_30": {
                "tensors": {
                    "value": "(boxes[:, 2:] + boxes[:, :2]) / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "boxes[:, 2:] - boxes[:, :2]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[g_cxcy, g_wh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_226": {
                "variable": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "x1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_227": {
                "variable": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "y1[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_228": {
                "variable": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "x2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                },
                "max": {
                    "value": "y2[i]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clamp_235": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(w, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_236": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "yy2 - yy1",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(h, min=0.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "index_select_239": {
                "variable": {
                    "value": "rem_areas",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "area",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(x2 - x1, y2 - y1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.sort(0)",
                            "Call"
                        ],
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_139": {
                "input": {
                    "value": "g_wh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(matched[:, 2:] - matched[:, :2]) / priors[:, 2:]",
                            "BinOp"
                        ],
                        [
                            "torch.log(g_wh) / variances[1]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_174": {
                "input": {
                    "value": "torch.sum(torch.exp(x - x_max), 1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_221": {
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.sort(0)",
                            "Call"
                        ],
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "xx1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx1, min=x1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_222": {
                "input": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.sort(0)",
                            "Call"
                        ],
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "yy1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy1, min=y1[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_223": {
                "input": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 2]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.sort(0)",
                            "Call"
                        ],
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "xx2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(xx2, max=x2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_224": {
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes[:, 3]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores.sort(0)",
                            "Call"
                        ],
                        [
                            "idx[-top_k:]",
                            "Subscript"
                        ],
                        [
                            "idx[:-1]",
                            "Subscript"
                        ],
                        [
                            "idx[IoU.le(overlap)]",
                            "Subscript"
                        ],
                        [
                            "idx",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "yy2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.new()",
                            "Call"
                        ],
                        [
                            "torch.clamp(yy2, max=y2[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_174": {
                "input": {
                    "value": "torch.exp(x - x_max)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_160": {
                "input": {
                    "value": "loc[:, 2:] * variances[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_174": {
                "input": {
                    "value": "x - x_max",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "layers/functions/prior_box.py": {
        "torch": {
            "Tensor_93": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/l2norm.py": {
        "torch": {
            "Parameter_13": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(self.n_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "layers/modules/multibox_loss.py": {
        "torch": {
            "smooth_l1_loss_92": {
                "variable": {
                    "value": "loss_l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loc_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loc_data[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "loc_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cuda.FloatTensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "torch.Tensor(num, num_priors, 4)",
                            "Call"
                        ],
                        [
                            "loc_t.cuda()",
                            "Call"
                        ],
                        [
                            "Variable(loc_t, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "loc_t[pos_idx].view(-1, 4)",
                            "Call"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "num_neg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.negpos_ratio * num_pos",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max": {
                    "value": "pos.size(1) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cross_entropy_113": {
                "variable": {
                    "value": "loss_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conf_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf_data[(pos_idx + neg_idx).gt(0)].view(-1, self.num_classes)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets_weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conf_t[(pos + neg).gt(0)]",
                            "Subscript"
                        ]
                    ]
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_69": {
                "variable": {
                    "value": "loc_t",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "test-ucf24.py": {
        "torch": {
            "DataLoader_63": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UCF24Detection(args.data_root, 'test', BaseTransform(args.ssd_dim, means), AnnotationTransform(), input_type=args.input_type, full_test=True)",
                            "Call"
                        ],
                        [
                            "dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_default_tensor_type_55": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_57": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "synchronize_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_103": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_197": {
                "f": {
                    "value": "trained_model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.save_root + 'cache/' + exp_name + '/ssd300_ucf24_' + repr(iteration) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train-ucf24.py": {
        "torch": {
            "manual_seed_69": {
                "seed": {
                    "value": "args.man_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_74": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "params + [{'params': [param], 'lr': args.lr, 'weight_decay': args.weight_decay}]",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MultiStepLR_137": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(params, lr=args.lr, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ],
                        [
                            "optimizer",
                            "Method Argument"
                        ]
                    ]
                },
                "milestones": {
                    "value": "args.stepvalues",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "train_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UCF24Detection(args.data_root, args.train_sets, SSDAugmentation(args.ssd_dim, args.means), AnnotationTransform(), input_type=args.input_type)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_201": {
                "variable": {
                    "value": "val_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "UCF24Detection(args.data_root, 'test', BaseTransform(args.ssd_dim, args.means), AnnotationTransform(), input_type=args.input_type, full_test=False)",
                            "Call"
                        ],
                        [
                            "val_dataset",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "detection_collate",
                    "type": "variable",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_all_71": {
                "seed": {
                    "value": "args.man_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_204": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_328": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_352": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_398": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_404": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_173": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_174": {
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_187": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_188": {
                "*size": {
                    "value": "(1, args.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "synchronize_252": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_261": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_280": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_283": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_root + 'ssd300_ucf24_' + repr(iteration) + '.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "synchronize_307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_247": {
                "ndarray": {
                    "value": "np.asarray(losses_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_247": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_302": {
                "ndarray": {
                    "value": "np.asarray(aps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_302": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "(1, 6)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_301": {
                "*size": {
                    "value": "(1, args.num_classes)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "utils/augmentations.py": {
        "torch": {
            "from_numpy_219": {
                "ndarray": {
                    "value": "cvimage[:, :, 0:3].astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "permute_219": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}