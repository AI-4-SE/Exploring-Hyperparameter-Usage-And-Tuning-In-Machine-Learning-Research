{
    "run.py": {
        "sklearn": {
            "StandardScaler_64": {
                "variable": {
                    "value": "scaler_Y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_absolute_error_94": {
                "y_true": {
                    "value": "tstY[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "tstY_hat[:, j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "SSVAE.py": {
        "tensorflow": {
            "Graph_17": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.x_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.xs_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.y_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_27": {
                "variable": {
                    "value": "(self.y_L_mu, self.y_L_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.classifier_L_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_y, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_31": {
                "variable": {
                    "value": "(self.z_L_mu, self.z_L_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_L_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_z, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "self.x_L_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_L_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "self.x_DL_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_DL_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.z_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "self.x_G_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_G_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.x_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.xs_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_51": {
                "variable": {
                    "value": "(self.y_U_mu, self.y_U_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.classifier_U_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_y, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_55": {
                "variable": {
                    "value": "(self.z_U_mu, self.z_U_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_U_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_z, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "self.x_U_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_U_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(self.z_U2_mu, self.z_U2_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_U2_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_z, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "self.x_DU_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_DU_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_69": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "self.tf_mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "self.tf_cov_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cov_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim_y, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "objYpred_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.squared_difference(self.y_L, self.y_L_mu), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_290": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.exp(0.5 * lsgms), epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_264": {
                "input_tensor": {
                    "value": "-0.5 * (1.0 + log_sigma_sq - tf.square(mu) - tf.exp(log_sigma_sq))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiRNNCell_299": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_300": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_304": {
                "variable": {
                    "value": "(_, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "init_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_fw.zero_state(tf.shape(x)[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, dim_h, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "init_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_bw.zero_state(tf.shape(x)[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, dim_h, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_305": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([final_state[0][-1], final_state[1][-1]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_315": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_316": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dense_317": {
                "variable": {
                    "value": "init_state_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_318": {
                "variable": {
                    "value": "init_state_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_319": {
                "variable": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "peek",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(peek_in, [1, self.seqlen_x])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_322": {
                "variable": {
                    "value": "(_, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.concat([x, peek], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state_fw": {
                    "value": "tuple([init_state_fw] * self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state_bw": {
                    "value": "tuple([init_state_bw] * self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_324": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([final_state[0][-1], final_state[1][-1]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_334": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dense_335": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_336": {
                "variable": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_337": {
                "variable": {
                    "value": "peek",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(peek_in, [1, self.seqlen_x])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_339": {
                "variable": {
                    "value": "(rnn_outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.concat([x, peek], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "tuple([init_state] * self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_340": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell, tf.concat([x, peek], 2), initial_state=tuple([init_state] * self.n_hidden))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_34": {
                "values": {
                    "value": "[self.z_L_sample, self.y_L]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[self.z_L_mu, self.y_L]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "[self.z_G, self.y_L]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "values": {
                    "value": "[self.z_U_sample, self.y_U_sample]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "[self.z_U2_mu, self.y_U_mu]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.y_L, self.y_L_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "-tf.reduce_sum(self.cross_entropy(tf.layers.flatten(self.x_L), tf.layers.flatten(self.x_DL_recon)), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "input_tensor": {
                    "value": "-tf.reduce_sum(self.cross_entropy(tf.layers.flatten(self.x_U), tf.layers.flatten(self.x_DU_recon)), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_239": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_L), tf.layers.flatten(self.x_L_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_243": {
                "input_tensor": {
                    "value": "L_log_lik + L_log_prior_y - L_KLD_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_250": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_U), tf.layers.flatten(self.x_U_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_254": {
                "input_tensor": {
                    "value": "U_log_lik - U_KLD_y - U_KLD_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_289": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_290": {
                "x": {
                    "value": "tf.exp(0.5 * lsgms)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(mu), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_297": {
                "name_or_scope": {
                    "value": "rnnpredictor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_313": {
                "name_or_scope": {
                    "value": "rnnencoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_332": {
                "name_or_scope": {
                    "value": "rnndecoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_84": {
                "x": {
                    "value": "self.y_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.y_L_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_269": {
                "input_tensor": {
                    "value": "tf.multiply(tf.matmul(tf.subtract(x, self.tf_mu_prior), tf.matrix_inverse(self.tf_cov_prior)), tf.subtract(x, self.tf_mu_prior))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_275": {
                "input_tensor": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ],
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_290": {
                "x": {
                    "value": "0.5 * lsgms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_305": {
                "values": {
                    "value": "[final_state[0][-1], final_state[1][-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_320": {
                "input": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.seqlen_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_322": {
                "values": {
                    "value": "[x, peek]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_324": {
                "values": {
                    "value": "[final_state[0][-1], final_state[1][-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_337": {
                "input": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.seqlen_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_339": {
                "values": {
                    "value": "[x, peek]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_L), tf.layers.flatten(self.x_DL_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_U), tf.layers.flatten(self.x_DU_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_239": {
                "structure": {
                    "value": "self.x_L_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_250": {
                "structure": {
                    "value": "self.x_U_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_260": {
                "x": {
                    "value": "tf.clip_by_value(1.0 - y, const, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_264": {
                "x": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ],
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_269": {
                "x": {
                    "value": "tf.matmul(tf.subtract(x, self.tf_mu_prior), tf.matrix_inverse(self.tf_cov_prior))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(x, self.tf_mu_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_299": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_300": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_301": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_302": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_315": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_316": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_334": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_260": {
                "t": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_264": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_269": {
                "a": {
                    "value": "tf.subtract(x, self.tf_mu_prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matrix_inverse(self.tf_cov_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_269": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.tf_mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_86": {
                "structure": {
                    "value": "self.x_DL_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "structure": {
                    "value": "self.x_DU_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_273": {
                "*args": {
                    "value": "tf.scan(lambda a, x: tf.matmul(tf.matrix_inverse(self.tf_cov_prior), x), tf.matrix_diag(tf.exp(log_sigma_sq)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_274": {
                "input_tensor": {
                    "value": "tf.multiply(tf.matmul(tf.subtract(self.tf_mu_prior, mu), tf.matrix_inverse(self.tf_cov_prior)), tf.subtract(self.tf_mu_prior, mu))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_273": {
                "fn": {
                    "value": "lambda a, x: tf.matmul(tf.matrix_inverse(self.tf_cov_prior), x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.matrix_diag(tf.exp(log_sigma_sq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_274": {
                "x": {
                    "value": "tf.matmul(tf.subtract(self.tf_mu_prior, mu), tf.matrix_inverse(self.tf_cov_prior))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.tf_mu_prior, mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_274": {
                "a": {
                    "value": "tf.subtract(self.tf_mu_prior, mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matrix_inverse(self.tf_cov_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_274": {
                "x": {
                    "value": "self.tf_mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_273": {
                "a": {
                    "value": "tf.matrix_inverse(self.tf_cov_prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_273": {
                "x": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ],
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "SSVAE_En.py": {
        "tensorflow": {
            "Graph_17": {
                "variable": {
                    "value": "self.G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "self.x_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_22": {
                "variable": {
                    "value": "self.xs_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_23": {
                "variable": {
                    "value": "self.y_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_27": {
                "variable": {
                    "value": "(self.y_L_mu, self.y_L_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.classifier_L_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_y, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_31": {
                "variable": {
                    "value": "(self.z_L_mu, self.z_L_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_L_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_z, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "variable": {
                    "value": "self.x_L_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_L_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_38": {
                "variable": {
                    "value": "self.x_DL_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_DL_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_40": {
                "variable": {
                    "value": "self.z_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, dim_z]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_42": {
                "variable": {
                    "value": "self.x_G_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_G_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_46": {
                "variable": {
                    "value": "self.x_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_47": {
                "variable": {
                    "value": "self.xs_U",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_51": {
                "variable": {
                    "value": "(self.y_U_mu, self.y_U_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.classifier_U_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_y, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_55": {
                "variable": {
                    "value": "(self.z_U_mu, self.z_U_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_U_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_z, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_59": {
                "variable": {
                    "value": "self.x_U_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_U_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_62": {
                "variable": {
                    "value": "(self.z_U2_mu, self.z_U2_lsgms)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.encoder_U2_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "[self.dim_z, self.dim_z]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "self.x_DU_recon",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.decoder_DU_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_68": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_69": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_77": {
                "variable": {
                    "value": "self.tf_mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_78": {
                "variable": {
                    "value": "self.tf_cov_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.cov_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[self.dim_y, self.dim_y]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_84": {
                "variable": {
                    "value": "objYpred_MSE",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.squared_difference(self.y_L, self.y_L_mu), 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "train_op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_205": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.multiply(tf.exp(0.5 * lsgms), epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_179": {
                "input_tensor": {
                    "value": "-0.5 * (1.0 + log_sigma_sq - tf.square(mu) - tf.exp(log_sigma_sq))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultiRNNCell_214": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_215": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_219": {
                "variable": {
                    "value": "(_, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "initial_state_fw": {
                    "value": "init_state_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_fw.zero_state(tf.shape(x)[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, dim_h, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "initial_state_bw": {
                    "value": "init_state_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cell_bw.zero_state(tf.shape(x)[0], tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, dim_h, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                }
            },
            "dense_220": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([final_state[0][-1], final_state[1][-1]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_230": {
                "variable": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultiRNNCell_231": {
                "variable": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dense_232": {
                "variable": {
                    "value": "init_state_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_233": {
                "variable": {
                    "value": "init_state_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_234": {
                "variable": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_235": {
                "variable": {
                    "value": "peek",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(peek_in, [1, self.seqlen_x])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_237": {
                "variable": {
                    "value": "(_, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "cell_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "cell_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.concat([x, peek], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state_fw": {
                    "value": "tuple([init_state_fw] * self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state_bw": {
                    "value": "tuple([init_state_bw] * self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_239": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.concat([final_state[0][-1], final_state[1][-1]], 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "units": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MultiRNNCell_249": {
                "variable": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": []
                },
                "cells": {
                    "value": "[tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "dense_250": {
                "variable": {
                    "value": "init_state",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_251": {
                "variable": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "st",
                    "type": "variable",
                    "possible_values": [
                        [
                            "st",
                            "Method Argument"
                        ],
                        [
                            "st",
                            "Method Argument"
                        ]
                    ]
                },
                "units": {
                    "value": "self.dim_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_252": {
                "variable": {
                    "value": "peek",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(peek_in, [1, self.seqlen_x])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self.seqlen_x, self.dim_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dynamic_rnn_254": {
                "variable": {
                    "value": "(rnn_outputs, final_state)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.MultiRNNCell([tf.nn.rnn_cell.GRUCell(dim_h) for _ in range(self.n_hidden)])",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "tf.concat([x, peek], 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "initial_state": {
                    "value": "tuple([init_state] * self.n_hidden)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_255": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "rnn_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dynamic_rnn(cell, tf.concat([x, peek], 2), initial_state=tuple([init_state] * self.n_hidden))",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "dim_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ],
                        [
                            "dim_y",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_34": {
                "values": {
                    "value": "[self.z_L_sample, self.y_L]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_37": {
                "values": {
                    "value": "[self.z_L_mu, self.y_L]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_41": {
                "values": {
                    "value": "[self.z_G, self.y_L]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_58": {
                "values": {
                    "value": "[self.z_U_sample, self.y_U_sample]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_64": {
                "values": {
                    "value": "[self.z_U2_mu, self.y_U_mu]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_84": {
                "input_tensor": {
                    "value": "tf.squared_difference(self.y_L, self.y_L_mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_86": {
                "input_tensor": {
                    "value": "-tf.reduce_sum(self.cross_entropy(tf.layers.flatten(self.x_L), tf.layers.flatten(self.x_DL_recon)), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_mean_87": {
                "input_tensor": {
                    "value": "-tf.reduce_sum(self.cross_entropy(tf.layers.flatten(self.x_U), tf.layers.flatten(self.x_DU_recon)), 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "global_variables_initializer_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_154": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_L), tf.layers.flatten(self.x_L_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_158": {
                "input_tensor": {
                    "value": "L_log_lik + L_log_prior_y - L_KLD_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_165": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_U), tf.layers.flatten(self.x_U_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_169": {
                "input_tensor": {
                    "value": "U_log_lik - U_KLD_y - U_KLD_z",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_204": {
                "input": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_205": {
                "x": {
                    "value": "tf.exp(0.5 * lsgms)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(tf.shape(mu), 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "rnnpredictor",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_228": {
                "name_or_scope": {
                    "value": "rnnencoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "rnndecoder",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "squared_difference_84": {
                "x": {
                    "value": "self.y_L",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.y_L_mu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_184": {
                "input_tensor": {
                    "value": "tf.multiply(tf.matmul(tf.subtract(x, self.tf_mu_prior), tf.matrix_inverse(self.tf_cov_prior)), tf.subtract(x, self.tf_mu_prior))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_190": {
                "input_tensor": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ],
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_205": {
                "x": {
                    "value": "0.5 * lsgms",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_220": {
                "values": {
                    "value": "[final_state[0][-1], final_state[1][-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_235": {
                "input": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.seqlen_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_237": {
                "values": {
                    "value": "[x, peek]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_239": {
                "values": {
                    "value": "[final_state[0][-1], final_state[1][-1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_252": {
                "input": {
                    "value": "peek_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(st, self.dim_x, activation=tf.nn.sigmoid)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, self.seqlen_x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_254": {
                "values": {
                    "value": "[x, peek]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_86": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_L), tf.layers.flatten(self.x_DL_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_87": {
                "input_tensor": {
                    "value": "self.cross_entropy(tf.layers.flatten(self.x_U), tf.layers.flatten(self.x_DU_recon))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_154": {
                "structure": {
                    "value": "self.x_L_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_165": {
                "structure": {
                    "value": "self.x_U_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_175": {
                "x": {
                    "value": "tf.clip_by_value(1.0 - y, const, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_179": {
                "x": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ],
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_184": {
                "x": {
                    "value": "tf.matmul(tf.subtract(x, self.tf_mu_prior), tf.matrix_inverse(self.tf_cov_prior))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(x, self.tf_mu_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "GRUCell_214": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_215": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_216": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_217": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_230": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_231": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GRUCell_249": {
                "units": {
                    "value": "dim_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "250",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ],
                        [
                            "dim_h",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clip_by_value_175": {
                "t": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "const",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-10",
                            "Method Argument"
                        ]
                    ]
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "square_179": {
                "x": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_184": {
                "a": {
                    "value": "tf.subtract(x, self.tf_mu_prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matrix_inverse(self.tf_cov_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_184": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "self.tf_mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_86": {
                "structure": {
                    "value": "self.x_DL_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_87": {
                "structure": {
                    "value": "self.x_DU_recon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trace_188": {
                "*args": {
                    "value": "tf.scan(lambda a, x: tf.matmul(tf.matrix_inverse(self.tf_cov_prior), x), tf.matrix_diag(tf.exp(log_sigma_sq)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_189": {
                "input_tensor": {
                    "value": "tf.multiply(tf.matmul(tf.subtract(self.tf_mu_prior, mu), tf.matrix_inverse(self.tf_cov_prior)), tf.subtract(self.tf_mu_prior, mu))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "scan_188": {
                "fn": {
                    "value": "lambda a, x: tf.matmul(tf.matrix_inverse(self.tf_cov_prior), x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "elems": {
                    "value": "tf.matrix_diag(tf.exp(log_sigma_sq))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_189": {
                "x": {
                    "value": "tf.matmul(tf.subtract(self.tf_mu_prior, mu), tf.matrix_inverse(self.tf_cov_prior))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.subtract(self.tf_mu_prior, mu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_189": {
                "a": {
                    "value": "tf.subtract(self.tf_mu_prior, mu)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.matrix_inverse(self.tf_cov_prior)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_189": {
                "x": {
                    "value": "self.tf_mu_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ],
                        [
                            "mu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_188": {
                "a": {
                    "value": "tf.matrix_inverse(self.tf_cov_prior)",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_188": {
                "x": {
                    "value": "log_sigma_sq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ],
                        [
                            "log_sigma_sq",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "preprocessing.py": {
        "tensorflow": {
            "pad_sequences_58": {
                "variable": {
                    "value": "list_seq",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "list_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "preprocessing.sequence.pad_sequences(list_seq, padding='post')",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "post",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}