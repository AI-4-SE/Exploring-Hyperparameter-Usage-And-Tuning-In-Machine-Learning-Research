{
    "identify/models/utils/tuner_helpers.py": {
        "sklearn": {
            "train_test_split_52": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "torch.arange(len(targets))",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "stratify": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(dataset.targets)",
                            "Call"
                        ]
                    ]
                },
                "random_state": {
                    "value": "34",
                    "type": "int",
                    "possible_values": []
                },
                "test_size": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "stack_22": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_49": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(path)",
                            "Call"
                        ],
                        [
                            "ImageFolder(data_path, transform=data_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g if g > 4 and g < 32 else 10",
                            "IfExp"
                        ],
                        [
                            "5",
                            "int"
                        ],
                        [
                            "5",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "drop_last",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_52": {
                "start": {
                    "value": "len(targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_61": {
                "indices": {
                    "value": "indices[x]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_62": {
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageFolder(path)",
                            "Call"
                        ],
                        [
                            "ImageFolder(data_path, transform=data_trans)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "int(batch_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "sampler": {
                    "value": "samplers[x]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "{x: SubsetRandomSampler(indices[x]) for x in SETS}",
                            "DictComp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "identify/cam_test/accuracy.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "embed_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "embed_folder",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "identify/cam_test/detection.py": {
        "torch": {}
    },
    "identify/cam_test/identification.py": {
        "torch": {
            "norm_32": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "saved_embeds - embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_35": {
                "variable": {
                    "value": "knn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(saved_embeds - embed, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "int"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_25": {
                "f": {
                    "value": "embeddings_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "identify/get_faces/from_cam.py": {
        "torch": {
            "stack_98": {
                "tensors": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "identify/get_faces/from_images.py": {
        "torch": {
            "stack_138": {
                "tensors": {
                    "value": "crops_accepted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "identify/helpers/helpers.py": {
        "torch": {
            "load_67": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "weights_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_53": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(crops)",
                            "Call"
                        ],
                        [
                            "torch.cat(crops)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_55": {
                "variable": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "crops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(crops)",
                            "Call"
                        ],
                        [
                            "torch.cat(crops)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_59": {
                "data": {
                    "value": "times",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "identify/helpers/save_embeddings.py": {
        "torch": {
            "DataLoader_18": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(input_path, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "save_33": {
                "obj": {
                    "value": "save_this",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OrderedDict({'embeds': embeds, 'labels': labels, 'classes': dataloader.dataset.classes})",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "output_path",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "identify/models/inception_resnet_v1.py": {
        "torch": {
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_23": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_41": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(256, 32, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_46": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(256, 32, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "96",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(896, 128, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "896",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_87": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(1792, 192, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv2d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1792",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_117": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(256, 192, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_138": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.branch0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(896, 256, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(896, 256, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "BasicConv2d(896, 256, kernel_size=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_169": {
                "variable": {
                    "value": "self.branch3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_176": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x0, x1, x2, x3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_192": {
                "variable": {
                    "value": "self.maxpool_3a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "self.repeat_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block35(scale=0.17)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_204": {
                "variable": {
                    "value": "self.repeat_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block17(scale=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "variable": {
                    "value": "self.repeat_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "Block8(scale=0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_225": {
                "variable": {
                    "value": "self.avgpool_1a",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_226": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.6",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.last_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1792",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm1d_228": {
                "variable": {
                    "value": "self.last_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "device_230": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "normalize_267": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ],
                        [
                            "self.conv2d_1a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_2b(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool_3a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_3b(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4a(x)",
                            "Call"
                        ],
                        [
                            "self.conv2d_4b(x)",
                            "Call"
                        ],
                        [
                            "self.repeat_1(x)",
                            "Call"
                        ],
                        [
                            "self.mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.repeat_2(x)",
                            "Call"
                        ],
                        [
                            "self.mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.repeat_3(x)",
                            "Call"
                        ],
                        [
                            "self.block8(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool_1a(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.last_linear(x.view(x.shape[0], -1))",
                            "Call"
                        ],
                        [
                            "self.last_bn(x)",
                            "Call"
                        ],
                        [
                            "F.normalize(x, p=2, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_112": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_238": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/inception_resnet_v1_vggface2.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "identify/models/metrics/check_accuracy.py": {
        "torch": {
            "tensor_19": {
                "variable": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "predict(crops_t, embeds, labels, model, k, thresh, print_dist)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_58": {
                "variable": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "len(labels_t)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_25": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds - new_embed.reshape(1, *new_embed.shape)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "topk_27": {
                "variable": {
                    "value": "knn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.norm(embeds - new_embed.reshape(1, *new_embed.shape), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "7",
                            "Method Argument"
                        ],
                        [
                            "7",
                            "Method Argument"
                        ]
                    ]
                },
                "largest": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "identify/models/metrics/embed_metrics.py": {
        "torch": {
            "tensor_44": {
                "variable": {
                    "value": "overall",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "log_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_44": {
                "variable": {
                    "value": "overall",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_45": {
                "variable": {
                    "value": "mean_min",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_45": {
                "variable": {
                    "value": "mean_min",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_14": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embeds_2 - embed",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_16": {
                "tensors": {
                    "value": "embeds_cross_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_59": {
                "data": {
                    "value": "max_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_61": {
                "data": {
                    "value": "min_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_49": {
                "data": {
                    "value": "max_dist",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "identify/models/model_trainers.py": {
        "torch": {
            "tensor_105": {
                "variable": {
                    "value": "least_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float('inf')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eq_65": {
                "variable": {
                    "value": "y_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_cross",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.repeat(l).reshape(l, l)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_cross.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "temp_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_vectors.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_87": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_loss + dis_loss + t(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "PairwiseDistance_9": {
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "stack_35": {
                "tensors": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "isnan_78": {
                "input": {
                    "value": "sim_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_matrix[y_mask].mean()",
                            "Call"
                        ],
                        [
                            "t(rsm)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_80": {
                "input": {
                    "value": "dis_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dist_matrix[~y_mask].mean()",
                            "Call"
                        ],
                        [
                            "t(rsm)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_50": {
                "data": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_85": {
                "input": {
                    "value": "t(dis_thresh) / dis_mean - t(1.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argmax_211": {
                "variable": {
                    "value": "y_cls",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_236": {
                "input": {
                    "value": "y_cls == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "set_grad_enabled_133": {
                "mode": {
                    "value": "is_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase == tr",
                            "Compare"
                        ],
                        [
                            "phase == tr",
                            "Compare"
                        ]
                    ]
                }
            },
            "set_grad_enabled_209": {
                "mode": {
                    "value": "is_tr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "phase == tr",
                            "Compare"
                        ],
                        [
                            "phase == tr",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "identify/models/mtcnn.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_19": {
                "variable": {
                    "value": "self.prelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_20": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_22": {
                "variable": {
                    "value": "self.prelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_24": {
                "variable": {
                    "value": "self.prelu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_26": {
                "variable": {
                    "value": "self.softmax4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "variable": {
                    "value": "self.conv4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_63": {
                "variable": {
                    "value": "self.prelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "28",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_66": {
                "variable": {
                    "value": "self.prelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_69": {
                "variable": {
                    "value": "self.prelu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.dense4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "576",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_71": {
                "variable": {
                    "value": "self.prelu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "self.dense5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_73": {
                "variable": {
                    "value": "self.softmax5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_74": {
                "variable": {
                    "value": "self.dense5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_114": {
                "variable": {
                    "value": "self.prelu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_115": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_117": {
                "variable": {
                    "value": "self.prelu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_118": {
                "variable": {
                    "value": "self.pool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_120": {
                "variable": {
                    "value": "self.prelu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_121": {
                "variable": {
                    "value": "self.pool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_122": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_123": {
                "variable": {
                    "value": "self.prelu4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.dense5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1152",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "PReLU_125": {
                "variable": {
                    "value": "self.prelu5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_parameters": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_126": {
                "variable": {
                    "value": "self.dense6_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Softmax_127": {
                "variable": {
                    "value": "self.softmax6_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_128": {
                "variable": {
                    "value": "self.dense6_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_129": {
                "variable": {
                    "value": "self.dense6_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_213": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_35": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/pnet.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/rnet.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/onet.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_82": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/pnet.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/rnet.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/onet.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_137": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "state_dict_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/pnet.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/rnet.pt')",
                            "Call"
                        ],
                        [
                            "os.path.join(os.path.dirname(__file__), './pre_trained_weights/onet.pt')",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_292": {
                "variable": {
                    "value": "faces_im",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "faces_im",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(faces_im)",
                            "Call"
                        ],
                        [
                            "faces_im[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_346": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "identify/models/tune_network.py": {
        "torch": {
            "tensor_37": {
                "data": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "model_ex",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Adam_60": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(model_ex[0].last_linear.parameters()) + list(model_ex[1].parameters())",
                            "BinOp"
                        ]
                    ]
                },
                "lr": {
                    "value": "0.0005",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_61": {
                "variable": {
                    "value": "loss_func",
                    "type": "variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "get_weight(train_dl.dataset)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_66": {
                "variable": {
                    "value": "optim",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.last_linear.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0007",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "data": {
                    "value": "thresh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "show_embed_metrics(embeds, labels)",
                            "Call"
                        ],
                        [
                            "np.round(thresh.item() + clearance, 3)",
                            "Call"
                        ],
                        [
                            "get_threshold(model, embeds, labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_94": {
                "obj": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'state_dict': model.state_dict(), 'threshold': thresh}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "output_folder",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_54": {
                "in_features": {
                    "value": "in_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.last_linear.out_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "out_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(train_dl.dataset.classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_55": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_110": {
                "f": {
                    "value": "retune",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "identify/models/utils/detect_face.py": {
        "torch": {
            "as_tensor_23": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(imgs, device=device)",
                            "Call"
                        ],
                        [
                            "imgs.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(imgs, device=device)",
                            "Call"
                        ],
                        [
                            "imgs.permute(0, 3, 1, 2).float()",
                            "Call"
                        ],
                        [
                            "[imgs]",
                            "List"
                        ],
                        [
                            "np.stack([np.uint8(img) for img in imgs])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_57": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(boxes, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.stack([qq1, qq2, qq3, qq4, boxes[:, 4]]).permute(1, 0)",
                            "Call"
                        ],
                        [
                            "rerec(boxes)",
                            "Call"
                        ],
                        [
                            "boxes.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "torch.cat((boxes[ipass, :4], score[ipass].unsqueeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "bbreg(boxes, mv)",
                            "Call"
                        ],
                        [
                            "rerec(boxes)",
                            "Call"
                        ],
                        [
                            "torch.cat((boxes[ipass, :4], score[ipass].unsqueeze(1)), dim=1)",
                            "Call"
                        ],
                        [
                            "bbreg(boxes, mv)",
                            "Call"
                        ],
                        [
                            "boxes.trunc().int().cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "image_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "image_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(image_inds, dim=0).cpu()",
                            "Call"
                        ],
                        [
                            "image_inds[ipass]",
                            "Subscript"
                        ],
                        [
                            "image_inds[ipass]",
                            "Subscript"
                        ],
                        [
                            "mask_inds[:, 0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "all_inds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_inds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_inds, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[qq1, qq2, qq3, qq4, boxes[:, 4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_75": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "stack_165": {
                "variable": {
                    "value": "boundingbox[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[b1, b2, b3, b4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "permute_165": {
                "variable": {
                    "value": "boundingbox[:, :4]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_184": {
                "variable": {
                    "value": "boundingbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q1, q2, score.unsqueeze(1), reg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_263": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boundingbox[:, 2] - boundingbox[:, 0] + 1",
                            "BinOp"
                        ],
                        [
                            "np.maximum(0.0, xx2 - xx1 + 1).copy()",
                            "Call"
                        ],
                        [
                            "bboxA[:, 2] - bboxA[:, 0]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "interpolate_272": {
                "variable": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "area",
                    "type": "str",
                    "possible_values": []
                }
            },
            "as_tensor_13": {
                "variable": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(imgs, device=device)",
                            "Call"
                        ],
                        [
                            "imgs.unsqueeze(0)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(imgs, device=device)",
                            "Call"
                        ],
                        [
                            "imgs.permute(0, 3, 1, 2).float()",
                            "Call"
                        ],
                        [
                            "[imgs]",
                            "List"
                        ],
                        [
                            "np.stack([np.uint8(img) for img in imgs])",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cat_86": {
                "variable": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imresample(imgs, (int(h * scale + 1), int(w * scale + 1)))",
                            "Call"
                        ],
                        [
                            "(im_data - 127.5) * 0.0078125",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(im_data, dim=0)",
                            "Call"
                        ],
                        [
                            "(im_data - 127.5) * 0.0078125",
                            "BinOp"
                        ],
                        [
                            "torch.cat(im_data, dim=0)",
                            "Call"
                        ],
                        [
                            "(im_data - 127.5) * 0.0078125",
                            "BinOp"
                        ],
                        [
                            "interpolate(img, size=sz, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_94": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes[ipass, :4], score[ipass].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "im_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "imresample(imgs, (int(h * scale + 1), int(w * scale + 1)))",
                            "Call"
                        ],
                        [
                            "(im_data - 127.5) * 0.0078125",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(im_data, dim=0)",
                            "Call"
                        ],
                        [
                            "(im_data - 127.5) * 0.0078125",
                            "BinOp"
                        ],
                        [
                            "torch.cat(im_data, dim=0)",
                            "Call"
                        ],
                        [
                            "(im_data - 127.5) * 0.0078125",
                            "BinOp"
                        ],
                        [
                            "interpolate(img, size=sz, mode='area')",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(boxes[ipass, :4], score[ipass].unsqueeze(1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_132": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(points_x, points_y)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "permute_132": {
                "variable": {
                    "value": "points",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "reg",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.reshape(reg, (reg.shape[2], reg.shape[3]))",
                            "Call"
                        ],
                        [
                            "reg.permute(1, 0, 2, 3)",
                            "Call"
                        ],
                        [
                            "reg[:, mask].permute(1, 0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(reg.shape[2], reg.shape[3])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "as_tensor_241": {
                "data": {
                    "value": "keep",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nms_numpy(boxes_for_nms, scores, threshold, method)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "empty_230": {
                "*size": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "boxes.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "run.py": {
        "torch": {
            "device_21": {
                "variable": {
                    "value": "DEVICE",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}