{
    "src/classifier.py": {
        "torch": {
            "interpolate_40": {
                "variable": {
                    "value": "ds_gt_s",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_s.float()",
                    "possible_values": []
                },
                "size": {
                    "value": "features_s.shape[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "sigmoid_89": {
                "variable": {
                    "value": "probas_fg",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_fg",
                    "possible_values": [
                        [
                            "logits - self.bias.unsqueeze(1).unsqueeze(2).unsqueeze(3)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "unsqueeze_89": {
                "variable": {
                    "value": "probas_fg",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "cat_91": {
                "variable": {
                    "value": "probas",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[probas_bg, probas_fg]",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "interpolate_103": {
                "variable": {
                    "value": "ds_gt_q",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_q.float()",
                    "possible_values": []
                },
                "size": {
                    "value": "features_q.size()[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "zeros_like_217": {
                "variable": {
                    "value": "deltas",
                    "possible_values": []
                },
                "input": {
                    "value": "n_shots",
                    "possible_values": []
                }
            },
            "SGD_230": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "[self.prototype, self.bias]",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "possible_values": []
                }
            },
            "interpolate_232": {
                "variable": {
                    "value": "ds_gt_q",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_q.float()",
                    "possible_values": []
                },
                "size": {
                    "value": "features_s.size()[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_233": {
                "variable": {
                    "value": "ds_gt_s",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_s.float()",
                    "possible_values": []
                },
                "size": {
                    "value": "features_s.size()[-2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "tensor_294": {
                "variable": {
                    "value": "class_IoU",
                    "possible_values": []
                },
                "data": {
                    "value": "[inter_count[subcls] / union_count[subcls] for subcls in inter_count if subcls != 0]",
                    "possible_values": []
                }
            },
            "interpolate_324": {
                "variable": {
                    "value": "ds_gt_q",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_q.float()",
                    "possible_values": []
                },
                "size": {
                    "value": "f_resolution",
                    "possible_values": [
                        [
                            "features_s.size()[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "interpolate_325": {
                "variable": {
                    "value": "ds_gt_s",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_s.float()",
                    "possible_values": []
                },
                "size": {
                    "value": "f_resolution",
                    "possible_values": [
                        [
                            "features_s.size()[-2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "nearest",
                    "possible_values": []
                }
            },
            "isnan_53": {
                "input": {
                    "value": "self.prototype",
                    "possible_values": []
                }
            },
            "sum_53": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "clamp_117": {
                "variable": {
                    "value": "perturbed_FB_param",
                    "possible_values": []
                },
                "input": {
                    "value": "perturbed_FB_param",
                    "possible_values": [
                        [
                            "oracle_FB_param",
                            "Name"
                        ],
                        [
                            "torch.clamp(perturbed_FB_param, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "isnan_161": {
                "input": {
                    "value": "cond_entropy",
                    "possible_values": [
                        [
                            "-(valid_pixels.unsqueeze(2) * (probas * torch.log(probas + 1e-10))).sum(2)",
                            "UnaryOp"
                        ],
                        [
                            "cond_entropy.sum(dim=(1, 2, 3))",
                            "Call"
                        ],
                        [
                            "cond_entropy / valid_pixels.sum(dim=(1, 2, 3))",
                            "BinOp"
                        ],
                        [
                            "cond_entropy.sum(0)",
                            "Call"
                        ],
                        [
                            "cond_entropy.mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_162": {
                "input": {
                    "value": "d_kl",
                    "possible_values": [
                        [
                            "(marginal * torch.log(marginal / (self.FB_param + 1e-10))).sum(1)",
                            "Call"
                        ],
                        [
                            "d_kl.sum(0)",
                            "Call"
                        ],
                        [
                            "d_kl.mean(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_222": {
                "input": {
                    "value": "n_shots",
                    "possible_values": []
                }
            },
            "ones_like_226": {
                "input": {
                    "value": "n_shots",
                    "possible_values": []
                }
            },
            "log_156": {
                "input": {
                    "value": "marginal / (self.FB_param + 1e-10)",
                    "possible_values": []
                }
            },
            "log_149": {
                "input": {
                    "value": "probas + 1e-10",
                    "possible_values": []
                }
            },
            "log_182": {
                "input": {
                    "value": "probas + 1e-10",
                    "possible_values": []
                }
            },
            "log_345": {
                "input": {
                    "value": "oracle_FB_param / marginal + 1e-10",
                    "possible_values": []
                }
            },
            "log_346": {
                "input": {
                    "value": "oracle_FB_param / self.FB_param + 1e-10",
                    "possible_values": []
                }
            }
        }
    },
    "src/dataset/dataset.py": {
        "torch": {
            "StandardData_112": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.class_list": {
                    "value": "class_list",
                    "possible_values": [
                        [
                            "split_classes[args.train_name][args.train_split]['train']",
                            "Subscript"
                        ],
                        [
                            "filter_classes(args.train_name, args.train_split, test_name, test_split, split_classes)",
                            "Call"
                        ],
                        [
                            "split_classes[args.train_name][args.train_split]['train']",
                            "Subscript"
                        ]
                    ]
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": []
                },
                "self.return_paths": {
                    "value": "return_paths",
                    "possible_values": []
                }
            },
            "EpisodicData_172": {
                "base_class_0": {
                    "value": "torch.utils.data.Dataset",
                    "possible_values": []
                },
                "self.class_list": {
                    "value": "class_list",
                    "possible_values": [
                        [
                            "split_classes[args.train_name][args.train_split]['train']",
                            "Subscript"
                        ],
                        [
                            "filter_classes(args.train_name, args.train_split, test_name, test_split, split_classes)",
                            "Call"
                        ],
                        [
                            "split_classes[args.train_name][args.train_split]['train']",
                            "Subscript"
                        ]
                    ]
                },
                "self.transform": {
                    "value": "transform",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "StandardData(transform=train_transform, class_list=class_list, return_paths=return_paths, data_list_path=args.train_list, args=args)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "int(args.batch_size / world_size) if args.distributed else args.batch_size",
                            "IfExp"
                        ],
                        [
                            "int(args.batch_size_val / world_size) if args.distributed else args.batch_size_val",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "train_sampler is None",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "train_sampler",
                    "possible_values": [
                        [
                            "DistributedSampler(train_data) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_86": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "EpisodicData(transform=val_transform, class_list=class_list, data_list_path=args.val_list, args=args)",
                            "Call"
                        ],
                        [
                            "StandardData(args=args, transform=val_transform, class_list=class_list, return_paths=False, data_list_path=args.val_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(val_data) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "DataLoader_102": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "EpisodicData(transform=val_transform, class_list=class_list, data_list_path=args.val_list, args=args)",
                            "Call"
                        ],
                        [
                            "StandardData(args=args, transform=val_transform, class_list=class_list, return_paths=False, data_list_path=args.val_list)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "possible_values": [
                        [
                            "int(args.batch_size / world_size) if args.distributed else args.batch_size",
                            "IfExp"
                        ],
                        [
                            "int(args.batch_size_val / world_size) if args.distributed else args.batch_size_val",
                            "IfExp"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                },
                "sampler": {
                    "value": "val_sampler",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "DistributedSampler(val_data) if args.distributed else None",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_281": {
                "variable": {
                    "value": "spprt_imgs",
                    "possible_values": []
                },
                "tensors": {
                    "value": "support_image_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_282": {
                "variable": {
                    "value": "spprt_labels",
                    "possible_values": []
                },
                "tensors": {
                    "value": "support_label_list",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "DistributedSampler_46": {
                "dataset": {
                    "value": "train_data",
                    "possible_values": [
                        [
                            "StandardData(transform=train_transform, class_list=class_list, return_paths=return_paths, data_list_path=args.train_list, args=args)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedSampler_99": {
                "dataset": {
                    "value": "val_data",
                    "possible_values": [
                        [
                            "EpisodicData(transform=val_transform, class_list=class_list, data_list_path=args.val_list, args=args)",
                            "Call"
                        ],
                        [
                            "StandardData(args=args, transform=val_transform, class_list=class_list, return_paths=False, data_list_path=args.val_list)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/dataset/transform.py": {
        "torch": {
            "from_numpy_40": {
                "variable": {
                    "value": "image",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "image.transpose((2, 0, 1))",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "label",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label",
                    "possible_values": [
                        [
                            "torch.from_numpy(label)",
                            "Call"
                        ],
                        [
                            "label.long()",
                            "Call"
                        ],
                        [
                            "back_crop_s_mask",
                            "Name"
                        ],
                        [
                            "cv2.resize(label, None, fx=scale_factor_x, fy=scale_factor_y, interpolation=cv2.INTER_NEAREST)",
                            "Call"
                        ],
                        [
                            "cv2.copyMakeBorder(label, pad_h_half, pad_h - pad_h_half, pad_w_half, pad_w - pad_w_half, cv2.BORDER_CONSTANT, value=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "label[h_off:h_off + self.crop_h, w_off:w_off + self.crop_w]",
                            "Subscript"
                        ],
                        [
                            "cv2.warpAffine(label, matrix, (w, h), flags=cv2.INTER_NEAREST, borderMode=cv2.BORDER_CONSTANT, borderValue=self.ignore_label)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 1)",
                            "Call"
                        ],
                        [
                            "cv2.flip(label, 0)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/model/pspnet.py": {
        "torch": {
            "PPM_12": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ModuleList_22": {
                    "variable": {
                        "value": "self.features",
                        "possible_values": []
                    },
                    "modules": {
                        "value": "self.features",
                        "possible_values": []
                    }
                }
            },
            "PSPNet_61": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.zoom_factor": {
                    "value": "zoom_factor",
                    "possible_values": []
                },
                "self.use_ppm": {
                    "value": "use_ppm",
                    "possible_values": []
                },
                "Conv2d_110": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "self.bottleneck_dim",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "args.num_classes_tr",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "layer0",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_0",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "layer1",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_1",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "layer2",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_2",
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "layer3",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_3",
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "layer4",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers_4",
                    "possible_values": []
                }
            },
            "cat_29": {
                "tensors": {
                    "value": "out",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self.layer0",
                    "possible_values": []
                },
                "*args": {
                    "value": "resnet.conv1",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.bottleneck",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fea_dim, self.bottleneck_dim, kernel_size=3, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "cat_133": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_2, x_3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_143": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.extract_features(x)",
                            "Call"
                        ],
                        [
                            "self.classify(x, (H, W))",
                            "Call"
                        ],
                        [
                            "self.layer0(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([x_2, x_3], dim=1)",
                            "Call"
                        ],
                        [
                            "self.layer4(x_3)",
                            "Call"
                        ],
                        [
                            "self.ppm(x)",
                            "Call"
                        ],
                        [
                            "self.bottleneck(x)",
                            "Call"
                        ],
                        [
                            "self.classifier(features)",
                            "Call"
                        ],
                        [
                            "F.interpolate(x, size=shape, mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "shape",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_17": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(bin)",
                    "possible_values": []
                }
            },
            "interpolate_28": {
                "input": {
                    "value": "f(x)",
                    "possible_values": []
                },
                "size": {
                    "value": "x_size[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_106": {
                "in_channels": {
                    "value": "fea_dim",
                    "possible_values": [
                        [
                            "1024 + 512",
                            "BinOp"
                        ],
                        [
                            "2048",
                            "Constant"
                        ],
                        [
                            "fea_dim * 2",
                            "BinOp"
                        ],
                        [
                            "512",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.bottleneck_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_107": {
                "num_features": {
                    "value": "self.bottleneck_dim",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout2d_109": {
                "p": {
                    "value": "args.dropout",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_18": {
                "output_size": {
                    "value": "bin",
                    "possible_values": [
                        [
                            "bins",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_dim",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "reduction_dim",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "reduction_dim",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/resnet.py": {
        "torch": {
            "BasicBlock_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "BatchNorm2d_31": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "ReLU_32": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_34": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_57": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Conv2d_62": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "inplanes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_63": {
                    "variable": {
                        "value": "self.bn1",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_64": {
                    "variable": {
                        "value": "self.conv2",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "stride",
                        "possible_values": [
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ],
                            [
                                "1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_66": {
                    "variable": {
                        "value": "self.bn2",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes",
                        "possible_values": []
                    }
                },
                "Conv2d_67": {
                    "variable": {
                        "value": "self.conv3",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "planes",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "1",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "BatchNorm2d_68": {
                    "variable": {
                        "value": "self.bn3",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "planes * self.expansion",
                        "possible_values": []
                    }
                },
                "ReLU_69": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False), nn.BatchNorm2d(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_96": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.deep_base": {
                    "value": "deep_base",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "ReLU_113": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_114": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AvgPool2d_119": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "Linear_120": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "BatchNorm2d_108": {
                "variable": {
                    "value": "self.bn1",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn2",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "possible_values": []
                }
            },
            "BatchNorm2d_112": {
                "variable": {
                    "value": "self.bn3",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "possible_values": []
                }
            },
            "Sequential_132": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_144": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "load_196": {
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./initmodel/resnet50_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet101_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet152_v2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_209": {
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./initmodel/resnet50_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet101_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet152_v2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_222": {
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./initmodel/resnet50_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet101_v2.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/resnet152_v2.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_135": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                }
            }
        }
    },
    "src/model/vgg.py": {
        "torch": {
            "VGG_25": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.features": {
                    "value": "features",
                    "possible_values": []
                },
                "AdaptiveAvgPool2d_30": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(7, 7)",
                        "possible_values": []
                    }
                },
                "Sequential_31": {
                    "variable": {
                        "value": "self.classifier",
                        "possible_values": []
                    },
                    "*args": {
                        "value": "nn.Linear(512 * 7 * 7, 4096)",
                        "possible_values": []
                    }
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "conv2d",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout_37": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "4096",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_151": {
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./initmodel/vgg16.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/vgg16_bn.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "load_166": {
                "f": {
                    "value": "model_path",
                    "possible_values": [
                        [
                            "'./initmodel/vgg16.pth'",
                            "Constant"
                        ],
                        [
                            "'./initmodel/vgg16_bn.pth'",
                            "Constant"
                        ]
                    ]
                }
            },
            "MaxPool2d_69": {
                "kernel_size": {
                    "value": "2",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_73": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "src/optimizer.py": {
        "torch": {
            "SGD_11": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "possible_values": []
                }
            },
            "StepLR_28": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "step_size": {
                    "value": "args.lr_stepsize",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "possible_values": []
                }
            },
            "MultiStepLR_29": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "milestones": {
                    "value": "args.milestones",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.gamma",
                    "possible_values": []
                }
            },
            "CosineAnnealingLR_31": {
                "optimizer": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "T_max": {
                    "value": "batches * args.epochs",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-06",
                    "possible_values": []
                }
            },
            "Adam_16": {
                "params": {
                    "value": "parameters",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                }
            }
        }
    },
    "src/test.py": {
        "torch": {
            "zeros_108": {
                "variable": {
                    "value": "runtimes",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_runs",
                    "possible_values": []
                }
            },
            "zeros_109": {
                "variable": {
                    "value": "deltas_init",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.n_runs, nb_episodes, args.batch_size_val)",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "deltas_final",
                    "possible_values": []
                },
                "*size": {
                    "value": "(args.n_runs, nb_episodes, args.batch_size_val)",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_258": {
                "variable": {
                    "value": "loss_fn",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "255",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "intersections",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_classes_tr",
                    "possible_values": []
                }
            },
            "zeros_265": {
                "variable": {
                    "value": "unions",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.num_classes_tr",
                    "possible_values": []
                }
            },
            "load_67": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "filepath",
                    "possible_values": [
                        [
                            "os.path.join(root, f'{args.ckpt_used}.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "possible_values": []
                }
            },
            "manual_seed_52": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "possible_values": []
                }
            },
            "manual_seed_all_53": {
                "seed": {
                    "value": "args.manual_seed + rank",
                    "possible_values": []
                }
            },
            "zeros_129": {
                "variable": {
                    "value": "features_s",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size_val",
                    "possible_values": []
                },
                "out": {
                    "value": "args.shot",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "possible_values": [
                        [
                            "model.module.bottleneck_dim",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "h",
                    "possible_values": [
                        [
                            "model.module.feature_res[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "w",
                    "possible_values": [
                        [
                            "model.module.feature_res[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_130": {
                "variable": {
                    "value": "features_q",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size_val",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "c",
                    "possible_values": [
                        [
                            "model.module.bottleneck_dim",
                            "Attribute"
                        ]
                    ]
                },
                "layout": {
                    "value": "h",
                    "possible_values": [
                        [
                            "model.module.feature_res[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "w",
                    "possible_values": [
                        [
                            "model.module.feature_res[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_135": {
                "variable": {
                    "value": "n_shots",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.batch_size_val",
                    "possible_values": []
                }
            },
            "interpolate_184": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "classifier.get_logits(features_q)",
                            "Call"
                        ],
                        [
                            "F.interpolate(logits, size=(H, W), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "model(images).detach()",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "no_grad_267": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "normalize_166": {
                "variable": {
                    "value": "features_s",
                    "possible_values": []
                },
                "input": {
                    "value": "features_s",
                    "possible_values": [
                        [
                            "torch.zeros(args.batch_size_val, args.shot, c, h, w).to(dist.get_rank())",
                            "Call"
                        ],
                        [
                            "F.normalize(features_s, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "normalize_167": {
                "variable": {
                    "value": "features_q",
                    "possible_values": []
                },
                "input": {
                    "value": "features_q",
                    "possible_values": [
                        [
                            "torch.zeros(args.batch_size_val, 1, c, h, w).to(dist.get_rank())",
                            "Call"
                        ],
                        [
                            "F.normalize(features_q, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "ones_131": {
                "*size": {
                    "value": "args.batch_size_val",
                    "possible_values": []
                },
                "out": {
                    "value": "args.shot",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.image_size",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.image_size",
                    "possible_values": []
                }
            },
            "ones_133": {
                "*size": {
                    "value": "args.batch_size_val",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "possible_values": []
                },
                "dtype": {
                    "value": "args.image_size",
                    "possible_values": []
                },
                "layout": {
                    "value": "args.image_size",
                    "possible_values": []
                }
            },
            "no_grad_139": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "src/train.py": {
        "torch": {
            "log_softmax_175": {
                "variable": {
                    "value": "log_prb",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model(mixed_images)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ],
                        [
                            "model(images)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "one_hot_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "dtype": {
                    "value": "h",
                    "possible_values": []
                },
                "layout": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "zeros_243": {
                "variable": {
                    "value": "train_losses",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_iter",
                    "possible_values": [
                        [
                            "int(iter_per_epoch / args.log_freq) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_244": {
                "variable": {
                    "value": "train_mIous",
                    "possible_values": []
                },
                "*size": {
                    "value": "log_iter",
                    "possible_values": [
                        [
                            "int(iter_per_epoch / args.log_freq) + 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randperm_216": {
                "variable": {
                    "value": "rand_index",
                    "possible_values": []
                },
                "n": {
                    "value": "images.size()[0]",
                    "possible_values": []
                }
            },
            "manual_seed_51": {
                "seed": {
                    "value": "args.manual_seed",
                    "possible_values": []
                }
            },
            "manual_seed_53": {
                "seed": {
                    "value": "args.manual_seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_54": {
                "seed": {
                    "value": "args.manual_seed",
                    "possible_values": []
                }
            },
            "zeros_94": {
                "*size": {
                    "value": "(args.epochs, 1)",
                    "possible_values": []
                }
            },
            "zeros_95": {
                "*size": {
                    "value": "(args.epochs, 1)",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "*size": {
                    "value": "(args.epochs, log_iter)",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "*size": {
                    "value": "(args.epochs, log_iter)",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "{'epoch': args.epochs, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "os.path.join(savedir, 'final.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, f'best.pth')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_138": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': model.state_dict(), 'optimizer': optimizer.state_dict()}",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "possible_values": [
                        [
                            "os.path.join(savedir, 'final.pth')",
                            "Call"
                        ],
                        [
                            "os.path.join(savedir, f'best.pth')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/util.py": {
        "torch": {
            "zeros_92": {
                "variable": {
                    "value": "one_hot_mask",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "layout": {
                    "value": "h",
                    "possible_values": []
                },
                "device": {
                    "value": "w",
                    "possible_values": []
                }
            },
            "interpolate_135": {
                "variable": {
                    "value": "logits",
                    "possible_values": []
                },
                "input": {
                    "value": "logits.view(n_task * shots, num_classes, h, w)",
                    "possible_values": []
                },
                "size": {
                    "value": "(H, W)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "zeros_140": {
                "variable": {
                    "value": "area_intersection",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "area_union",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "possible_values": []
                }
            },
            "zeros_142": {
                "variable": {
                    "value": "area_target",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_tasks",
                    "possible_values": []
                },
                "out": {
                    "value": "shot",
                    "possible_values": [
                        [
                            "range(shots)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "num_classes",
                    "possible_values": []
                }
            },
            "histc_176": {
                "variable": {
                    "value": "area_intersection",
                    "possible_values": []
                },
                "input": {
                    "value": "intersection.float()",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "possible_values": []
                }
            },
            "histc_177": {
                "variable": {
                    "value": "area_output",
                    "possible_values": []
                },
                "input": {
                    "value": "preds.float()",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "possible_values": []
                }
            },
            "histc_178": {
                "variable": {
                    "value": "area_target",
                    "possible_values": []
                },
                "input": {
                    "value": "target.float()",
                    "possible_values": []
                },
                "bins": {
                    "value": "num_classes",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "possible_values": []
                },
                "max": {
                    "value": "num_classes - 1",
                    "possible_values": []
                }
            },
            "where_94": {
                "condition": {
                    "value": "new_mask == 255",
                    "possible_values": []
                }
            }
        }
    }
}