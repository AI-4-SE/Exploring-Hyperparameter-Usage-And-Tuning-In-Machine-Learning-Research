{
    "Codes/Neural_Network_based_Methods/Bi_LSTM/Bi_LSTM_Combined_Corpus.py": {
        "sklearn": {
            "KFold_27": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_73": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Bi_LSTM/Bi_LSTM_Combined_Corpus_Ensembling.py": {
        "sklearn": {
            "classification_report_78": {
                "y_true": {
                    "value": "y_test_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_test, len(y_test))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, len(y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred_2 > 0.5",
                            "Compare"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "classification_report_92": {
                "y_true": {
                    "value": "y_val",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, len(y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred_2 > 0.5",
                            "Compare"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Bi_LSTM/Bi_LSTM_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_34": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KFold_87": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_132": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Bi_LSTM/Bi_LSTM_Fake_or_Real_Ensembling.py": {
        "sklearn": {
            "LabelEncoder_41": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_146": {
                "y_true": {
                    "value": "y_test_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_test, len(y_test))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, len(y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred_2 > 0.5",
                            "Compare"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "classification_report_156": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, len(y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred_2 > 0.5",
                            "Compare"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Bi_LSTM/Bi_LSTM_Liar.py": {
        "sklearn": {
            "LabelEncoder_29": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_74": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KFold_85": {
                "variable": {
                    "value": "kfold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "42",
                    "type": "int",
                    "possible_values": []
                }
            },
            "classification_report_132": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(encoded_label, (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Bi_LSTM/Bi_LSTM_Liar_Ensembling.py": {
        "sklearn": {
            "LabelEncoder_38": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LabelEncoder_74": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_134": {
                "y_true": {
                    "value": "y_test_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_test, len(y_test))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, len(y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred_2 > 0.5",
                            "Compare"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            },
            "classification_report_144": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(encoded_label, (-1, 1))",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.reshape(y_pred, len(y_pred))",
                            "Call"
                        ],
                        [
                            "y_pred_2 > 0.5",
                            "Compare"
                        ],
                        [
                            "y_pred > 0.5",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/CNN/CNN_Create_Model.py": {
        "sklearn": {}
    },
    "Codes/Neural_Network_based_Methods/CNN/cnn_Combined_Corpus.py": {
        "sklearn": {
            "classification_report_32": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/CNN/cnn_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_30": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_132": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_142": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/CNN/cnn_Liar.py": {
        "sklearn": {
            "classification_report_145": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_156": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/C_LSTM/C_LSTM_Combined_Corpus.py": {
        "sklearn": {
            "classification_report_148": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(x_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/C_LSTM/C_LSTM_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_33": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_146": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(x_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/C_LSTM/C_LSTM_Liar.py": {
        "sklearn": {
            "classification_report_151": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(x_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Character_level C_LSTM/Character_level_C_LSTM_Combined_Corpus.py": {
        "sklearn": {
            "classification_report_205": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels_test)",
                            "Call"
                        ],
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "to_float_140": {
                "x": {
                    "value": "tf.one_hot(x, sz, on_value=1, off_value=0, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_140": {
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "71",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Character_level C_LSTM/Character_level_C_LSTM_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_41": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_203": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ],
                        [
                            "np.array(labels_test)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "to_float_139": {
                "x": {
                    "value": "tf.one_hot(x, sz, on_value=1, off_value=0, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_139": {
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "71",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Character_level C_LSTM/Character_level_C_LSTM_Liar.py": {
        "sklearn": {
            "classification_report_201": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(labels_test)",
                            "Call"
                        ],
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "to_float_136": {
                "x": {
                    "value": "tf.one_hot(x, sz, on_value=1, off_value=0, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "one_hot_136": {
                "indices": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "sz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "71",
                            "Method Argument"
                        ]
                    ]
                },
                "on_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Convolutional_HAN/Convolutional_HAN_Combined_Corpus.py": {
        "sklearn": {
            "classification_report_202": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Convolutional_HAN/Convolutional_HAN_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_41": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_225": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ],
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Convolutional_HAN/Convolutional_HAN_Liar.py": {
        "sklearn": {
            "classification_report_219": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/HAN/HAN_Combined_Corpus.py": {
        "sklearn": {
            "classification_report_197": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/HAN/HAN_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_41": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_221": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ],
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/HAN/HAN_Liar.py": {
        "sklearn": {
            "classification_report_214": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels_test",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/LSTM/LSTM_Create_Model.py": {
        "sklearn": {}
    },
    "Codes/Neural_Network_based_Methods/LSTM/lstm_Combined_Corpus.py": {
        "sklearn": {
            "classification_report_27": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_37": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/LSTM/lstm_Fake_or_Real.py": {
        "sklearn": {
            "LabelEncoder_35": {
                "variable": {
                    "value": "labelEncoder",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "classification_report_119": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_130": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y[training_size:]",
                            "Subscript"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/LSTM/lstm_Liar.py": {
        "sklearn": {
            "classification_report_128": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            },
            "classification_report_139": {
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "label",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ],
                        [
                            "model.predict_classes(X_test)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/Latent Dirichlet Allocation/LDA_Bi_LSTM_Pred_False_Positive_Analysis.py": {
        "sklearn": {}
    },
    "Codes/Neural_Network_based_Methods/Latent Dirichlet Allocation/LDA_Combined_Corpus.py": {
        "sklearn": {}
    },
    "Codes/Neural_Network_based_Methods/ROC_AUC/ROC_Combined_Corpus.py": {
        "sklearn": {
            "roc_auc_score_9": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_12": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_20": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_23": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_31": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_34": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_42": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_45": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/ROC_AUC/ROC_Fake_or_Real.py": {
        "sklearn": {
            "roc_auc_score_9": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_12": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_20": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_23": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_31": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_34": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_42": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_45": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Codes/Neural_Network_based_Methods/ROC_AUC/ROC_Liar.py": {
        "sklearn": {
            "roc_auc_score_9": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_12": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_20": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_23": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_31": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_34": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_auc_score_42": {
                "variable": {
                    "value": "auc",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "roc_curve_45": {
                "variable": {
                    "value": "(fpr, tpr, thresholds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}