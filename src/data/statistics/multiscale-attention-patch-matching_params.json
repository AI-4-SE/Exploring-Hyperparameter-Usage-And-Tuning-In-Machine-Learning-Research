{
    "datasets/DatasetPairwiseTriplets.py": {
        "torch": {}
    },
    "layers/spp_layer.py": {
        "torch": {
            "MaxPool2d_13": {
                "variable": {
                    "value": "maxpool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h_wid, w_wid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(h_wid, w_wid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(h_pad, w_pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "spp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spp, x.view(num_sample, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/BackboneCNN.py": {
        "torch": {
            "Sequential_15": {
                "variable": {
                    "value": "self.pre_block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 32, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_21": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(32, 32, kernel_size=3, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_64": {
                "variable": {
                    "value": "mp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(10880, 128)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dilation": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_47": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.1 ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "std_65": {
                "input": {
                    "value": "flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.reshape(x.size(0), -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_80": {
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_85": {
                "input": {
                    "value": "feature_a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.fc1(spp).reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "10880",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/MultiscaleTransformerEncoder.py": {
        "torch": {
            "Parameter_20": {
                "variable": {
                    "value": "self.query",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, encoder_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.query_pos_encoding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, encoder_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_23": {
                "variable": {
                    "value": "self.pos_encoding_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(pos_encoding_dim, int(encoder_dim / 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.pos_encoding_y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(pos_encoding_dim, int(encoder_dim / 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_39": {
                "variable": {
                    "value": "self.SPP_FC",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "8704",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "normalize_104": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.SPP_FC(spp_activations)",
                            "Call"
                        ],
                        [
                            "F.normalize(res, dim=1, p=2)",
                            "Call"
                        ],
                        [
                            "dict()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "maxpool",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(h_wid, w_wid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(h_wid, w_wid)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(h_pad, w_pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_20": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_21": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_23": {
                "*size": {
                    "value": "pos_encoding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "int(encoder_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_24": {
                "*size": {
                    "value": "pos_encoding_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "int(encoder_dim / 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.query_pos_encoding.unsqueeze(0), pos_encoding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(query, seq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_85": {
                "variable": {
                    "value": "spp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(spp, cls_token.reshape(num_sample, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/losses.py": {
        "torch": {
            "mm_13": {
                "variable": {
                    "value": "sim_mt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a / torch.max(a_n, eps * torch.ones_like(a_n))",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "b_norm.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distance_positive - distance_negative + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "negative_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin - (embeddings[negative_pairs[:, 0]] - embeddings[negative_pairs[:, 1]]).pow(2).sum(1).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_89": {
                "variable": {
                    "value": "negative_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_92": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[positive_loss, negative_loss]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_117": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ap_distances - an_distances + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_177": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "margin + self.margin",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_205": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_207": {
                "variable": {
                    "value": "neg_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(emb1, emb2.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "sim_matrix - 1000000000 * torch.eye(n=sim_matrix.shape[0], m=sim_matrix.shape[1], device=self.device)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(emb1, emb2.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_214": {
                "variable": {
                    "value": "pos_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(ap_distances > FprValPos)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_220": {
                "variable": {
                    "value": "neg_idx1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(an_distances < FprValNeg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "argmax_232": {
                "variable": {
                    "value": "neg_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(emb1, emb2.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "sim_matrix - 1000000000 * torch.eye(n=sim_matrix.shape[0], m=sim_matrix.shape[1], device=self.device)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(emb1, emb2.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_235": {
                "variable": {
                    "value": "neg_idx2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.where(an_distances < FprValNeg)[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_11": {
                "input": {
                    "value": "a_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_12": {
                "input": {
                    "value": "b_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "randint_143": {
                "variable": {
                    "value": "neg_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "high": {
                    "value": "emb1.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(emb1.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_149": {
                "variable": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "emb1",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "emb2.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "argmax_151": {
                "variable": {
                    "value": "neg_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(emb1, emb2.transpose(0, 1))",
                            "Call"
                        ],
                        [
                            "sim_matrix - 1000000000 * torch.eye(n=sim_matrix.shape[0], m=sim_matrix.shape[1], device=self.device)",
                            "BinOp"
                        ],
                        [
                            "torch.mm(emb1, emb2.transpose(0, 1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_178": {
                "condition": {
                    "value": "losses > 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isnan_183": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * (target.float() * distances + (1 + -1 * target).float() * F.relu(self.margin - (distances + self.eps).sqrt()).pow(2))",
                            "BinOp"
                        ],
                        [
                            "F.relu(distance_positive - distance_negative + self.margin)",
                            "Call"
                        ],
                        [
                            "(pos1 - pos2).pow(2).sum(1).pow(0.5)",
                            "Call"
                        ],
                        [
                            "F.relu(ap_distances - an_distances + self.margin)",
                            "Call"
                        ],
                        [
                            "F.relu(margin + self.margin)",
                            "Call"
                        ],
                        [
                            "losses[idx].mean()",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "distance_positive.mean() - distance_negative.mean()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_206": {
                "n": {
                    "value": "sim_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "sim_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_like_11": {
                "input": {
                    "value": "a_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_like_12": {
                "input": {
                    "value": "b_n",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "eye_150": {
                "n": {
                    "value": "sim_matrix.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "sim_matrix.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_214": {
                "condition": {
                    "value": "ap_distances > FprValPos",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_220": {
                "condition": {
                    "value": "an_distances < FprValNeg",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "where_235": {
                "condition": {
                    "value": "an_distances < FprValNeg",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "relu_31": {
                "input": {
                    "value": "self.margin - (distances + self.eps).sqrt()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_31": {
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/positional_encodings.py": {
        "torch": {
            "arange_32": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_33": {
                "variable": {
                    "value": "sin_inp_x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_34": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp_x.sin(), sin_inp_x.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_35": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x, self.channels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_61": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_62": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_63": {
                "variable": {
                    "value": "sin_inp_x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_64": {
                "variable": {
                    "value": "sin_inp_y",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(y, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_65": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp_x.sin(), sin_inp_x.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_65": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "emb_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp_y.sin(), sin_inp_y.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_67": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x, y, self.channels * 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_96": {
                "variable": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_97": {
                "variable": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_98": {
                "variable": {
                    "value": "pos_z",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "einsum_99": {
                "variable": {
                    "value": "sin_inp_x",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(x, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_100": {
                "variable": {
                    "value": "sin_inp_y",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(y, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ],
                        [
                            "torch.arange(y, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_101": {
                "variable": {
                    "value": "sin_inp_z",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "i,j->ij",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "pos_z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.arange(z, device=tensor.device).type(self.inv_freq.type())",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_102": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp_x.sin(), sin_inp_x.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_102": {
                "variable": {
                    "value": "emb_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "emb_y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp_y.sin(), sin_inp_y.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_103": {
                "variable": {
                    "value": "emb_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "emb_z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sin_inp_z.sin(), sin_inp_z.cos())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_105": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x, y, z, self.channels * 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "tensor.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "pos_encoding_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_enc_x, curr_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "curr_pos_encoding_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_enc_x, curr_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "pos_encoding_2d",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(pos_encoding_2d, curr_pos_encoding_2d)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_21": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(channels / 2))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(channels / 3))",
                            "Call"
                        ],
                        [
                            "channels + 1",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_50": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(channels / 2))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(channels / 3))",
                            "Call"
                        ],
                        [
                            "channels + 1",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_85": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.ceil(channels / 2))",
                            "Call"
                        ],
                        [
                            "int(np.ceil(channels / 3))",
                            "Call"
                        ],
                        [
                            "channels + 1",
                            "BinOp"
                        ]
                    ]
                },
                "step": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks/transformer.py": {
        "torch": {
            "LayerNorm_32": {
                "variable": {
                    "value": "decoder_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_140": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_142": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_143": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_144": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_146": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_147": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_148": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_149": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_200": {
                "variable": {
                    "value": "self.self_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MultiheadAttention_201": {
                "variable": {
                    "value": "self.multihead_attn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embed_dim": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_heads": {
                    "value": "nhead",
                    "type": "variable",
                    "possible_values": [
                        [
                            "8",
                            "MethodArgument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_203": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_204": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_205": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_207": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_208": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LayerNorm_209": {
                "variable": {
                    "value": "self.norm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_210": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_211": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout_212": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ],
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_281": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "LayerNorm_27": {
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_130": {
                "tensors": {
                    "value": "intermediate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "networks/transforms.py": {
        "torch": {
            "mm_891": {
                "variable": {
                    "value": "transformed_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "flat_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.view(1, -1) - self.mean_vector",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "self.transformation_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_990": {
                "variable": {
                    "value": "fn_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_217": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformed_tensor.view(tensor.size())",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.inplace",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_346": {
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "self.transforms[i](img)",
                            "Call"
                        ],
                        [
                            "F.pad(img, self.padding, self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (self.size[1] - img.size[0], 0), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, self.size[0] - img.size[1]), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_hue(img, hue_factor)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.fill",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_519": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "self.transforms[i](img)",
                            "Call"
                        ],
                        [
                            "F.pad(img, self.padding, self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (self.size[1] - img.size[0], 0), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, self.size[0] - img.size[1]), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_hue(img, hue_factor)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.fill",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_523": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "self.transforms[i](img)",
                            "Call"
                        ],
                        [
                            "F.pad(img, self.padding, self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (self.size[1] - img.size[0], 0), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, self.size[0] - img.size[1]), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_hue(img, hue_factor)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(self.size[1] - img.size[0], 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.fill",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_526": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "t(img)",
                            "Call"
                        ],
                        [
                            "self.transforms[i](img)",
                            "Call"
                        ],
                        [
                            "F.pad(img, self.padding, self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (self.size[1] - img.size[0], 0), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.pad(img, (0, self.size[0] - img.size[1]), self.fill, self.padding_mode)",
                            "Call"
                        ],
                        [
                            "F.adjust_brightness(img, brightness_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_contrast(img, contrast_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_saturation(img, saturation_factor)",
                            "Call"
                        ],
                        [
                            "F.adjust_hue(img, hue_factor)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, self.size[0] - img.size[1])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "self.fill",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "self.padding_mode",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_558": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_588": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_994": {
                "variable": {
                    "value": "brightness_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_999": {
                "variable": {
                    "value": "contrast_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1004": {
                "variable": {
                    "value": "saturation_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_1009": {
                "variable": {
                    "value": "hue_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "empty_1367": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[img_c, h, w]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_1369": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[center - float(value), center + float(value)]",
                            "List"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "device_236": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_237": {
                "variable": {
                    "value": "gpus_num",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_316": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ],
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "scheduler_patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.scheduler_patience",
                            "Attribute"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_57": {
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad == True, net.parameters()), 'lr': lr_rate, 'weight_decay': weight_decay}, {'params': filter(lambda p: p.requires_grad == False, net.parameters()), 'lr': 0, 'weight_decay': 0}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_235": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_cache_238": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_313": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net.train()",
                            "Call"
                        ],
                        [
                            "MultiscaleTransformerEncoder(dropout)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "StepLR_108": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ],
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_111": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ],
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "scheduler_patience",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.scheduler_patience",
                            "Attribute"
                        ]
                    ]
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_236": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_320": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ],
                        [
                            "create_optimizer(net, lr_rate, weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "util/convert_datasets.py": {
        "torch": {
            "device_14": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "from_numpy_74": {
                "variable": {
                    "value": "TestLabels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "2 - data['testLabels']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/encoder_heatmaps.py": {
        "torch": {
            "device_150": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_151": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "rgb_gray",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalize_image(rgb_gray.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_73": {
                "variable": {
                    "value": "nir",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalize_image(nir.astype(np.float32))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "empty_cache_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_169": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "MultiscaleTransformerEncoder(output_attention_weights)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(net)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_count_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "util/utils.py": {
        "torch": {
            "from_numpy_221": {
                "variable": {
                    "value": "val_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "train_labels[val_indices]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_226": {
                "variable": {
                    "value": "val_data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "normalize_image(val_data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_201": {
                "variable": {
                    "value": "test_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.squeeze(data['Labels'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(a, b)",
                            "Call"
                        ],
                        [
                            "data['Data'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "normalize_image(x)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_31": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models_dirname + 'model_epoch_%s.pth' % load_epoch",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_34": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "flist[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_169": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_64": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "torch.optim.Adam(net.parameters())",
                            "Call"
                        ],
                        [
                            "checkpoint['optimizer']",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "util/warmup_scheduler.py": {
        "torch": {}
    }
}