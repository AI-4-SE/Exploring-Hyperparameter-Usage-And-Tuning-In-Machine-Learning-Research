{
    "generate_plots.py": {
        "tensorflow": {},
        "torch": {}
    },
    "dataset.py": {
        "torch": {
            "pad_123": {
                "variable": {
                    "value": "padded_signal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95 * normalize(data)",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(start_position, num_zeros_to_pad - start_position)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (start_position, num_zeros_to_pad - start_position), 'constant')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (int(np.floor(num_zeros_to_pad / 2)), int(np.ceil(num_zeros_to_pad / 2))), 'constant')",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "self.zero_pad_data(audio)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_86": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (start_position, num_zeros_to_pad - start_position), 'constant')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (int(np.floor(num_zeros_to_pad / 2)), int(np.ceil(num_zeros_to_pad / 2))), 'constant')",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "self.zero_pad_data(audio)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_135": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (start_position, num_zeros_to_pad - start_position), 'constant')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (int(np.floor(num_zeros_to_pad / 2)), int(np.ceil(num_zeros_to_pad / 2))), 'constant')",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "self.zero_pad_data(audio)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(start_position, num_zeros_to_pad - start_position)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_94": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (start_position, num_zeros_to_pad - start_position), 'constant')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(audio).float()",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "F.pad(audio, (int(np.floor(num_zeros_to_pad / 2)), int(np.ceil(num_zeros_to_pad / 2))), 'constant')",
                            "Call"
                        ],
                        [
                            "audio[0:self.segment_length]",
                            "Subscript"
                        ],
                        [
                            "self.zero_pad_data(audio)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(int(np.floor(num_zeros_to_pad / 2)), int(np.ceil(num_zeros_to_pad / 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                }
            },
            "from_numpy_117": {
                "ndarray": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.95 * normalize(data)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "evaluate_experiment_pcgan.py": {
        "torch": {
            "DataLoader_78": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(test_annotation_index, args.sampling_rate, args.segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "25",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_80": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(test_annotation_index, args.sampling_rate, args.segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_95": {
                "f": {
                    "value": "mel2wav/best_netG_epoch_2120.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_96": {
                "f": {
                    "value": "fixed_classifier_checkpoints/best_digit_alexnet_spectrograms_epoch_26.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "fixed_classifier_checkpoints/best_gender_alexnet_epoch_29.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_98": {
                "f": {
                    "value": "fixed_classifier_checkpoints/audio_digit_net_early_stop_epoch_26.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_99": {
                "f": {
                    "value": "fixed_classifier_checkpoints/audio_gender_net_early_stop_epoch_36.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_107": {
                "f": {
                    "value": "fixed_classifier_checkpoints/best_digit_alexnet_spectrograms_epoch_26.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_108": {
                "f": {
                    "value": "fixed_classifier_checkpoints/audio_digit_net_early_stop_epoch_26.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unsqueeze_171": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_174": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "spectrograms.to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(spectrograms, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_182": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_184": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "filter_mel.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_196": {
                "variable": {
                    "value": "pred_digit_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_digit_F.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_199": {
                "variable": {
                    "value": "pred_digit_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_digit_G.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_203": {
                "variable": {
                    "value": "pred_gender_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_gender_F.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_206": {
                "variable": {
                    "value": "pred_gender_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec_pred_gender_G.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_282": {
                "variable": {
                    "value": "pred_digit_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_pred_digit_F.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_283": {
                "variable": {
                    "value": "pred_gender_F",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_pred_gender_F.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_285": {
                "variable": {
                    "value": "pred_digit_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_pred_digit_G.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_286": {
                "variable": {
                    "value": "pred_gender_G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio_pred_gender_G.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flatten_302": {
                "variable": {
                    "value": "acts1_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acts1_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flatten(acts1_tmp, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_303": {
                "variable": {
                    "value": "acts2_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acts2_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flatten(acts2_tmp, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_304": {
                "variable": {
                    "value": "acts3_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acts3_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flatten(acts3_tmp, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_305": {
                "variable": {
                    "value": "acts4_tmp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acts4_tmp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.flatten(acts4_tmp, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_145": {
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'netF_latest_epoch_1000.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_146": {
                "f": {
                    "value": "os.path.join(checkpoint_dir, 'netG_latest_epoch_1000.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_222": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_225": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_317": {
                "variable": {
                    "value": "original_audio_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "original_audio[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_318": {
                "variable": {
                    "value": "gen_audio_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gen_audio[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_266": {
                "input": {
                    "value": "filter_mel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netF(spectrograms, z1, gender.long())",
                            "Call"
                        ],
                        [
                            "torch.squeeze(filter_mel, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_267": {
                "input": {
                    "value": "gen_mel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netG(filter_mel, z2, gen_secret)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(gen_mel, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_268": {
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "spectrograms.to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ],
                        [
                            "torch.squeeze(spectrograms, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_231": {
                "input": {
                    "value": "filtered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netF(spectrograms, z1, gender.long()).detach()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(filtered, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "filter.py": {
        "torch": {
            "Sequential_35": {
                "*args": {
                    "value": "nn.utils.weight_norm(nn.Conv2d(channels_in, channels_out, kernel_size, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_52": {
                "variable": {
                    "value": "self.embed_condition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.project_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "noise_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "image_width // 16 * image_height // 16 * chs[4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.project_cond",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "image_width // 16 * image_height // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "variable": {
                    "value": "self.pool_down1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.pool_down2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_67": {
                "variable": {
                    "value": "self.pool_down3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "variable": {
                    "value": "self.pool_down4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "variable": {
                    "value": "self.dconv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_108": {
                "variable": {
                    "value": "conv5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dconv_down5(pool4)",
                            "Call"
                        ],
                        [
                            "torch.cat((conv5_down, noise, cond_emb), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((conv5_down, noise), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_110": {
                "variable": {
                    "value": "conv5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv4_down, conv5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "conv4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(conv5_down, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat((conv4_down, conv5_up), dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up5(conv5_up)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_114": {
                "variable": {
                    "value": "conv4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv3_down, conv4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_117": {
                "variable": {
                    "value": "conv3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(conv5_up, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat((conv3_down, conv4_up), dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(conv4_up)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "conv3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv2_down, conv3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_121": {
                "variable": {
                    "value": "conv2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(conv4_up, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat((conv2_down, conv3_up), dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(conv3_up)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_122": {
                "variable": {
                    "value": "conv2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv1_down, conv2_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_127": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dconv_up1(conv2_up)",
                            "Call"
                        ]
                    ]
                }
            },
            "weight_norm_36": {
                "module": {
                    "value": "nn.Conv2d(channels_in, channels_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_39": {
                "module": {
                    "value": "nn.Conv2d(channels_out, channels_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "num_features": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "conv5_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5_down, noise, cond_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "conv5_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5_down, noise)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "channels_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_39": {
                "in_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mel2wav/interface.py": {
        "torch": {
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_27": {
                "f": {
                    "value": "root / 'best_netG.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ],
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ],
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_45": {
                "f": {
                    "value": "root / 'model_f.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_46": {
                "f": {
                    "value": "root / 'best_netG.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ],
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ],
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_64": {
                "f": {
                    "value": "root / f'models/{model_name}.pt'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ],
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ],
                        [
                            "get_default_device()",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "mel2wav/modules.py": {
        "torch": {
            "weight_norm_19": {
                "module": {
                    "value": "nn.Conv1d(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "weight_norm_23": {
                "module": {
                    "value": "nn.ConvTranspose1d(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "hann_window_41": {
                "variable": {
                    "value": "window",
                    "type": "Variable",
                    "possible_values": []
                },
                "window_length": {
                    "value": "win_length",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_45": {
                "variable": {
                    "value": "mel_basis",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mel_basis",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "librosa_mel_fn(sampling_rate, n_fft, n_mel_channels, mel_fmin, mel_fmax)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mel_basis).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_56": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(audio, (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(p, p)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_56": {
                "variable": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stft_57": {
                "variable": {
                    "value": "fft",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "audio",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(audio, (p, p), 'reflect').squeeze(1)",
                            "Call"
                        ]
                    ]
                },
                "n_fft": {
                    "value": "self.n_fft",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hop_length": {
                    "value": "self.hop_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "win_length": {
                    "value": "self.win_length",
                    "type": "Attribute",
                    "possible_values": []
                },
                "window": {
                    "value": "self.window",
                    "type": "Attribute",
                    "possible_values": []
                },
                "center": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_66": {
                "variable": {
                    "value": "magnitude",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_part ** 2 + imag_part ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "variable": {
                    "value": "mel_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.mel_basis",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "magnitude",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(real_part ** 2 + imag_part ** 2)",
                            "Call"
                        ]
                    ]
                }
            },
            "log10_68": {
                "variable": {
                    "value": "log_mel_spec",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.clamp(mel_output, min=1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_75": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.LeakyReLU(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*model",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ModuleDict_136": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_138": {
                "variable": {
                    "value": "model[layer_0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad1d(7)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_163": {
                "variable": {
                    "value": "model[layer_%d % (n_layers + 1)]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "WNConv1d(nf_prev, nf, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleDict_185": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool1d_191": {
                "variable": {
                    "value": "self.downsample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv1d_19": {
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "ConvTranspose1d_23": {
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "variable": {
                    "value": "model[layer_%d % n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*args": {
                    "value": "WNConv1d(nf_prev, nf, kernel_size=stride * 10 + 1, stride=stride, padding=stride * 5, groups=nf_prev // 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_68": {
                "input": {
                    "value": "mel_output",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.matmul(self.mel_basis, magnitude)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_76": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_77": {
                "padding": {
                    "value": "dilation",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "LeakyReLU_79": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_96": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReflectionPad1d_121": {
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad1d_139": {
                "padding": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_141": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_165": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "LeakyReLU_103": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_159": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mel2wav/utils.py": {
        "torch": {
            "squeeze_29": {
                "variable": {
                    "value": "spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_46": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spectrograms[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_47": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "spectrograms[:, :, :-1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "variable": {
                    "value": "clipped_spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(spectrograms - means) / (3 * stds + smallValue)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "networks.py": {
        "torch": {
            "Sequential_193": {
                "variable": {
                    "value": "model.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_209": {
                "variable": {
                    "value": "model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_260": {
                "variable": {
                    "value": "model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_ftrs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.fc.in_features",
                            "Attribute"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_261": {
                "variable": {
                    "value": "model.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "*args": {
                    "value": "nn.utils.weight_norm(nn.Conv2d(channels_in, channels_out, kernel_size, padding=1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Embedding_50": {
                "variable": {
                    "value": "self.embed_condition",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nb_classes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "variable": {
                    "value": "self.project_noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "noise_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "image_width // 16 * image_height // 16 * chs[4]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.project_cond",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embedding_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "16",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "image_width // 16 * image_height // 16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.pool_down1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "variable": {
                    "value": "self.pool_down2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_65": {
                "variable": {
                    "value": "self.pool_down3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_68": {
                "variable": {
                    "value": "self.pool_down4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_79": {
                "variable": {
                    "value": "self.dconv_up1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "chs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_106": {
                "variable": {
                    "value": "conv5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_down",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dconv_down5(pool4)",
                            "Call"
                        ],
                        [
                            "torch.cat((conv5_down, noise, cond_emb), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((conv5_down, noise), dim=1)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "conv5_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv4_down, conv5_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_111": {
                "variable": {
                    "value": "conv4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv5_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(conv5_down, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat((conv4_down, conv5_up), dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up5(conv5_up)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "conv4_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv3_down, conv4_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_115": {
                "variable": {
                    "value": "conv3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv4_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(conv5_up, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat((conv3_down, conv4_up), dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up4(conv4_up)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "conv3_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv2_down, conv3_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_119": {
                "variable": {
                    "value": "conv2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv3_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.interpolate(conv4_up, scale_factor=2, mode='nearest')",
                            "Call"
                        ],
                        [
                            "torch.cat((conv2_down, conv3_up), dim=1)",
                            "Call"
                        ],
                        [
                            "self.dconv_up3(conv3_up)",
                            "Call"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "conv2_up",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv1_down, conv2_up)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tanh_125": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "conv1_up",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.dconv_up1(conv2_up)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_135": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(1, 100, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(100, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_146": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(64, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 128, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_164": {
                "variable": {
                    "value": "self.conv6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv1d(128, 64, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_170": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(8192, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_171": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(1024, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "self.fc3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_225": {
                "variable": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1, 64, kernel_size=5, stride=1, padding=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_241": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_254": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.tanh(conv1_up)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv3(out)",
                            "Call"
                        ],
                        [
                            "self.conv4(out)",
                            "Call"
                        ],
                        [
                            "self.conv5(out)",
                            "Call"
                        ],
                        [
                            "conv_out.view(-1, 8192)",
                            "Call"
                        ],
                        [
                            "self.fc1(out)",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "self.fc3(out)",
                            "Call"
                        ],
                        [
                            "self.features(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(out)",
                            "Call"
                        ],
                        [
                            "torch.flatten(out, 1)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "weight_norm_34": {
                "module": {
                    "value": "nn.Conv2d(channels_in, channels_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "weight_norm_37": {
                "module": {
                    "value": "nn.Conv2d(channels_out, channels_out, kernel_size, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "conv5_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5_down, noise, cond_emb)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "conv5_down",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv5_down, noise)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_194": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_196": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_198": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_199": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_202": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_203": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_205": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_206": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_211": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_212": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_214": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_215": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_216": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "in_channels": {
                    "value": "channels_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_136": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_137": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_138": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_141": {
                "in_channels": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_143": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_147": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_148": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_149": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_153": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_155": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_159": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_161": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv1d_165": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool1d_167": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_170": {
                "in_features": {
                    "value": "8192",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_170": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_171": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_171": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_226": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_227": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_228": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_229": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_230": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_231": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_232": {
                "in_channels": {
                    "value": "192",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_233": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "in_channels": {
                    "value": "384",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_235": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_237": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_238": {
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_242": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_243": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_244": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dropout_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_246": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_247": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_248": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "run_experiment_pcgan.py": {
        "torch": {
            "DataLoader_120": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(train_annotation_index, args.sampling_rate, args.segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(test_annotation_index, args.sampling_rate, args.segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_175": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(run_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_184": {
                "variable": {
                    "value": "optF",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netF.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.F_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_185": {
                "variable": {
                    "value": "optFD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netFD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.FD_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_186": {
                "variable": {
                    "value": "optG",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.G_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_187": {
                "variable": {
                    "value": "optGD",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netGD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.GD_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_130": {
                "f": {
                    "value": "mel2wav/best_netG_epoch_2120.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_131": {
                "f": {
                    "value": "fixed_classifier_checkpoints/best_digit_alexnet_spectrograms_epoch_26.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_132": {
                "f": {
                    "value": "fixed_classifier_checkpoints/best_gender_alexnet_epoch_29.pt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "manual_seed_165": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "args.seed[str(run)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unsqueeze_247": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_250": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "spectrograms.to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_257": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_278": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_281": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_325": {
                "variable": {
                    "value": "predicted_gender_FD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_secret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netFD(filter_mel)",
                            "Call"
                        ],
                        [
                            "netGD(gen_mel)",
                            "Call"
                        ],
                        [
                            "netFD(filter_mel.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_330": {
                "variable": {
                    "value": "predicted_fake_GD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred_secret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netGD(gen_mel.detach())",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_331": {
                "variable": {
                    "value": "predicted_real_GD",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_pred_secret",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netGD(spectrograms)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_338": {
                "variable": {
                    "value": "predicted_digit",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_digit.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_341": {
                "variable": {
                    "value": "fixed_predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fixed_pred_secret.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_403": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_406": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "spectrograms.to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_410": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_412": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "filter_mel.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_420": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_digit.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_424": {
                "variable": {
                    "value": "fixed_predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fixed_pred_secret.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_216": {
                "f": {
                    "value": "checkpoints[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_449": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_453": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "spectrograms.to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_457": {
                "variable": {
                    "value": "z1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_460": {
                "variable": {
                    "value": "z2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "spectrograms.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_468": {
                "variable": {
                    "value": "pred_digit_male",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "digit_male.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_470": {
                "variable": {
                    "value": "pred_digit_female",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "digit_female.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_474": {
                "variable": {
                    "value": "pred_gender_male",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gender_male.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_476": {
                "variable": {
                    "value": "pred_gender_female",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gender_female.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_535": {
                "obj": {
                    "value": "object.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, name + '_epoch_{}.pt'.format(save_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_536": {
                "obj": {
                    "value": "object.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(checkpoint_dir, name + '_latest_epoch_{}.pt'.format(save_epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_269": {
                "input": {
                    "value": "torch.relu(filter_distortion_loss - eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_290": {
                "input": {
                    "value": "torch.relu(generator_distortion_loss - eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_269": {
                "input": {
                    "value": "filter_distortion_loss - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_290": {
                "input": {
                    "value": "generator_distortion_loss - eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_510": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_494": {
                "input": {
                    "value": "filtered",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netF(spectrograms, z1, gender.long()).detach()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(filtered, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_495": {
                "input": {
                    "value": "generated_male",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netG(filtered, z2, male).detach()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(generated_male, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_496": {
                "input": {
                    "value": "generated_female",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "netG(filtered, z2, female).detach()",
                            "Call"
                        ],
                        [
                            "torch.squeeze(generated_female, 1).to(device) * 3 * stds.to(device) + means.to(device)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "train_audio_net.py": {
        "torch": {
            "SummaryWriter_87": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(experiment_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_122": {
                "variable": {
                    "value": "opt_gender",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "audio_gender_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_123": {
                "variable": {
                    "value": "opt_digit",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "audio_digit_net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_144": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(train_annotation_index, args.sampling_rate, args.segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_145": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(test_annotation_index, args.sampling_rate, args.segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_58": {
                "seed": {
                    "value": "manualSeed",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "random.randint(1, 10000)",
                            "Call"
                        ],
                        [
                            "args.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1).to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_192": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_gender.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_195": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_digit.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_215": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1).to(device)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_228": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_gender.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_231": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_digit.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_246": {
                "obj": {
                    "value": "audio_gender_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, 'audio_gender_net_early_stop_epoch_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_255": {
                "obj": {
                    "value": "audio_digit_net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, 'audio_digit_net_early_stop_epoch_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_digit_net.py": {
        "torch": {
            "SummaryWriter_53": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(exp_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "optimizer_disc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator_digit.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(train_annotation_index, sampling_rate, segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_107": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(val_annotation_index, sampling_rate, segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_136": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_158": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_175": {
                "obj": {
                    "value": "discriminator_digit.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(root, 'best_digit_alexnet_spectrograms_epoch_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train_gender_net.py": {
        "torch": {
            "SummaryWriter_55": {
                "variable": {
                    "value": "writer",
                    "type": "Variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "str(exp_dir)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_100": {
                "variable": {
                    "value": "optimizer_disc",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator_gender.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_104": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(train_annotation_index, sampling_rate, segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "dataset.AnnotatedAudioDataset(val_annotation_index, sampling_rate, segment_length)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_128": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_136": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(x, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_152": {
                "variable": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ],
                        [
                            "fft(x).detach()",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(spectrograms, 1).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_157": {
                "variable": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_177": {
                "obj": {
                    "value": "discriminator_gender.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(exp_dir, 'best_gender_alexnet_epoch_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "mean_45": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "std_46": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "clamp_48": {
                "variable": {
                    "value": "clipped_spectrograms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normalized_spectrograms",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(spectrograms - means) / (3 * stds + smallValue)",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_63": {
                "variable": {
                    "value": "spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_72": {
                "variable": {
                    "value": "orig_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_73": {
                "variable": {
                    "value": "male_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "male_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_74": {
                "variable": {
                    "value": "female_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "female_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_89": {
                "variable": {
                    "value": "orig_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "orig_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_90": {
                "variable": {
                    "value": "filtered_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "filtered_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_91": {
                "variable": {
                    "value": "male_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "male_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "squeeze_92": {
                "variable": {
                    "value": "female_spec_np",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "female_spec",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_20": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}