{
    "retinanet/coco_eval.py": {
        "sklearn": {
            "roc_auc_score_98": {
                "y_true": {
                    "value": "global_gts[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "global_preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_99": {
                "y_true": {
                    "value": "global_gts[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "local_preds[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_77": {
                "variable": {
                    "value": "local_output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "9",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_79": {
                "variable": {
                    "value": "idx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "labels == i",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "coco_validation.py": {
        "torch": {
            "is_available_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_36": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet50(num_classes=dataset_val.num_classes(), pretrained=True)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_39": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet50(num_classes=dataset_val.num_classes(), pretrained=True)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_9": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_35": {
                "f": {
                    "value": "parser.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_38": {
                "f": {
                    "value": "parser.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "retinanet/anchors.py": {
        "torch": {
            "is_available_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "all_anchors.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "all_anchors.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "retinanet/csv_eval.py": {
        "torch": {
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "retinanet/dataloader.py": {
        "torch": {
            "zeros_342": {
                "variable": {
                    "value": "padded_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(imgs)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "max_width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(widths).max()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "max_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(heights).max()",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_352": {
                "*size": {
                    "value": "(len(annots), max_num_annots, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_359": {
                "*size": {
                    "value": "(len(annots), 1, 5)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "from_numpy_410": {
                "ndarray": {
                    "value": "annots",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[s['annot'] for s in data]",
                            "ListComp"
                        ]
                    ]
                }
            }
        }
    },
    "retinanet/losses.py": {
        "torch": {
            "clamp_12": {
                "variable": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.unsqueeze(a[:, 2], dim=1), b[:, 2]) - torch.max(torch.unsqueeze(a[:, 0], 1), b[:, 0])",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iw, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_13": {
                "variable": {
                    "value": "ih",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ih",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(torch.unsqueeze(a[:, 3], dim=1), b[:, 3]) - torch.max(torch.unsqueeze(a[:, 1], 1), b[:, 1])",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(ih, min=0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_17": {
                "variable": {
                    "value": "ua",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ua",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.unsqueeze((a[:, 2] - a[:, 0]) * (a[:, 3] - a[:, 1]), dim=1) + area - iw * ih",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(ua, min=1e-08)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-08",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_307": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "global_preds.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_336": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "feat_1 - feat_2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_336": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_344": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications.shape[0]",
                            "Subscript"
                        ],
                        [
                            "classifications.shape[0]",
                            "Subscript"
                        ],
                        [
                            "global_preds.shape[0]",
                            "Subscript"
                        ],
                        [
                            "annotations.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_354": {
                "variable": {
                    "value": "intra_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_356": {
                "variable": {
                    "value": "inter_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_9": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 2], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_9": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 0], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_10": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 3], dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_10": {
                "input": {
                    "value": "torch.unsqueeze(a[:, 1], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ],
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_64": {
                "variable": {
                    "value": "(IoU_max, IoU_argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "IoU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection / ua",
                            "BinOp"
                        ],
                        [
                            "calc_iou(anchors[0, :, :], bbox_annotation[:, :4])",
                            "Call"
                        ],
                        [
                            "calc_iou(anchors[0, :, :], ema_bbox[:, :4])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_77": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IoU_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "where_91": {
                "variable": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.eq(targets, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "alpha_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(targets.shape).cuda() * alpha",
                            "BinOp"
                        ],
                        [
                            "torch.ones(targets.shape) * alpha",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.eq(targets, 1.0), alpha_factor, 1.0 - alpha_factor)",
                            "Call"
                        ],
                        [
                            "alpha_0 + ema_classifications * (alpha_1 - alpha_0)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "1.0 - alpha_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_92": {
                "variable": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.eq(targets, 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ],
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_213": {
                "variable": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ],
                        [
                            "classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_214": {
                "variable": {
                    "value": "ema_classification",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ema_classifications[j, :, :]",
                            "Subscript"
                        ],
                        [
                            "torch.clamp(ema_classification, 0.0001, 1.0 - 0.0001)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 0.0001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_217": {
                "variable": {
                    "value": "(IoU_max, IoU_argmax)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "IoU",
                    "type": "variable",
                    "possible_values": [
                        [
                            "intersection / ua",
                            "BinOp"
                        ],
                        [
                            "calc_iou(anchors[0, :, :], bbox_annotation[:, :4])",
                            "Call"
                        ],
                        [
                            "calc_iou(anchors[0, :, :], ema_bbox[:, :4])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ge_226": {
                "variable": {
                    "value": "positive_indices",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "IoU_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_235": {
                "variable": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ema_classification - classification",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_241": {
                "variable": {
                    "value": "cls_cons_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.ne(targets, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_cons_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_cons_loss, torch.zeros(cls_cons_loss.shape).cuda())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros(cls_cons_loss.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_310": {
                "variable": {
                    "value": "global_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(global_preds, 1e-10, 1.0 - 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-10",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0 - 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_350": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_9": {
                "input": {
                    "value": "a[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_10": {
                "input": {
                    "value": "a[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_15": {
                "input": {
                    "value": "(a[:, 2] - a[:, 0]) * (a[:, 3] - a[:, 1])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_99": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "where_100": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.ne(targets, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_loss, torch.zeros(cls_loss.shape).cuda())",
                            "Call"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_loss, torch.zeros(cls_loss.shape))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros(cls_loss.shape).cuda()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_102": {
                "variable": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.ne(targets, -1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "cls_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "focal_weight * bce",
                            "BinOp"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_loss, torch.zeros(cls_loss.shape).cuda())",
                            "Call"
                        ],
                        [
                            "torch.where(torch.ne(targets, -1.0), cls_loss, torch.zeros(cls_loss.shape))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.zeros(cls_loss.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_121": {
                "variable": {
                    "value": "gt_widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_annotations[:, 2] - assigned_annotations[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_widths, min=1)",
                            "Call"
                        ],
                        [
                            "assigned_annotations[:, 2] - assigned_annotations[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_widths, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_122": {
                "variable": {
                    "value": "gt_heights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_annotations[:, 3] - assigned_annotations[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_heights, min=1)",
                            "Call"
                        ],
                        [
                            "assigned_annotations[:, 3] - assigned_annotations[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_heights, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_126": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / anchor_widths_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_127": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / anchor_heights_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_129": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_139": {
                "variable": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets - regression[positive_indices, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_141": {
                "variable": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.le(regression_diff, 1.0 / 9.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * 9.0 * torch.pow(regression_diff, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "regression_diff - 0.5 / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_153": {
                "tensors": {
                    "value": "regression_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_153": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_221": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_260": {
                "variable": {
                    "value": "gt_widths",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_annotations[:, 2] - assigned_annotations[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_widths, min=1)",
                            "Call"
                        ],
                        [
                            "assigned_annotations[:, 2] - assigned_annotations[:, 0]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_widths, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_261": {
                "variable": {
                    "value": "gt_heights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "assigned_annotations[:, 3] - assigned_annotations[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_heights, min=1)",
                            "Call"
                        ],
                        [
                            "assigned_annotations[:, 3] - assigned_annotations[:, 1]",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(gt_heights, min=1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_265": {
                "variable": {
                    "value": "targets_dw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_widths / anchor_widths_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_266": {
                "variable": {
                    "value": "targets_dh",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "gt_heights / anchor_heights_pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_268": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(targets_dx, targets_dy, targets_dw, targets_dh)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "abs_278": {
                "variable": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "targets - regression[positive_indices, :]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_280": {
                "variable": {
                    "value": "regression_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "torch.le(regression_diff, 1.0 / 9.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "0.5 * 9.0 * torch.pow(regression_diff, 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "regression_diff - 0.5 / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_294": {
                "tensors": {
                    "value": "regression_consistency_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mean_294": {
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_with_logits_322": {
                "input": {
                    "value": "global_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(global_preds, 1e-10, 1.0 - 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(global_preds.shape)",
                            "Call"
                        ],
                        [
                            "one_hot.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.num_classes)",
                            "Call"
                        ],
                        [
                            "one_hot.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                },
                "pos_weight": {
                    "value": "self.pos_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_324": {
                "input": {
                    "value": "global_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(global_preds, 1e-10, 1.0 - 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(global_preds.shape)",
                            "Call"
                        ],
                        [
                            "one_hot.cuda()",
                            "Call"
                        ],
                        [
                            "torch.zeros(batch_size, self.num_classes)",
                            "Call"
                        ],
                        [
                            "one_hot.cuda()",
                            "Call"
                        ],
                        [
                            "one_hot.sum(dim=0).unsqueeze(1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_324": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_51": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "classification.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eq_91": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "eq_92": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pow_93": {
                "input": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.eq(targets, 1.0), 1.0 - classification, classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(ema_classification - classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ],
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_196": {
                "variable": {
                    "value": "ema_class",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_197": {
                "variable": {
                    "value": "ema_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_199": {
                "variable": {
                    "value": "ema_class",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_pred for _pred in ema_class_copy if _pred in annotations[j, :, 4]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_201": {
                "variable": {
                    "value": "ema_bbox",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[_bbox for (_bbox, _pred) in zip(ema_bbox_copy, ema_class_copy) if _pred in annotations[j, :, 4]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "is_available_205": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_220": {
                "*size": {
                    "value": "classification.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pow_236": {
                "input": {
                    "value": "focal_weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.where(torch.eq(targets, 1.0), 1.0 - classification, classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ],
                        [
                            "torch.abs(ema_classification - classification)",
                            "Call"
                        ],
                        [
                            "alpha_factor * torch.pow(focal_weight, gamma)",
                            "BinOp"
                        ]
                    ]
                },
                "exponent": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2.0",
                            "Constant"
                        ],
                        [
                            "2.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "ne_241": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "*size": {
                    "value": "cls_cons_loss.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_289": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "lt_75": {
                "input": {
                    "value": "IoU_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_87": {
                "*size": {
                    "value": "targets.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_89": {
                "*size": {
                    "value": "targets.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ne_100": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_100": {
                "*size": {
                    "value": "cls_loss.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ne_102": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ],
                        [
                            "torch.ones(classification.shape) * -1",
                            "BinOp"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "torch.stack((targets_dx, targets_dy, targets_dw, targets_dh))",
                            "Call"
                        ],
                        [
                            "targets.t()",
                            "Call"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]]).cuda()",
                            "BinOp"
                        ],
                        [
                            "targets / torch.Tensor([[0.1, 0.1, 0.2, 0.2]])",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_102": {
                "*size": {
                    "value": "cls_loss.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_104": {
                "input": {
                    "value": "num_positive_anchors.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "le_142": {
                "input": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ],
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0 / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "lt_224": {
                "input": {
                    "value": "IoU_max",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "0.4",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_242": {
                "input": {
                    "value": "num_positive_anchors.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "le_281": {
                "input": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ],
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "1.0 / 9.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_52": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_53": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_55": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_56": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_95": {
                "input": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_143": {
                "input": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ],
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_149": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_206": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_207": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_209": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_210": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_238": {
                "input": {
                    "value": "1.0 - classification",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_282": {
                "input": {
                    "value": "regression_diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ],
                        [
                            "torch.abs(targets - regression[positive_indices, :])",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_290": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_292": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_368": {
                "input": {
                    "value": "(self.margin - torch.sqrt(self.distance(cls_feat_i, prototype_j))) / self.margin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_370": {
                "input": {
                    "value": "torch.max(self.margin - torch.sqrt(self.distance(cls_feat_i, prototype_j)), torch.tensor(0).float().cuda())",
                    "type": "Call",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_371": {
                "input": {
                    "value": "self.margin - torch.sqrt(self.distance(cls_feat_i, prototype_j))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_372": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_369": {
                "input": {
                    "value": "self.distance(cls_feat_i, prototype_j)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_371": {
                "input": {
                    "value": "self.distance(cls_feat_i, prototype_j)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "retinanet/model.py": {
        "torch": {
            "Conv2d_26": {
                "variable": {
                    "value": "self.P5_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C5_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_27": {
                "variable": {
                    "value": "self.P5_upsampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.P5_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.P4_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C4_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_32": {
                "variable": {
                    "value": "self.P4_upsampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.P4_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.P3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C3_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Upsample_37": {
                "variable": {
                    "value": "self.P3_upsampled",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.P3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_41": {
                "variable": {
                    "value": "self.P2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C2_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.P2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.P6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "C5_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_48": {
                "variable": {
                    "value": "self.P7_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.P7_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_93": {
                "variable": {
                    "value": "self.act3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_95": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_96": {
                "variable": {
                    "value": "self.act4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_features_in",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.act1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "variable": {
                    "value": "self.act2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_134": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_135": {
                "variable": {
                    "value": "self.act3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_137": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_138": {
                "variable": {
                    "value": "self.act4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_140": {
                "variable": {
                    "value": "self.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ],
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_anchors * num_classes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sigmoid_141": {
                "variable": {
                    "value": "self.output_act",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_175": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_176": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_177": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_178": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_241": {
                "variable": {
                    "value": "self.prototypes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_305": {
                "variable": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "attentions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(attentions, dim=0)",
                            "Call"
                        ],
                        [
                            "self._get_local_map(class_maps, global_class_maps.shape[-2:], normalize=True, detach=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_312": {
                "variable": {
                    "value": "one_hot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "local_maps[0].shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_328": {
                "variable": {
                    "value": "neg_prototype_idx",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.prototypes.sum(dim=1) == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "regression",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.regressionModel(feature) for feature in features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "classifications",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[c.contiguous().view(c.shape[0], -1, self.num_classes) for c in class_maps]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "median_487": {
                "variable": {
                    "value": "(threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(batch_size, num_channels, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_493": {
                "variable": {
                    "value": "threshold",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(batch_size, num_channels, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_499": {
                "variable": {
                    "value": "(threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(batch_size, num_channels, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_505": {
                "variable": {
                    "value": "(threshold, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "input.view(batch_size, num_channels, h * w)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_204": {
                "variable": {
                    "value": "self.global_classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fpn_sizes[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "80",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_247": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_258": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "is_available_318": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_398": {
                "variable": {
                    "value": "global_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layer4(x3)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_412": {
                "variable": {
                    "value": "cls_features",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "cls_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cls_features.contiguous().view(batch_size, self.num_classes, feat_size)",
                            "Call"
                        ],
                        [
                            "cls_features * one_hot.unsqueeze(2).repeat(1, 1, 2048)",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(cls_features, dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_291": {
                "variable": {
                    "value": "lmap",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lmap.unsqueeze(0).unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "reshap_size",
                    "type": "variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_327": {
                "*size": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_248": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_250": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_303": {
                "tensors": {
                    "value": "attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_288": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lmp, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "lmp[..., target_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_377": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(classifications, dim=1)",
                            "Call"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_285": {
                "input": {
                    "value": "lmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lmp, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "lmp[..., target_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "max_287": {
                "input": {
                    "value": "lmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(lmp, 2)[0]",
                            "Subscript"
                        ],
                        [
                            "lmp[..., target_index]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_383": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_416": {
                "input": {
                    "value": "global_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_maps.sum(dim=(2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_418": {
                "input": {
                    "value": "global_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "global_maps.sum(dim=(2, 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_449": {
                "variable": {
                    "value": "idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "nms_scores > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "max_466": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(classifications, dim=1)",
                            "Call"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unsqueeze_426": {
                "input": {
                    "value": "_regression[k, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_431": {
                "input": {
                    "value": "classification",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(classifications, dim=1)",
                            "Call"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ],
                        [
                            "classification[:, scores_over_thresh, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_472": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_436": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_437": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_438": {
                "*size": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "retinanet/oid_dataset.py": {
        "torch": {}
    },
    "retinanet/utils.py": {
        "torch": {
            "Conv2d_8": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_18": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_19": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_21": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "stack_124": {
                "variable": {
                    "value": "pred_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[pred_boxes_x1, pred_boxes_y1, pred_boxes_x2, pred_boxes_y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_138": {
                "variable": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_139": {
                "variable": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_141": {
                "variable": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "width",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "clamp_142": {
                "variable": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes[:, :, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "max": {
                    "value": "height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "is_available_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0, 0, 0, 0]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0, 0, 0, 0]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.1, 0.1, 0.2, 0.2]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_98": {
                "variable": {
                    "value": "self.std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0.1, 0.1, 0.2, 0.2]).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_116": {
                "input": {
                    "value": "dw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 2] * self.std[2] + self.mean[2]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "exp_117": {
                "input": {
                    "value": "dh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deltas[:, :, 3] * self.std[3] + self.mean[3]",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "train_oxnet.py": {
        "torch": {
            "DataLoader_125": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='dataset1010_512_lu', transform=TransformTwice(transforms.Compose([Augmenter(), Normalizer(), Resizer()])))",
                            "Call"
                        ],
                        [
                            "CSVDataset(train_file=parser.csv_train, class_list=parser.csv_classes, transform=transforms.Compose([Augmenter(), Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "tuple_collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "TwoStreamBatchSampler(labeled_idxs, unlabeled_idxs, labeled_batch, unlabeled_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_184": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "retinanet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "DataLoader_129": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='dataset1010_512_val', transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "CSVDataset(train_file=parser.csv_val, class_list=parser.csv_classes, transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AspectRatioBasedSampler(dataset_val, batch_size=1, drop_last=False)",
                            "Call"
                        ],
                        [
                            "AspectRatioBasedSampler(dataset_test, batch_size=1, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_132": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='dataset1010_512_test', transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AspectRatioBasedSampler(dataset_val, batch_size=1, drop_last=False)",
                            "Call"
                        ],
                        [
                            "AspectRatioBasedSampler(dataset_test, batch_size=1, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_178": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet18(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet34(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet50(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet101(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet152(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_180": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet18(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet34(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet50(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet101(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet152(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_329": {
                "obj": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet18(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet34(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet50(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet101(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "model.resnet152(num_classes=dataset_train.num_classes(), pretrained=load_from_url)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_dir + '/model_final.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_25": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_158": {
                "f": {
                    "value": "parser.load_pth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_159": {
                "f": {
                    "value": "parser.load_pth",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_325": {
                "obj": {
                    "value": "retinanet.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_dir + '/{}_retinanet_{}.pt'.format(parser.dataset, epoch_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__243": {
                "parameters": {
                    "value": "retinanet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "train_retinanet.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "dataloader_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='dataset1010_512_label', transform=transforms.Compose([Augmenter(), Normalizer(), Resizer()]))",
                            "Call"
                        ],
                        [
                            "CSVDataset(train_file=parser.csv_train, class_list=parser.csv_classes, transform=transforms.Compose([Augmenter(), Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AspectRatioBasedSampler(dataset_train, batch_size=4, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_143": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "retinanet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_145": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.Adam(retinanet.parameters(), lr=1e-05)",
                            "Call"
                        ]
                    ]
                },
                "patience": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "verbose": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='dataset1010_512_val', transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "CSVDataset(train_file=parser.csv_val, class_list=parser.csv_classes, transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AspectRatioBasedSampler(dataset_val, batch_size=1, drop_last=False)",
                            "Call"
                        ],
                        [
                            "AspectRatioBasedSampler(dataset_test, batch_size=1, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_108": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_test",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='dataset1010_512_test', transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AspectRatioBasedSampler(dataset_val, batch_size=1, drop_last=False)",
                            "Call"
                        ],
                        [
                            "AspectRatioBasedSampler(dataset_test, batch_size=1, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_136": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_137": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet18(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet34(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet50(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ],
                        [
                            "model.resnet101(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet152(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_139": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet18(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet34(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet50(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ],
                        [
                            "model.resnet101(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet152(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_234": {
                "obj": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.resnet18(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet34(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet50(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ],
                        [
                            "model.resnet101(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ],
                        [
                            "model.resnet152(num_classes=dataset_train.num_classes(), pretrained=load_from_url, pure_retina=True)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "checkpoint_dir + '/model_final.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_24": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__181": {
                "parameters": {
                    "value": "retinanet.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_200": {
                "obj": {
                    "value": "retinanet.module",
                    "type": "Attribute",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_dir + '/{}_retinanet_{}.pt'.format(parser.dataset, epoch_num)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "visualize.py": {
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "dataloader_val",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "CocoDataset(parser.coco_path, set_name='train2017', transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ],
                        [
                            "CSVDataset(train_file=parser.csv_train, class_list=parser.csv_classes, transform=transforms.Compose([Normalizer(), Resizer()]))",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collater",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "sampler_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AspectRatioBasedSampler(dataset_val, batch_size=1, drop_last=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "parser.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(parser.model)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_59": {
                "variable": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "retinanet",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(parser.model)",
                            "Call"
                        ],
                        [
                            "retinanet.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet).cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(retinanet)",
                            "Call"
                        ]
                    ]
                }
            },
            "split_21": {
                "tensor": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}