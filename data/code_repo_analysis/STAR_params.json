{
    "src/multi_attention_forward.py": {
        "torch": {
            "bmm_242": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)",
                            "Call"
                        ],
                        [
                            "q * scaling",
                            "BinOp"
                        ],
                        [
                            "linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "linear(query, _w, _b)",
                            "Call"
                        ],
                        [
                            "linear(query, q_proj_weight_non_opt, in_proj_bias[0:embed_dim])",
                            "Call"
                        ],
                        [
                            "linear(query, q_proj_weight_non_opt, in_proj_bias)",
                            "Call"
                        ],
                        [
                            "q.contiguous().view(tgt_len, bsz * num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "k.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_257": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_260": {
                "variable": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "dropout_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout_p",
                            "Method Argument"
                        ]
                    ]
                },
                "training": {
                    "value": "training",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bmm_262": {
                "variable": {
                    "value": "attn_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn_output_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(q, k.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "attn_output_weights + attn_mask",
                            "BinOp"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.masked_fill(key_padding_mask.unsqueeze(1).unsqueeze(2), float('-inf'))",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz * num_heads, tgt_len, src_len)",
                            "Call"
                        ],
                        [
                            "softmax(attn_output_weights, dim=-1)",
                            "Call"
                        ],
                        [
                            "dropout(attn_output_weights, p=dropout_p, training=training)",
                            "Call"
                        ],
                        [
                            "attn_output_weights.view(bsz, num_heads, tgt_len, src_len)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(query, in_proj_weight, in_proj_bias).chunk(3, dim=-1)",
                            "Call"
                        ],
                        [
                            "torch.cat([v, bias_v.repeat(1, bsz, 1)])",
                            "Call"
                        ],
                        [
                            "linear(value, v_proj_weight_non_opt, in_proj_bias[embed_dim * 2:])",
                            "Call"
                        ],
                        [
                            "linear(value, v_proj_weight_non_opt, in_proj_bias)",
                            "Call"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "linear(key, _w, _b).chunk(2, dim=-1)",
                            "Call"
                        ],
                        [
                            "linear(value, _w, _b)",
                            "Call"
                        ],
                        [
                            "v.contiguous().view(-1, bsz * num_heads, head_dim).transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "static_v",
                            "variable"
                        ],
                        [
                            "torch.cat([v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)], dim=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "addmm_17": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "mat1": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "weight.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_230": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, torch.zeros((k.size(0), 1) + k.size()[2:], dtype=k.dtype, device=k.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, torch.zeros((v.size(0), 1) + v.size()[2:], dtype=v.dtype, device=v.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_187": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k, bias_k.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_188": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, bias_v.repeat(1, bsz, 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_233": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros((attn_mask.size(0), 1), dtype=attn_mask.dtype, device=attn_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros((key_padding_mask.size(0), 1), dtype=key_padding_mask.dtype, device=key_padding_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_105": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_109": {
                "input": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "key",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_190": {
                "variable": {
                    "value": "attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attn_mask, torch.zeros((attn_mask.size(0), 1), dtype=attn_mask.dtype, device=attn_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_195": {
                "variable": {
                    "value": "key_padding_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[key_padding_mask, torch.zeros((key_padding_mask.size(0), 1), dtype=key_padding_mask.dtype, device=key_padding_mask.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_230": {
                "*size": {
                    "value": "(k.size(0), 1) + k.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "k.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_231": {
                "*size": {
                    "value": "(v.size(0), 1) + v.size()[2:]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_233": {
                "*size": {
                    "value": "(attn_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "attn_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "*size": {
                    "value": "(key_padding_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_191": {
                "*size": {
                    "value": "(attn_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "attn_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "attn_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_196": {
                "*size": {
                    "value": "(key_padding_mask.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "key_padding_mask.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "key_padding_mask.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/processor.py": {
        "torch": {
            "Adam_62": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_63": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_153": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_41": {
                "obj": {
                    "value": "{'epoch': epoch, 'state_dict': self.net.state_dict(), 'optimizer_state_dict': self.optimizer.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.save_dir + '/' + self.args.train_model + '/' + self.args.train_model + '_' + str(epoch) + '.tar'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_130": {
                "variable": {
                    "value": "loss_o",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.criterion(outputs, batch_norm[1:, :, :2])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(all_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_55": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "self.args.model_save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "loss_o * lossmask / num",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_grad_norm__137": {
                "parameters": {
                    "value": "self.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "self.args.clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/star.py": {
        "torch": {
            "ModuleList_37": {
                "modules": {
                    "value": "[copy.deepcopy(module) for i in range(N)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.out_proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_185": {
                "variable": {
                    "value": "self.linear1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_186": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.linear2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "dim_feedforward",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2048",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_189": {
                "variable": {
                    "value": "self.norm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LayerNorm_190": {
                "variable": {
                    "value": "self.norm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "normalized_shape": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_191": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_192": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "float"
                        ],
                        [
                            "0.0",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "0.5",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_312": {
                "variable": {
                    "value": "self.input_embedding_layer_temporal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_313": {
                "variable": {
                    "value": "self.input_embedding_layer_spatial",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_316": {
                "variable": {
                    "value": "self.output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "48",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_317": {
                "variable": {
                    "value": "self.fusion_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_320": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_321": {
                "variable": {
                    "value": "self.dropout_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_322": {
                "variable": {
                    "value": "self.dropout_in2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "self.dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_332": {
                "variable": {
                    "value": "cumsum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "batch_num",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_409": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nodes_norm.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_Ped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes_norm.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_410": {
                "variable": {
                    "value": "GM",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nodes_norm.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "num_Ped",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nodes_norm.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_13": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_79": {
                "variable": {
                    "value": "self.q_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_80": {
                "variable": {
                    "value": "self.k_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.kdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_81": {
                "variable": {
                    "value": "self.v_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(embed_dim, self.vdim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_84": {
                "variable": {
                    "value": "self.in_proj_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "variable": {
                    "value": "self.in_proj_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(3 * embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_96": {
                "variable": {
                    "value": "self.bias_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_97": {
                "variable": {
                    "value": "self.bias_v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(1, 1, embed_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_396": {
                "variable": {
                    "value": "mean_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_abs[st:ed, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_397": {
                "variable": {
                    "value": "mean_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "node_abs[st:ed, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_458": {
                "variable": {
                    "value": "fusion_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temporal_input_embedded_last, spatial_input_embedded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_464": {
                "variable": {
                    "value": "temporal_input_embedded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temporal_input_embedded, spatial_input_embedded)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_468": {
                "variable": {
                    "value": "temporal_input_embedded_wnoise",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(temporal_input_embedded, noise_to_cat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "eye_279": {
                "n": {
                    "value": "mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "m": {
                    "value": "mask.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_423": {
                "variable": {
                    "value": "nodes_current",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(nodes_norm[:self.args.obs_length, node_index], nodes_current)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_428": {
                "variable": {
                    "value": "node_abs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(node_abs_base, node_abs_pred)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "triu_22": {
                "input": {
                    "value": "torch.ones((1, len_s, len_s), device=seq.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "empty_84": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_90": {
                "*size": {
                    "value": "3 * embed_dim",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "empty_96": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "empty_97": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "embed_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "(1, len_s, len_s)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "seq.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_215": {
                "input": {
                    "value": "self.linear1(src)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/utils.py": {
        "torch": {
            "zeros_496": {
                "variable": {
                    "value": "lossmask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "outputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "outputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "outputs.shape[1]",
                            "Subscript"
                        ],
                        [
                            "seq_length",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "seq_list.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_516": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs - targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_520": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "error[obs_length - 1:, pedi_full]",
                            "Subscript"
                        ],
                        [
                            "error[:, obs_length - 1:, pedi_full]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_522": {
                "variable": {
                    "value": "final_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error_full[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_533": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs - targets",
                    "type": "BinOp",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_538": {
                "variable": {
                    "value": "error_full_sum",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "error[obs_length - 1:, pedi_full]",
                            "Subscript"
                        ],
                        [
                            "error[:, obs_length - 1:, pedi_full]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_539": {
                "variable": {
                    "value": "(error_full_sum_min, min_index)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "error_full_sum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(error_full, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_544": {
                "variable": {
                    "value": "best_error",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "best_error",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(best_error)",
                            "Call"
                        ],
                        [
                            "best_error.permute(1, 0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_547": {
                "variable": {
                    "value": "error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "error_full_sum_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.min(error_full_sum, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_550": {
                "variable": {
                    "value": "final_error",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "best_error[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_518": {
                "input": {
                    "value": "lossMask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossMask",
                            "Method Argument"
                        ],
                        [
                            "lossMask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_535": {
                "input": {
                    "value": "lossMask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lossMask",
                            "Method Argument"
                        ],
                        [
                            "lossMask",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "trainval.py": {
        "torch": {
            "manual_seed_13": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "set_device_94": {
                "device": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}