{
    "braindecode/datautil/lazy_iterators.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "data_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "batch_indeces",
                    "possible_values": [
                        [
                            "self._get_batch_indeces(dataset=dataset, shuffle=shuffle)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "self.num_workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "False",
                    "possible_values": []
                },
                "collate_fn": {
                    "value": "collate_fn",
                    "possible_values": [
                        [
                            "partial(self.collate_fn, rng_state=random_state)",
                            "Call"
                        ],
                        [
                            "partial(self.collate_fn, rng_state=None)",
                            "Call"
                        ],
                        [
                            "custom_collate",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_rng_state_91": {
                "variable": {
                    "value": "random_state",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "set_rng_state_24": {
                "new_state": {
                    "value": "rng_state",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "braindecode/experiments/experiment.py": {
        "torch": {
            "is_available_263": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_391": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/models/base.py": {
        "torch": {
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "mean_238": {
                "input": {
                    "value": "outputs",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "mean_302": {
                "input": {
                    "value": "outputs",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/models/deep4.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_189": {
                "in_channels": {
                    "value": "self.n_filters_4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.final_conv_length, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LogSoftmax_196": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filters_time",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.filter_time_length, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_86": {
                "in_channels": {
                    "value": "self.n_filters_time",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filters_spat",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.in_chans)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(conv_stride, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.batch_norm",
                    "possible_values": []
                }
            },
            "Conv2d_98": {
                "in_channels": {
                    "value": "self.in_chans",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filters_time",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.filter_time_length, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(conv_stride, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.batch_norm",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "num_features": {
                    "value": "n_filters_conv",
                    "possible_values": [
                        [
                            "self.n_filters_spat",
                            "Attribute"
                        ],
                        [
                            "self.n_filters_time",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.batch_norm_alpha",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                }
            },
            "Dropout_130": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_133": {
                "in_channels": {
                    "value": "n_filters_before",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(filter_length, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "(conv_stride, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.batch_norm",
                    "possible_values": []
                }
            },
            "BatchNorm2d_144": {
                "num_features": {
                    "value": "n_filters",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.batch_norm_alpha",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/models/eegnet.py": {
        "torch": {
            "Conv2dWithConstraint_13": {
                "base_class_0": {
                    "value": "torch.nn.Conv2d",
                    "possible_values": []
                },
                "self.max_norm": {
                    "value": "max_norm",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "renorm_19": {
                "variable": {
                    "value": "self.weight.data",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight.data",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "self.max_norm",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Sequential_237": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F1",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.kernel_length)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, self.kernel_length // 2)",
                    "possible_values": []
                }
            },
            "BatchNorm2d_84": {
                "num_features": {
                    "value": "self.F1",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "BatchNorm2d_102": {
                "num_features": {
                    "value": "self.F1 * self.D",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Dropout_111": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_116": {
                "in_channels": {
                    "value": "self.F1 * self.D",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F1 * self.D",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 16)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.F1 * self.D",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 16 // 2)",
                    "possible_values": []
                }
            },
            "Conv2d_128": {
                "in_channels": {
                    "value": "self.F1 * self.D",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.F2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0)",
                    "possible_values": []
                }
            },
            "BatchNorm2d_140": {
                "num_features": {
                    "value": "self.F2",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Dropout_146": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_164": {
                "in_channels": {
                    "value": "self.F2",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(n_out_virtual_chans, self.final_conv_length)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LogSoftmax_171": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Conv2d_241": {
                "in_channels": {
                    "value": "self.in_chans",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters_1",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_245": {
                "num_features": {
                    "value": "n_filters_1",
                    "possible_values": [
                        [
                            "16",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Dropout_253": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_263": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_filters_2",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.second_kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.second_kernel_size[0] // 2, 0)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_274": {
                "num_features": {
                    "value": "n_filters_2",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Dropout_280": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_285": {
                "in_channels": {
                    "value": "n_filters_2",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_filters_3",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "self.third_kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "(self.third_kernel_size[0] // 2, 0)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "BatchNorm2d_296": {
                "num_features": {
                    "value": "n_filters_3",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.01",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "possible_values": []
                }
            },
            "Dropout_302": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_320": {
                "in_channels": {
                    "value": "n_filters_3",
                    "possible_values": [
                        [
                            "4",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(n_out_virtual_chans, self.final_conv_length)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LogSoftmax_327": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/models/hybrid.py": {
        "torch": {
            "HybridNetModule_29": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "Sequential_68": {
                    "variable": {
                        "value": "reduced_deep_model",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "Sequential_81": {
                    "variable": {
                        "value": "reduced_shallow_model",
                        "possible_values": []
                    },
                    "params": {
                        "value": "default",
                        "possible_values": []
                    }
                },
                "self.reduced_deep_model": {
                    "value": "reduced_deep_model",
                    "possible_values": [
                        [
                            "nn.Sequential()",
                            "Call"
                        ]
                    ]
                },
                "self.reduced_shallow_model": {
                    "value": "reduced_shallow_model",
                    "possible_values": [
                        [
                            "nn.Sequential()",
                            "Call"
                        ]
                    ]
                },
                "Conv2d_100": {
                    "variable": {
                        "value": "self.final_conv",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "100",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "n_classes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "1",
                        "possible_values": []
                    }
                }
            },
            "cat_122": {
                "variable": {
                    "value": "merged_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(deep_out, shallow_out)",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "new_conv_layer",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "module.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "60",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "module.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "module.stride",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "new_conv_layer",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "module.in_channels",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "40",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "module.kernel_size",
                    "possible_values": []
                },
                "stride": {
                    "value": "module.stride",
                    "possible_values": []
                }
            },
            "LogSoftmax_124": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ConstantPad2d_114": {
                "padding": {
                    "value": "(0, 0, -n_diff_deep_shallow, 0)",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ConstantPad2d_118": {
                "padding": {
                    "value": "(0, 0, n_diff_deep_shallow, 0)",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/models/shallow_fbcsp.py": {
        "torch": {
            "Sequential_51": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "Dropout_102": {
                "p": {
                    "value": "self.drop_prob",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "n_filters_conv",
                    "possible_values": [
                        [
                            "self.n_filters_spat",
                            "Attribute"
                        ],
                        [
                            "self.n_filters_time",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.n_classes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.final_conv_length, 1)",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "LogSoftmax_124": {
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "1",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filters_time",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.filter_time_length, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "self.n_filters_time",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filters_spat",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, self.in_chans)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.batch_norm",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "self.in_chans",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_filters_time",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(self.filter_time_length, 1)",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "not self.batch_norm",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "n_filters_conv",
                    "possible_values": [
                        [
                            "self.n_filters_spat",
                            "Attribute"
                        ],
                        [
                            "self.n_filters_time",
                            "Attribute"
                        ]
                    ]
                },
                "momentum": {
                    "value": "self.batch_norm_alpha",
                    "possible_values": []
                },
                "affine": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/torch_ext/constraints.py": {
        "torch": {
            "renorm_31": {
                "variable": {
                    "value": "last_weight.data",
                    "possible_values": []
                },
                "input": {
                    "value": "last_weight.data",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "0.5",
                    "possible_values": []
                }
            },
            "renorm_26": {
                "variable": {
                    "value": "module.weight.data",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "maxnorm": {
                    "value": "2",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/torch_ext/functions.py": {
        "torch": {
            "log_10": {
                "input": {
                    "value": "th.clamp(x, min=eps)",
                    "possible_values": []
                }
            },
            "clamp_10": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "min": {
                    "value": "eps",
                    "possible_values": [
                        [
                            "1e-06",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "braindecode/torch_ext/init.py": {
        "torch": {}
    },
    "braindecode/torch_ext/losses.py": {
        "torch": {
            "sum_70": {
                "variable": {
                    "value": "this_loss",
                    "possible_values": []
                },
                "input": {
                    "value": "mask * log_preds[:, i_class]",
                    "possible_values": []
                }
            },
            "sum_32": {
                "variable": {
                    "value": "result",
                    "possible_values": []
                },
                "input": {
                    "value": "result",
                    "possible_values": [
                        [
                            "-logpreds * targets",
                            "BinOp"
                        ],
                        [
                            "th.sum(result, dim=int(dim))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "int(dim)",
                    "possible_values": []
                }
            },
            "sum_69": {
                "input": {
                    "value": "mask",
                    "possible_values": [
                        [
                            "targets == i_class",
                            "Compare"
                        ],
                        [
                            "mask.type_as(log_preds)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_74": {
                "input": {
                    "value": "th.stack(losses)",
                    "possible_values": []
                }
            },
            "sum_78": {
                "input": {
                    "value": "p * p",
                    "possible_values": []
                }
            },
            "sum_83": {
                "input": {
                    "value": "th.abs(p)",
                    "possible_values": []
                }
            },
            "stack_74": {
                "tensors": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[th.sum(p * p) for p in model.parameters()]",
                            "ListComp"
                        ],
                        [
                            "[th.sum(th.abs(p)) for p in model.parameters()]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "abs_83": {
                "input": {
                    "value": "p",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/torch_ext/modules.py": {
        "torch": {
            "Expression_8": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.expression_fn": {
                    "value": "expression_fn",
                    "possible_values": []
                }
            },
            "AvgPool2dWithConv_46": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self.kernel_size": {
                    "value": "kernel_size",
                    "possible_values": []
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "self.dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.padding": {
                    "value": "padding",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "IntermediateOutputWrapper_109": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._to_select": {
                    "value": "to_select",
                    "possible_values": []
                }
            },
            "conv2d_97": {
                "variable": {
                    "value": "pooled",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "module(x)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self._pool_weights",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "possible_values": []
                },
                "groups": {
                    "value": "in_channels",
                    "possible_values": [
                        [
                            "x.size()[1]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "braindecode/torch_ext/optimizers.py": {
        "torch": {
            "AdamW_6": {
                "base_class_0": {
                    "value": "torch.optim.Optimizer",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/torch_ext/util.py": {
        "torch": {
            "tensor_34": {
                "variable": {
                    "value": "X_tensor",
                    "possible_values": []
                },
                "data": {
                    "value": "X",
                    "possible_values": [
                        [
                            "[X]",
                            "List"
                        ],
                        [
                            "np.asarray(X)",
                            "Call"
                        ],
                        [
                            "X.astype(dtype)",
                            "Call"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "requires_grad",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "manual_seed_61": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "manual_seed_all_63": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            }
        }
    },
    "braindecode/visualization/input_windows.py": {
        "torch": {}
    },
    "examples/bcic_iv_2a.py": {
        "torch": {
            "Adam_153": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                }
            }
        }
    },
    "examples/bcic_iv_2a_cropped.py": {
        "torch": {
            "Adam_121": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                }
            },
            "nll_loss_136": {
                "input": {
                    "value": "th.mean(preds, dim=2, keepdim=False)",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "possible_values": []
                }
            },
            "mean_137": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "test/acceptance_tests/from_notebooks/test_cropped_decoding.py": {
        "torch": {
            "Adam_67": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                }
            },
            "mean_106": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "nll_loss_107": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "net_target",
                    "possible_values": [
                        [
                            "np_to_var(batch_y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ],
                        [
                            "np_to_var(batch_y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_129": {
                "variable": {
                    "value": "outputs",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "nll_loss_130": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ],
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "th.mean(outputs, dim=2, keepdim=False)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "net_target",
                    "possible_values": [
                        [
                            "np_to_var(batch_y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ],
                        [
                            "np_to_var(batch_y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/acceptance_tests/from_notebooks/test_experiment_class.py": {
        "torch": {
            "Adam_71": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                }
            },
            "nll_loss_99": {
                "input": {
                    "value": "th.mean(preds, dim=2, keepdim=False)",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "possible_values": []
                }
            },
            "mean_100": {
                "input": {
                    "value": "preds",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "test/acceptance_tests/from_notebooks/test_trialwise_decoding.py": {
        "torch": {
            "Adam_65": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                }
            },
            "nll_loss_96": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "model(net_in)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "net_target",
                    "possible_values": [
                        [
                            "np_to_var(batch_y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ],
                        [
                            "np_to_var(dataset.y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "nll_loss_115": {
                "variable": {
                    "value": "loss",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "possible_values": [
                        [
                            "model(net_in)",
                            "Call"
                        ],
                        [
                            "model(net_in)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "net_target",
                    "possible_values": [
                        [
                            "np_to_var(batch_y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ],
                        [
                            "np_to_var(dataset.y)",
                            "Call"
                        ],
                        [
                            "net_target.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}