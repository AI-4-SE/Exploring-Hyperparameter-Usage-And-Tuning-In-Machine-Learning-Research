{
    "mseg/taxonomy/naive_taxonomy_converter.py": {
        "torch": {
            "Softmax_34": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mseg/taxonomy/taxonomy_converter.py": {
        "torch": {
            "Conv2d_355": {
                "variable": {
                    "value": "conv",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.num_uclasses",
                            "Attribute"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.dataset_classnames[dataset])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_90": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "mseg/utils/mask_utils.py": {
        "torch": {
            "zeros_267": {
                "variable": {
                    "value": "label_mapping_arr",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "arr_len",
                    "type": "Name",
                    "possible_values": [
                        [
                            "keys_max + 1",
                            "BinOp"
                        ],
                        [
                            "keys_max + 1",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "mseg/utils/mask_utils_detectron2.py": {
        "torch": {
            "unique_150": {
                "variable": {
                    "value": "(segment_ids, areas)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "panoptic_seg",
                    "type": "Name",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "return_counts": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_316": {
                "variable": {
                    "value": "self.cpu_device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_mask_utils.py": {
        "torch": {
            "from_numpy_283": {
                "variable": {
                    "value": "semantic_img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "semantic_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((3, 4), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array(range(30)).reshape(5, 6).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[255, 255, 255], [255, 255, 255]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[300, 301, 302], [300, 301, 302]], dtype=np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.uint16)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_310": {
                "variable": {
                    "value": "semantic_img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "semantic_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((3, 4), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array(range(30)).reshape(5, 6).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[255, 255, 255], [255, 255, 255]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[300, 301, 302], [300, 301, 302]], dtype=np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.uint16)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_344": {
                "variable": {
                    "value": "semantic_img",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "semantic_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((3, 4), dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array(range(30)).reshape(5, 6).astype(np.int16)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.int64)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(semantic_img).type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array([[254, 0, 1], [7, 8, 9]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[255, 255, 255], [255, 255, 255]], dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.array([[300, 301, 302], [300, 301, 302]], dtype=np.uint16)",
                            "Call"
                        ],
                        [
                            "np.array(range(60000)).reshape(3000, 20).astype(np.uint16)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_357": {
                "input": {
                    "value": "label_mapping_arr_copy",
                    "type": "Name",
                    "possible_values": [
                        [
                            "label_mapping_arr.clone()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "label_mapping_arr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "form_label_mapping_array_pytorch(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array_pytorch(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array_pytorch(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array_pytorch(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array_pytorch(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array(label_mapping)",
                            "Call"
                        ],
                        [
                            "form_label_mapping_array(label_mapping)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/test_naive_taxonomy_converter.py": {
        "torch": {
            "zeros_103": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "(316, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "argmax_124": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ntc.transform_predictions_test(logits, test_dname)",
                            "Call"
                        ],
                        [
                            "output.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_46": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_70": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "tests/test_taxonomy_converter.py": {
        "torch": {
            "from_numpy_183": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.zeros((194, 2, 3))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(input)",
                            "Call"
                        ],
                        [
                            "input.unsqueeze(0).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_190": {
                "variable": {
                    "value": "prediction",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tc.transform_predictions_test(input, test_dname)",
                            "Call"
                        ],
                        [
                            "output.squeeze()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_227": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 1, 0, 1]).reshape(1, 4, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 4, 1, 1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.array([0.0, 0.3, 0.1, 0.1, 0.5])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(1, 5, 1, 1).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_230": {
                "variable": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 2, 2]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([2, 2, 4]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([0.3, 0.1, 0.6]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_260": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_263": {
                "variable": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 2, 2]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([2, 2, 4]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([0.3, 0.1, 0.6]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_297": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 1, 0, 1]).reshape(1, 4, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "torch.ones(1, 4, 1, 1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "np.array([0.0, 0.3, 0.1, 0.1, 0.5])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(x)",
                            "Call"
                        ],
                        [
                            "x.reshape(1, 5, 1, 1).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_301": {
                "variable": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 2, 2]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([2, 2, 4]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([0.3, 0.1, 0.6]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_231": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 2, 2]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([2, 2, 4]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([0.3, 0.1, 0.6]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_264": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 2, 2]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([2, 2, 4]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([0.3, 0.1, 0.6]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "allclose_302": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ],
                        [
                            "conv(x)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "y_gt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array([0, 2, 2]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([2, 2, 4]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ],
                        [
                            "np.array([0.3, 0.1, 0.6]).reshape(1, 3, 1, 1).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(y_gt)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_131": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_153": {
                "*size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    }
}