{
    "biases/datasets.py": {
        "torch": {
            "stack_104": {
                "variable": {
                    "value": "chunked_ts",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts.chunk(n_chunks, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_105": {
                "variable": {
                    "value": "chunked_zs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs.chunk(n_chunks, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_107": {
                "variable": {
                    "value": "chunk_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "n_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "traj_len // chunk_len",
                            "BinOp"
                        ],
                        [
                            "traj_len // chunk_len",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(n_trajs,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "zs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_225": {
                "variable": {
                    "value": "time",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "int(env._physics.timestep() * env._n_sub_steps * env._step_limit)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "int(env._step_limit) + 1 - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randint_312": {
                "variable": {
                    "value": "chunk_idx",
                    "type": "Name",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "high": {
                    "value": "n_chunks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "traj_len // chunk_len",
                            "BinOp"
                        ],
                        [
                            "traj_len // chunk_len",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "(batch_size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "zs.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_313": {
                "variable": {
                    "value": "chunked_ts",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ts.chunk(n_chunks, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_314": {
                "variable": {
                    "value": "chunked_zs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "zs.chunk(n_chunks, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_85": {
                "variable": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "self.body.integration_time",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step": {
                    "value": "self.body.dt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "z0s.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z0s.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_149": {
                "variable": {
                    "value": "(ts, zs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, f'trajectories_{body}_N{n_systems}_{mode}.pz')",
                            "Call"
                        ],
                        [
                            "os.path.join(root_dir, f'trajectories_N{batch_size}_T{time_limit}.pz')",
                            "Call"
                        ]
                    ]
                }
            },
            "load_39": {
                "variable": {
                    "value": "(ts, zs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, f'trajectories_{body}_N{n_systems}_{mode}.pz')",
                            "Call"
                        ],
                        [
                            "os.path.join(root_dir, f'trajectories_N{batch_size}_T{time_limit}.pz')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_93": {
                "tensors": {
                    "value": "t_batches",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_94": {
                "tensors": {
                    "value": "z_batches",
                    "type": "Name",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_153": {
                "obj": {
                    "value": "(ts, zs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, f'trajectories_{body}_N{n_systems}_{mode}.pz')",
                            "Call"
                        ],
                        [
                            "os.path.join(root_dir, f'trajectories_N{batch_size}_T{time_limit}.pz')",
                            "Call"
                        ]
                    ]
                }
            },
            "save_43": {
                "obj": {
                    "value": "(ts, zs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(root_dir, f'trajectories_{body}_N{n_systems}_{mode}.pz')",
                            "Call"
                        ],
                        [
                            "os.path.join(root_dir, f'trajectories_N{batch_size}_T{time_limit}.pz')",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_316": {
                "start": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "batch_size * bs ** i",
                            "BinOp"
                        ],
                        [
                            "100",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "biases/dynamics/hamiltonian.py": {
        "torch": {
            "cat_88": {
                "variable": {
                    "value": "JM",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[M[..., D // 2:, :], -M[..., :D // 2, :]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "solve_93": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "Phi.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "DPhiT @ J(DPhi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "solve_100": {
                "variable": {
                    "value": "(X, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "DPhiT @ M",
                    "type": "BinOp",
                    "possible_values": []
                },
                "A": {
                    "value": "DPhiT @ J(DPhi)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "dynamics",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v.reshape(bs, n * d), vdot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "enable_grad_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_35": {
                "input": {
                    "value": "dH",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.grad(H, z, create_graph=self.wgrad)[0]",
                            "Subscript"
                        ],
                        [
                            "torch.autograd.grad(H, z, create_graph=self.wgrad)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "any_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_177": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_32": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_34": {
                "outputs": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.H(t, z).sum()",
                            "Call"
                        ],
                        [
                            "self.H(t, z).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "self.wgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_74": {
                "input": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_77": {
                "outputs": {
                    "value": "H",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.H(t, z).sum()",
                            "Call"
                        ],
                        [
                            "self.H(t, z).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(z, requires_grad=True) + z",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "self.wgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_179": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, requires_grad=True) + x",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_180": {
                "outputs": {
                    "value": "self.V(x).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, requires_grad=True) + x",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "self.wgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_189": {
                "input": {
                    "value": "(GTf + violation).unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "GTMinvG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "G.permute(0, 2, 1) @ MinvG",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "biases/dynamics/lagrangian.py": {
        "torch": {
            "cat_40": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_47": {
                "variable": {
                    "value": "eye",
                    "type": "Name",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "D // 2",
                            "BinOp"
                        ]
                    ]
                },
                "device": {
                    "value": "z.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_48": {
                "variable": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grad((dL_dv * eye[i]).sum(), v, create_graph=self.wgrad)[0] for i in range(d)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_52": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "dynamics",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_107": {
                "variable": {
                    "value": "dynamics",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v, a]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_164": {
                "variable": {
                    "value": "dynamics",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v.reshape(bs, n * d), vdot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "enable_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_38": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 0]",
                            "Subscript"
                        ],
                        [
                            "z[..., :d]",
                            "Subscript"
                        ],
                        [
                            "q + torch.zeros_like(q, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., :D]",
                            "Subscript"
                        ],
                        [
                            "q + torch.zeros_like(q, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_39": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 1]",
                            "Subscript"
                        ],
                        [
                            "z[..., d:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., D:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_42": {
                "outputs": {
                    "value": "L",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.L(t, z).sum()",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([q, v], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_100": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 1]",
                            "Subscript"
                        ],
                        [
                            "z[..., d:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., D:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_101": {
                "input": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 0]",
                            "Subscript"
                        ],
                        [
                            "z[..., :d]",
                            "Subscript"
                        ],
                        [
                            "q + torch.zeros_like(q, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., :D]",
                            "Subscript"
                        ],
                        [
                            "q + torch.zeros_like(q, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_104": {
                "outputs": {
                    "value": "T - V",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inputs": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 0]",
                            "Subscript"
                        ],
                        [
                            "z[..., :d]",
                            "Subscript"
                        ],
                        [
                            "q + torch.zeros_like(q, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., :D]",
                            "Subscript"
                        ],
                        [
                            "q + torch.zeros_like(q, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_like_148": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, requires_grad=True) + x",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_149": {
                "outputs": {
                    "value": "self.V(x).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, requires_grad=True) + x",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "self.wgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "grad_45": {
                "outputs": {
                    "value": "(dL_dq * v.detach()).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 1]",
                            "Subscript"
                        ],
                        [
                            "z[..., d:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., D:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "allow_unused": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_105": {
                "outputs": {
                    "value": "(v.detach() * Fq).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 1]",
                            "Subscript"
                        ],
                        [
                            "z[..., d:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., D:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_49": {
                "outputs": {
                    "value": "(dL_dv * eye[i]).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z[..., 1]",
                            "Subscript"
                        ],
                        [
                            "z[..., d:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ],
                        [
                            "z[..., D:]",
                            "Subscript"
                        ],
                        [
                            "v + torch.zeros_like(v, requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "self.wgrad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_52": {
                "input": {
                    "value": "F",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(dL_dq + Fv).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.stack([grad((dL_dv * eye[i]).sum(), v, create_graph=self.wgrad)[0] for i in range(d)], dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "solve_161": {
                "input": {
                    "value": "total_violation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(GTf + violation).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "GTMinvG",
                    "type": "Name",
                    "possible_values": [
                        [
                            "GT @ MinvG",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "biases/dynamics/lyapunov.py": {
        "torch": {
            "cat_30": {
                "variable": {
                    "value": "xqrdot",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xdot, qdot, lrdot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_like_57": {
                "variable": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x0.reshape(x0.shape[0], -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_59": {
                "variable": {
                    "value": "lr0",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "x0.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x0.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_60": {
                "variable": {
                    "value": "Lx0",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, q0, lr0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_like_75": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(ts[i], x[None])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_like_37": {
                "input": {
                    "value": "xt[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_like_42": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.zeros_like(x, requires_grad=True) + x.detach()",
                            "BinOp"
                        ],
                        [
                            "xqr[..., :n] + torch.zeros_like(xqr[..., :n], requires_grad=True)",
                            "BinOp"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_68": {
                "outputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(ts[i], x[None])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "grad_78": {
                "outputs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F(ts[i], x[None])[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "[u]",
                    "type": "List",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_79": {
                "outputs": {
                    "value": "Ju",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.autograd.grad(y, [x], [u], create_graph=True)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[u]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_outputs": {
                    "value": "[v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_23": {
                "input": {
                    "value": "xqr[..., :n]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "biases/dynamics_trainer.py": {
        "torch": {
            "cat_75": {
                "variable": {
                    "value": "rel_errs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "rel_errs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(rel_errs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_76": {
                "variable": {
                    "value": "pert_rel_errs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "pert_rel_errs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(pert_rel_errs, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_54": {
                "start": {
                    "value": "10 * body.integration_time // body.dt",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_like_64": {
                "input": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "body.body2globalCoords(z0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "biases/models/constrained_hnn.py": {
        "torch": {
            "ParameterDict_39": {
                "variable": {
                    "value": "self.d_moments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{str(d): torch.nn.Parameter(0.1 * torch.randn(len(d_objs) // (d + 1), d + 1)) for (d, d_objs) in G.d2ids.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "exp_51": {
                "variable": {
                    "value": "inv_moments",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.d_moments[str(d)]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_54": {
                "variable": {
                    "value": "padded_inertias_inv",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[0 * inv_masses, inv_moments[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_66": {
                "variable": {
                    "value": "moments",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.d_moments[str(d)]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "DPhi",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[DPhi[:, :1], self.Minv(DPhi[:, 1].reshape(bs, n, -1)).reshape(DPhi[:, 1:].shape)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_144": {
                "variable": {
                    "value": "xp0",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0, p0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_144": {
                "variable": {
                    "value": "xp0",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.size(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_151": {
                "variable": {
                    "value": "xvt",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xt, vt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-3",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.potential_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[FCtanh(chs[i], chs[i + 1], zero_bias=False, orthogonal_init=True) for i in range(num_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_75": {
                "tensors": {
                    "value": "[p0, pi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_75": {
                "input": {
                    "value": "*v.shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_40": {
                "data": {
                    "value": "0.1 * torch.randn(len(d_objs) // (d + 1), d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "len(d_objs) // (d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "biases/models/constrained_lnn.py": {
        "torch": {
            "ParameterDict_35": {
                "variable": {
                    "value": "self.d_moments",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "{str(d): torch.nn.Parameter(0.1 * torch.randn(len(d_objs) // (d + 1), d + 1)) for (d, d_objs) in G.d2ids.items()}",
                    "type": "DictComp",
                    "possible_values": []
                }
            },
            "exp_48": {
                "variable": {
                    "value": "inv_moments",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.d_moments[str(d)]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_50": {
                "variable": {
                    "value": "padded_inertias_inv",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[0 * inv_masses, inv_moments[:, 1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.potential_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*[FCtanh(chs[i], chs[i + 1], zero_bias=False, orthogonal_init=True) for i in range(num_layers)]",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_36": {
                "data": {
                    "value": "0.1 * torch.randn(len(d_objs) // (d + 1), d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_36": {
                "*size": {
                    "value": "len(d_objs) // (d + 1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "biases/models/hnn.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.potential_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "CosSin(self.q_ndim, angular_dims, only_q=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.mass_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "CosSin(self.q_ndim, angular_dims, only_q=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "triu_77": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "mass_net_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mass_net(q)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_159": {
                "variable": {
                    "value": "qp0",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q0, p0]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_115": {
                "variable": {
                    "value": "M_times_qdot",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_169": {
                "variable": {
                    "value": "qvt",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[qt, vt]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "diag_embed_79": {
                "input": {
                    "value": "torch.nn.functional.softplus(torch.diagonal(mass_net_q, dim1=-2, dim2=-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_97": {
                "n": {
                    "value": "lower_triangular.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "q.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "q.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_80": {
                "input": {
                    "value": "torch.diagonal(mass_net_q, dim1=-2, dim2=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_114": {
                "n": {
                    "value": "lower_triangular.size(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "qdot.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "qdot.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diagonal_80": {
                "input": {
                    "value": "mass_net_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.mass_net(q)",
                            "Call"
                        ]
                    ]
                },
                "dim1": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dim2": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "solve_115": {
                "input": {
                    "value": "qdot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "qdot.unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "lower_triangular @ lower_triangular.transpose(-2, -1) + diag_noise",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "biases/models/lnn.py": {
        "torch": {
            "Sequential_33": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "CosSin(self.q_ndim, angular_dims, only_q=False)",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "biases/models/nn.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "CosSin(self.q_ndim, angular_dims, only_q=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_91": {
                "tensors": {
                    "value": "zts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[z0.reshape(bs, -1)]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "input": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ],
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "len(ts)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "biases/models/utils.py": {
        "torch": {
            "Linear_23": {
                "variable": {
                    "value": "linear",
                    "type": "Name",
                    "possible_values": []
                },
                "in_features": {
                    "value": "chin",
                    "type": "Name",
                    "possible_values": []
                },
                "out_features": {
                    "value": "chout",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "arange_71": {
                "variable": {
                    "value": "coords",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "square_mat.size(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_11": {
                "*args": {
                    "value": "Linear(chin, chout, zero_bias, orthogonal_init)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "*args": {
                    "value": "Linear(chin, chout, zero_bias, orthogonal_init)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "Linear(chin, chout, zero_bias, orthogonal_init)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_59": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cos_ang_q, sin_ang_q, q_not_angular]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_84": {
                "tensors": {
                    "value": "[q_modded_dims, q_non_modded_dims]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tanh_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softplus_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "q_or_other",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, other]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "fmod_80": {
                "input": {
                    "value": "q[..., angular_dims] + math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "2 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_58": {
                "input": {
                    "value": "q_angular",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q[..., self.angular_dims]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sin_58": {
                "input": {
                    "value": "q_angular",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q[..., self.angular_dims]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "biases/systems/chain_pendulum.py": {
        "torch": {
            "zeros_33": {
                "variable": {
                    "value": "pvs",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles_omega.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles_omega.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "angles_omega.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_34": {
                "variable": {
                    "value": "global_position_velocity",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles_omega.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles_omega.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles_omega.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "variable": {
                    "value": "position_vel",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "angle_omega.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angle_omega.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angle_omega.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "atan2_55": {
                "variable": {
                    "value": "angle",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "-y",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "where_56": {
                "variable": {
                    "value": "omega",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "angle < 0.01",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "vx / -y",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "vy / x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "variable": {
                    "value": "angle_unwrapped",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.unwrap(angle.numpy(), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_65": {
                "variable": {
                    "value": "angles_omega",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*bsT2",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "global_pos_vel.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "global_pos_vel.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "variable": {
                    "value": "start_position_velocity",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*bsT2",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ],
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                },
                "device": {
                    "value": "angles_omega.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles_omega.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_81": {
                "variable": {
                    "value": "angles_and_angvel",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles_omega.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_109": {
                "variable": {
                    "value": "beam_moments",
                    "type": "Name",
                    "possible_values": []
                },
                "data": {
                    "value": "[m * l * l / 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_60": {
                "tensors": {
                    "value": "[angle_unwrapped, omega]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_84": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles_omega.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_112": {
                "data": {
                    "value": "[l / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_85": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": [
                        [
                            "angles_omega.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_115": {
                "data": {
                    "value": "[l / 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_117": {
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "biases/systems/coupled_pendulum.py": {
        "torch": {
            "tensor_22": {
                "variable": {
                    "value": "self.ks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "(bobs - 1) * [k]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "variable": {
                    "value": "self.locs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "bobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_24": {
                "start": {
                    "value": "bobs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_33": {
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 * n",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "biases/systems/gyroscope.py": {
        "torch": {
            "zeros_like_52": {
                "variable": {
                    "value": "coms",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "eulers",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(torch.rand(N, 2, 3) - 0.5) * 3",
                            "BinOp"
                        ],
                        [
                            "bodyX2comEuler(bodyX)[..., 3:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_53": {
                "variable": {
                    "value": "comEulers",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[coms, eulers]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_58": {
                "variable": {
                    "value": "ct",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - body_attachment.sum()[None], body_attachment]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_65": {
                "variable": {
                    "value": "eulers[:, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.unwrap(eulers[:, 0, :].numpy(), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_26": {
                "ndarray": {
                    "value": "verts[tris]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_27": {
                "input": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "[0.0, 0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_43": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "diag_30": {
                "input": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "sum_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eye_27": {
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randint_47": {
                "low": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "size": {
                    "value": "(N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "biases/systems/magnet_pendulum.py": {
        "torch": {
            "stack_26": {
                "variable": {
                    "value": "self.magnet_positions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[0.1 * theta.cos(), 0.1 * theta.sin(), -1.05 * l * torch.ones_like(theta)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "angles_omega",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan2_55": {
                "variable": {
                    "value": "phi",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "other": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "atan2_58": {
                "variable": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "rz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x ** 2 + y ** 2).sqrt()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stack_61": {
                "variable": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phi, theta]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.unwrap(angles.numpy(), axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_63": {
                "variable": {
                    "value": "anglesd",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[phid, thetad]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_64": {
                "variable": {
                    "value": "angles_omega",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[angles, anglesd]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_72": {
                "variable": {
                    "value": "euler_angles",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n * bs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "angles_omega.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "angles_omega.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_25": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "magnets + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_30": {
                "tensors": {
                    "value": "[0 * theta, 0 * theta, torch.ones_like(theta)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_42": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_39": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "randn_41": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_like_27": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, magnets + 1)[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.atan2(rz, z)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.linspace(0, 2 * np.pi, magnets + 1)[:-1]",
                            "Subscript"
                        ],
                        [
                            "torch.atan2(rz, z)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "biases/systems/rigid_body.py": {
        "torch": {
            "zeros_205": {
                "variable": {
                    "value": "DPhi",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "p2ps + tethers",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "DPhi",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "num_constraints",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(edge_joints) + len(node_joints) + len(disabled_axes)",
                            "BinOp"
                        ],
                        [
                            "len(edge_joints) + len(node_joints) + len(disabled_axes)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_241": {
                "variable": {
                    "value": "delta[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_302": {
                "variable": {
                    "value": "DPhi",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[constraint(rigid_body_graph, x, v) for constraint in constraints]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_345": {
                "variable": {
                    "value": "Phi",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_372": {
                "variable": {
                    "value": "Phi",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_373": {
                "variable": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ],
                        [
                            "len(self.body_graph.nodes)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_170": {
                "variable": {
                    "value": "xp",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z0[:, 0], M @ z0[:, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "xp",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "z0.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_176": {
                "variable": {
                    "value": "xvs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[xps[:, :, 0], Minv @ xps[:, :, 1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_246": {
                "variable": {
                    "value": "c1t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - c1.sum()[None], c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "c2t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - c2.sum()[None], c2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_275": {
                "variable": {
                    "value": "c1t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - c1.sum()[None], c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_337": {
                "tensors": {
                    "value": "[constraint(G, x, v) for constraint in constraints]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_377": {
                "variable": {
                    "value": "c1t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - c1.sum()[None], c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_378": {
                "variable": {
                    "value": "c2t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - c2.sum()[None], c2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_394": {
                "variable": {
                    "value": "c1t",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[1 - c1.sum()[None], c1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_240": {
                "*size": {
                    "value": "d + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_258": {
                "variable": {
                    "value": "uit",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-ui.sum()[None], ui]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "ujt",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-uj.sum()[None], uj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_312": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_386": {
                "variable": {
                    "value": "uit",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-ui.sum()[None], ui]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_387": {
                "variable": {
                    "value": "ujt",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[-uj.sum()[None], uj]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "solve_322": {
                "input": {
                    "value": "-Phi.reshape(bs, -1, 1)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "A": {
                    "value": "J @ J.permute(0, 2, 1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "biases/systems/rotor.py": {
        "torch": {
            "diag_30": {
                "variable": {
                    "value": "moments",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "covar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "variable": {
                    "value": "unwrapped_angles",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.unwrap(comEuler[:, 0, 3:], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_25": {
                "ndarray": {
                    "value": "verts[tris]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_35": {
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "6",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "biases/systems/satellite.py": {
        "torch": {
            "randn_29": {
                "variable": {
                    "value": "bodyX",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.n",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.d",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_19": {
                "data": {
                    "value": "[0.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_22": {
                "data": {
                    "value": "[0.0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_20": {
                "data": {
                    "value": "[0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_23": {
                "data": {
                    "value": "[0, 0, 1.0]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "biases/train.py": {
        "torch": {
            "device_20": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AdamW_41": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0.003",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "DataLoader_37": {
                "dataset": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, splits[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "biases/utils.py": {
        "torch": {
            "zeros_31": {
                "variable": {
                    "value": "K",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*k.shape[:-1]",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "k.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "k.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "*K.shape[:-1]",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "K.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "K.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_56": {
                "variable": {
                    "value": "M",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "bs",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "euler.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "euler.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "R",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "Rotation.from_euler('ZXZ', euler.data.cpu().numpy()).as_matrix()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "angles",
                    "type": "Name",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.ascontiguousarray(Rotation.from_matrix(R.data.cpu().numpy()).as_euler('ZXZ'))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_88": {
                "variable": {
                    "value": "eulerdot",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_rng_state_18": {
                "variable": {
                    "value": "self.pt_rng_state",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_78": {
                "tensors": {
                    "value": "[R, Rdot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "permute_78": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_89": {
                "tensors": {
                    "value": "[angles, eulerdot]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_99": {
                "tensors": {
                    "value": "[xcom, euler]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_109": {
                "tensors": {
                    "value": "[xcom[:, :, None, :], shifted_frame]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "manual_seed_19": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_rng_state_23": {
                "new_state": {
                    "value": "self.pt_rng_state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "solve_88": {
                "input": {
                    "value": "omega.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "eulerdot2omega(angles)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "pl_trainer.py": {
        "torch": {
            "stack_39": {
                "variable": {
                    "value": "res",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[log[field] for log in outputs]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "arange_262": {
                "variable": {
                    "value": "ts",
                    "type": "Name",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "integration_time",
                    "type": "Name",
                    "possible_values": []
                },
                "step": {
                    "value": "dt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "device": {
                    "value": "z0.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "z0.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "z0_",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z0, z0_perturbed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_312": {
                "variable": {
                    "value": "zs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[q, p]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_tensor_318": {
                "obj": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.detach().cpu().numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_331": {
                "variable": {
                    "value": "scheduler",
                    "type": "Name",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "getattr(torch.optim, self.hparams.optimizer_class)(self.parameters(), lr=self.hparams.lr, weight_decay=self.hparams.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "T_max": {
                    "value": "self.hparams.n_epochs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_337": {
                "dataset": {
                    "value": "self.datasets['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_sizes['train']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_346": {
                "dataset": {
                    "value": "self.datasets['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_sizes['val']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_355": {
                "dataset": {
                    "value": "self.datasets['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_sizes['test']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "torch.cuda.is_available()",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_565": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_like_273": {
                "input": {
                    "value": "z0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "body.body2globalCoords(z0)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_340": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_349": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_358": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_466": {
                "obj": {
                    "value": "trainer.callback_metrics['test_log']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "f": {
                    "value": "save_dir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(trainer.logger.experiment.dir, 'test_log.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "trainer.py": {
        "torch": {
            "device_41": {
                "type": {
                    "value": "cuda",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_207": {
                "obj": {
                    "value": "trainer.model.to('cpu').state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "args.exp_dir + '/model.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Adam_74": {
                "params": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "DataLoader_64": {
                "dataset": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "min(bs, splits[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "k == 'train'",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    }
}