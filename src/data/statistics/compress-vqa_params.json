{
    "vqa_drau/models/cbp.py": {
        "torch": {
            "addcmul_118": {
                "variable": {
                    "value": "Z_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_re * Y_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_119": {
                "variable": {
                    "value": "Z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X_re * Y_im",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_re",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_123": {
                "variable": {
                    "value": "grad_X_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_re * Y_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_124": {
                "variable": {
                    "value": "grad_X_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_im * Y_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "Y_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_125": {
                "variable": {
                    "value": "grad_Y_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_re * X_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "addcmul_126": {
                "variable": {
                    "value": "grad_Y_im",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_Z_im * X_re",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_Z_re",
                    "type": "Variable",
                    "possible_values": []
                },
                "value": {
                    "value": "X_im",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rfft_153": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CountSketchFn_forward(h1, s1, output_size, x, force_cpu_scatter_add)",
                            "Call"
                        ],
                        [
                            "CountSketchFn_forward(h1, s1, ctx.output_size, x, ctx.force_cpu_scatter_add)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rfft_158": {
                "variable": {
                    "value": "fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "py",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CountSketchFn_forward(h2, s2, output_size, y, force_cpu_scatter_add)",
                            "Call"
                        ],
                        [
                            "CountSketchFn_forward(h2, s2, ctx.output_size, y, ctx.force_cpu_scatter_add)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "irfft_172": {
                "variable": {
                    "value": "re",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((re_prod, im_prod), re_prod.dim())",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "(output_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rfft_187": {
                "variable": {
                    "value": "grad_prod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_output.contiguous()",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rfft_195": {
                "variable": {
                    "value": "fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "py",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CountSketchFn_forward(h2, s2, output_size, y, force_cpu_scatter_add)",
                            "Call"
                        ],
                        [
                            "CountSketchFn_forward(h2, s2, ctx.output_size, y, ctx.force_cpu_scatter_add)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "addcmul_200": {
                "variable": {
                    "value": "grad_re_fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_re_prod * re_fy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_im_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_prod.select(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "im_fy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fy.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "fy.select(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_201": {
                "variable": {
                    "value": "grad_im_fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im_prod * re_fy",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_re_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_prod.select(-1, 0)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "im_fy",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fy.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "fy.select(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "irfft_202": {
                "variable": {
                    "value": "grad_fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((grad_re_fx, grad_im_fx), grad_re_fx.dim())",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "(ctx.output_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rfft_209": {
                "variable": {
                    "value": "fx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "px",
                    "type": "Call",
                    "possible_values": [
                        [
                            "CountSketchFn_forward(h1, s1, output_size, x, force_cpu_scatter_add)",
                            "Call"
                        ],
                        [
                            "CountSketchFn_forward(h1, s1, ctx.output_size, x, ctx.force_cpu_scatter_add)",
                            "Call"
                        ]
                    ]
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "addcmul_214": {
                "variable": {
                    "value": "grad_re_fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_re_prod * re_fx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_im_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_prod.select(-1, 1)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "im_fx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fx.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "fx.select(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "addcmul_215": {
                "variable": {
                    "value": "grad_im_fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_im_prod * re_fx",
                    "type": "BinOp",
                    "possible_values": []
                },
                "tensor1": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "tensor2": {
                    "value": "grad_re_prod",
                    "type": "Name",
                    "possible_values": [
                        [
                            "grad_prod.select(-1, 0)",
                            "Call"
                        ]
                    ]
                },
                "value": {
                    "value": "im_fx",
                    "type": "Call",
                    "possible_values": [
                        [
                            "fx.select(-1, 1)",
                            "Call"
                        ],
                        [
                            "fx.select(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "irfft_216": {
                "variable": {
                    "value": "grad_fy",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack((grad_re_fy, grad_im_fy), grad_re_fy.dim())",
                    "type": "Call",
                    "possible_values": []
                },
                "n": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "signal_sizes": {
                    "value": "(ctx.output_size,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_172": {
                "tensors": {
                    "value": "(re_prod, im_prod)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "re_prod.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_202": {
                "tensors": {
                    "value": "(grad_re_fx, grad_im_fx)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "grad_re_fx.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_216": {
                "tensors": {
                    "value": "(grad_re_fy, grad_im_fy)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "grad_re_fy.dim()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "vqa_drau/models/drau_glove.py": {
        "torch": {
            "Dropout_43": {
                "variable": {
                    "value": "self.Dropout_LSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.LSTM_DROPOUT_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_44": {
                "variable": {
                    "value": "self.Dropout_Fusion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "opt.FUSION_DROPOUT_RATIO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Softmax_45": {
                "variable": {
                    "value": "self.Att_Softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Embedding_48": {
                "variable": {
                    "value": "self.Embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.QUESTION_VOCAB_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "300",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Tanh_49": {
                "variable": {
                    "value": "self.Tanh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_51": {
                "variable": {
                    "value": "self.Q_LSTM1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "300 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.LSTM_CHANNEL_NUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_53": {
                "variable": {
                    "value": "self.Q_LSTM2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.LSTM_CHANNEL_NUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.LSTM_CHANNEL_NUM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_62": {
                "variable": {
                    "value": "self.QAtt_LSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.JOINT_EMBEDDING_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.JOINT_EMBEDDING_SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LSTM_63": {
                "variable": {
                    "value": "self.IAtt_LSTM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "self.JOINT_EMBEDDING_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "self.JOINT_EMBEDDING_SIZE * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.Linear_Classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.FUSION_OUT_DIM",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.NUM_OUTPUT_UNITS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_85": {
                "variable": {
                    "value": "q",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "question",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_89": {
                "variable": {
                    "value": "q_emb",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_emb, glove)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_96": {
                "variable": {
                    "value": "q_lstm",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(q_lstm1, q_lstm2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "rvau_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_i_proj, conv_q_i_proj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_116": {
                "variable": {
                    "value": "rtau_input",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(conv_q_proj, conv_i_q_proj)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "iatt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "iatts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_167": {
                "variable": {
                    "value": "qatt",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "qatts",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mul_179": {
                "variable": {
                    "value": "mcb_signedsqrt",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sign(mcb_out)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.sqrt(torch.abs(mcb_out) + eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "normalize_180": {
                "variable": {
                    "value": "mcb_l2norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mcb_signedsqrt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mul(torch.sign(mcb_out), torch.sqrt(torch.abs(mcb_out) + eps))",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_197": {
                "variable": {
                    "value": "prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.Linear_Classifier(mcb_out)",
                            "Call"
                        ],
                        [
                            "F.log_softmax(prediction, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "conv_prelu_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "variable": {
                    "value": "linear_prelu_block",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_179": {
                "input": {
                    "value": "mcb_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mcb(rvau_out, rtau_out)",
                            "Call"
                        ],
                        [
                            "self._forward_fusion(rvau_out, rtau_out)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_179": {
                "input": {
                    "value": "torch.abs(mcb_out) + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "in_channels": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "PReLU_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "inp",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "PReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_179": {
                "input": {
                    "value": "mcb_out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.mcb(rvau_out, rtau_out)",
                            "Call"
                        ],
                        [
                            "self._forward_fusion(rvau_out, rtau_out)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "vqa_drau/train_drau_glove.py": {
        "torch": {
            "DataLoader_178": {
                "variable": {
                    "value": "train_Loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_Data",
                    "type": "Name",
                    "possible_values": [
                        [
                            "data_provider.VQADataset(opt.TRAIN_DATA_SPLITS, opt.BATCH_SIZE, folder, opt)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_197": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "opt.INIT_LERARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "KLDivLoss_100": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_183": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "opt.RESUME_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_137": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'./data/drau_glove_iter_' + str(iter_idx) + '.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "vqa_drau/utils/data_provider.py": {
        "torch": {}
    },
    "vqa_drau/utils/eval_utils.py": {
        "torch": {
            "NLLLoss_25": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_38": {
                "variable": {
                    "value": "word_length",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "word_length",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.sum(word_length, axis=1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(word_length).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_40": {
                "ndarray": {
                    "value": "t_answer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_37": {
                "ndarray": {
                    "value": "t_word",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_39": {
                "ndarray": {
                    "value": "t_img_feature",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_41": {
                "ndarray": {
                    "value": "t_glove_matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    }
}