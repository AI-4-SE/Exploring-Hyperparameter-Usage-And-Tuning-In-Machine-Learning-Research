{
    "nmjmc/nn/loss.py": {
        "tensorflow": {
            "where_13": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "x < b",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x < b, x, b * tf.ones(tf.shape(x)))",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "b * tf.ones(tf.shape(x))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_17": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.is_finite(y)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a + tf.where(x < a, x - a, tf.math.log(x - a + 1))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(y), y, b * tf.ones(tf.shape(y)))",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "b * tf.ones(tf.shape(y))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_34": {
                "variable": {
                    "value": "red_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y - y_true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "red_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "j_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_39": {
                "variable": {
                    "value": "dF",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(-dE + red_jacobian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_53": {
                "variable": {
                    "value": "red_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "j_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "red_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum((y - y_true) ** 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_108": {
                "variable": {
                    "value": "red_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum((y - y_true) ** 2, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_111": {
                "variable": {
                    "value": "red_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "j_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_113": {
                "variable": {
                    "value": "dF",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(dE + red_jacobian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_136": {
                "variable": {
                    "value": "red_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y - y_true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_137": {
                "variable": {
                    "value": "dE",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "energy_function(y) - energy_function(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_139": {
                "variable": {
                    "value": "red_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(j_x, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_150": {
                "variable": {
                    "value": "red_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(y - y_true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "red_jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "j_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_155": {
                "variable": {
                    "value": "dF",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(dE + red_jacobian)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_15": {
                "condition": {
                    "value": "x < a",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x - a",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.math.log(x - a + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_finite_17": {
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a + tf.where(x < a, x - a, tf.math.log(x - a + 1))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(y), y, b * tf.ones(tf.shape(y)))",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_41": {
                "input_tensor": {
                    "value": "factor_distance * red_diff + factor_acceptance * dF",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_62": {
                "input_tensor": {
                    "value": "dF",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.abs(-dE + red_jacobian))",
                            "Call"
                        ],
                        [
                            "factor_bias * tf.abs(dE_bias) + (dE - factor_temperature * red_jacobian) ** 2",
                            "BinOp"
                        ],
                        [
                            "linlogcut(dF, self.high_energy, self.max_energy)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.abs(dE + red_jacobian))",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.abs(dE + red_jacobian))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_141": {
                "input_tensor": {
                    "value": "factor_supervision * red_diff + factor_entropy * red_jacobian + dE",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_157": {
                "input_tensor": {
                    "value": "factor_supervision * red_diff + dF",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_13": {
                "shape": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_15": {
                "x": {
                    "value": "x - a + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_17": {
                "shape": {
                    "value": "tf.shape(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_39": {
                "x": {
                    "value": "-dE + red_jacobian",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "input_tensor": {
                    "value": "(y - y_true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_mean_96": {
                "input_tensor": {
                    "value": "energy_function(y) - energy_function(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_98": {
                "input_tensor": {
                    "value": "tf.reduce_sum(j_x, axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_108": {
                "input_tensor": {
                    "value": "(y - y_true) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_113": {
                "x": {
                    "value": "dE + red_jacobian",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_139": {
                "input_tensor": {
                    "value": "j_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "abs_155": {
                "x": {
                    "value": "dE + red_jacobian",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_13": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(x < b, x, b * tf.ones(tf.shape(x)))",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_17": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "a + tf.where(x < a, x - a, tf.math.log(x - a + 1))",
                            "BinOp"
                        ],
                        [
                            "tf.where(tf.math.is_finite(y), y, b * tf.ones(tf.shape(y)))",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_56": {
                "x": {
                    "value": "dE_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_function(y) - bias_function(x)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_98": {
                "input_tensor": {
                    "value": "j_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ],
                        [
                            "self.nn.split_output(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nmjmc/nn/neuralMJMC.py": {
        "tensorflow": {
            "reshape_164": {
                "variable": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "j",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0x1[:, self.dim:]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(j, [-1, self.N])",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "j",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_165": {
                "variable": {
                    "value": "x0_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0x1[:, 0:int(self.dim / 2)]",
                            "Subscript"
                        ],
                        [
                            "Lambda(self.split_x0)(x)",
                            "Call"
                        ],
                        [
                            "self.add_forward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, Add()(j_intermediate), outputs)",
                            "Call"
                        ],
                        [
                            "Lambda(self.split_x0)(x)",
                            "Call"
                        ],
                        [
                            "self.add_backward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, Add()(j_intermediate), outputs)",
                            "Call"
                        ],
                        [
                            "y0",
                            "variable"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_166": {
                "variable": {
                    "value": "x1_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x0x1[:, int(self.dim / 2):self.dim]",
                            "Subscript"
                        ],
                        [
                            "Lambda(self.split_x1)(x)",
                            "Call"
                        ],
                        [
                            "self.add_forward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, Add()(j_intermediate), outputs)",
                            "Call"
                        ],
                        [
                            "Lambda(self.split_x1)(x)",
                            "Call"
                        ],
                        [
                            "self.add_backward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, Add()(j_intermediate), outputs)",
                            "Call"
                        ],
                        [
                            "Subtract([y1, t0])",
                            "Call"
                        ],
                        [
                            "Multiply()([x1, s0_exp])",
                            "Call"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_167": {
                "variable": {
                    "value": "concat_x0x1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x0_exp, x1_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "variable": {
                    "value": "concat_x0x1",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "concat_x0x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x0_exp, x1_exp], 2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(concat_x0x1, [-1, self.dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_169": {
                "values": {
                    "value": "[concat_x0x1, j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nmjmc/nn/revbase.py": {
        "tensorflow": {
            "expand_dims_216": {
                "variable": {
                    "value": "x0_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(self.split_x0)(x)",
                            "Call"
                        ],
                        [
                            "self.add_forward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, outputs)",
                            "Call"
                        ],
                        [
                            "Lambda(self.split_x0)(x)",
                            "Call"
                        ],
                        [
                            "self.add_backward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, outputs)",
                            "Call"
                        ],
                        [
                            "x0x1[:, 0:int(self.dim / 2)]",
                            "Subscript"
                        ],
                        [
                            "np.concatenate([x0 for i in range(ncopies)])",
                            "Call"
                        ],
                        [
                            "np.copy(training_set[-1, :, :])",
                            "Call"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ],
                        [
                            "x0",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_217": {
                "variable": {
                    "value": "x1_exp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Lambda(self.split_x1)(x)",
                            "Call"
                        ],
                        [
                            "self.add_forward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, outputs)",
                            "Call"
                        ],
                        [
                            "Lambda(self.split_x1)(x)",
                            "Call"
                        ],
                        [
                            "self.add_backward(x0, x1, block)",
                            "Call"
                        ],
                        [
                            "self.add_intermediate_output(x0, x1, outputs)",
                            "Call"
                        ],
                        [
                            "x0x1[:, int(self.dim / 2):self.dim]",
                            "Subscript"
                        ],
                        [
                            "x1",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_218": {
                "variable": {
                    "value": "concat_x0x1",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[x0_exp, x1_exp]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_112": {
                "condition": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.split_cond(x, dimer_split)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_f_b[:, self.dim:self.dim + size]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_f_b[:, self.dim + size:self.dim + 2 * size]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reshape_219": {
                "tensor": {
                    "value": "concat_x0x1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([x0_exp, x1_exp], 2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_115": {
                "x": {
                    "value": "x[:, 0] - x[:, 2]",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmjmc/nn/train.py": {
        "tensorflow": {}
    },
    "nmjmc/systems/gaussian_2d.py": {
        "tensorflow": {
            "reshape_55": {
                "variable": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "variable": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_57": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-self.prefactor * tf.exp(-(xcomp - self.minima_x) ** 2 * self.inv_sigmas_x - (ycomp - self.minima_y) ** 2 * self.inv_sigmas_y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_156": {
                "variable": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_158": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-self.prefactor * tf.exp(-(xcomp - self.minima_x) ** 2 * self.inv_sigmas_x - (ycomp - self.minima_y) ** 2 * self.inv_sigmas_y)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "tensor": {
                    "value": "E_well_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scalefactor_doublewell_y * ycomp ** 2",
                            "BinOp"
                        ],
                        [
                            "self.scalefactor_doublewell_y * ycomp ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_59": {
                "x": {
                    "value": "-(xcomp - self.minima_x) ** 2 * self.inv_sigmas_x - (ycomp - self.minima_y) ** 2 * self.inv_sigmas_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "tensor": {
                    "value": "E_doublewell_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scalefactor_doublewell_x * (-self.a * d2 + self.b * d4)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_160": {
                "x": {
                    "value": "-(xcomp - self.minima_x) ** 2 * self.inv_sigmas_x - (ycomp - self.minima_y) ** 2 * self.inv_sigmas_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmjmc/systems/non_attractive_particles.py": {
        "tensorflow": {
            "tile_254": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_255": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_259": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_281": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_282": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_287": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "where_295": {
                "variable": {
                    "value": "D2rel",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "D2 > coeff * 0.1 ** cut_exp",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.params['rm'] ** 2 / D2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "10 ** cut_exp / coeff + coeff * 10 ** (slope_exp - cut_exp) - 10 ** slope_exp * D2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_348": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(x[:, 0] - x[:, 2]) ** 2 + (x[:, 1] - x[:, 3]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_407": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.params['grid_k'] * (self.params['rm'] ** 2 * d2) ** 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_226": {
                "x": {
                    "value": "(x[:, 2] - x[:, 0]) ** 2 + (x[:, 3] - x[:, 1]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_383": {
                "input_tensor": {
                    "value": "(tf.sign(d_left) + 1) * self.params['box_k'] * d_left ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_387": {
                "input_tensor": {
                    "value": "(tf.sign(d_right) + 1) * self.params['box_k'] * d_right ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_391": {
                "input_tensor": {
                    "value": "(tf.sign(d_down) + 1) * self.params['box_k'] * d_down ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_395": {
                "input_tensor": {
                    "value": "(tf.sign(d_up) + 1) * self.params['box_k'] * d_up ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_252": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[2:]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_253": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_254": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_255": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_256": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_257": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_259": {
                "input": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_268": {
                "input_tensor": {
                    "value": "D2rel ** 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_273": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "X[2:]",
                            "Subscript"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_279": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_281": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_282": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_284": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_287": {
                "input": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_307": {
                "input_tensor": {
                    "value": "D2rel ** 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sign_384": {
                "x": {
                    "value": "d_left",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(xcomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ],
                        [
                            "-(xcomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sign_388": {
                "x": {
                    "value": "d_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xcomp - self.params['box_halfsize']",
                            "BinOp"
                        ],
                        [
                            "xcomp - self.params['box_halfsize']",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sign_392": {
                "x": {
                    "value": "d_down",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(ycomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ],
                        [
                            "-(ycomp + self.params['box_halfsize'])",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sign_396": {
                "x": {
                    "value": "d_up",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ycomp - self.params['box_halfsize']",
                            "BinOp"
                        ],
                        [
                            "ycomp - self.params['box_halfsize']",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nmjmc/systems/particles.py": {
        "tensorflow": {
            "to_float_82": {
                "variable": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x[:, 0::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_float_83": {
                "variable": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x[:, 1::2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tile_86": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_87": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_92": {
                "variable": {
                    "value": "compare_solv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "r > D",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tile_181": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_182": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_186": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_188": {
                "variable": {
                    "value": "distance_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2 < self.rm ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_189": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(self.mask_matrix, 0), (batchsize, 1, 1))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(self.mask_matrix, 0), (batchsize, 1, 1))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(self.mask_matrix, 0), (batchsize, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(self.mask_matrix, 0), [batchsize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.cast(mmatrix, dtype)",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(self.mask_matrix, 0), [batchsize, 1, 1])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(self.mask_matrix, 0), (batchsize, 1, 1))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(self.mask_matrix, 0), (batchsize, 1, 1))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mask_matrix, 0), [batchsize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mask_matrix, 0), [batchsize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(mask_matrix_solvent, 0), [batchsize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(self.mask_matrix, 0), [batchsize, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(self.mask_matrix, 0), [batchsize, 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tile_214": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_215": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_219": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_301": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_302": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_307": {
                "variable": {
                    "value": "distance_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2 > self.rc ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_308": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tile_309": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_328": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_329": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_334": {
                "variable": {
                    "value": "distance_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2 > self.rc ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_335": {
                "variable": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tile_336": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_364": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_365": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_373": {
                "variable": {
                    "value": "compare_solv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2_solv < int_length_solv",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "tile_375": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(mask_matrix_solvent, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_378": {
                "variable": {
                    "value": "E_solv",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(int_length_solv - D2_solv) ** exp * compare_solv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sqrt_394": {
                "variable": {
                    "value": "D2_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Dx_dim1 ** 2 + Dy_dim1 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_395": {
                "variable": {
                    "value": "D2_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "Dx_dim2 ** 2 + Dy_dim2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_396": {
                "variable": {
                    "value": "compare_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2_dim1 < int_length_dim",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_397": {
                "variable": {
                    "value": "compare_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2_dim2 < int_length_dim",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "reduce_sum_398": {
                "variable": {
                    "value": "E_dim1",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(int_length_dim - D2_dim1) ** exp * compare_dim1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_401": {
                "variable": {
                    "value": "E_dim2",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(int_length_dim - D2_dim2) ** exp * compare_dim2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_434": {
                "variable": {
                    "value": "Rxl2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dxl2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_437": {
                "variable": {
                    "value": "Rxr2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dxr2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_440": {
                "variable": {
                    "value": "Ryl2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dyl2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_443": {
                "variable": {
                    "value": "Ryr2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dyr2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tile_456": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_457": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, self.n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_462": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_476": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_479": {
                "variable": {
                    "value": "E_morse",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "De * (1.0 - tf.exp(-a * (R - self.rm))) ** 2 - De",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_finite_483": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1000000 * E_LJ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_484": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(1000000 * E_LJ)",
                            "Call"
                        ],
                        [
                            "tf.is_finite(1000000 * E_LJ)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "E_LJ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(self.eps * (D2rel ** 6 - 2 * D2rel ** 3), axis=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "E_LJ + self.eps * tf.reduce_sum(dyr2 ** 6 - 2 * dyr2 ** 3, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "E_morse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(De * (1.0 - tf.exp(-a * (R - self.rm))) ** 2 - De, axis=(1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_504": {
                "variable": {
                    "value": "Rxl2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dxl2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_507": {
                "variable": {
                    "value": "Rxr2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dxr2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_510": {
                "variable": {
                    "value": "Ryl2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dyl2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_513": {
                "variable": {
                    "value": "Ryr2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dyr2 + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_finite_516": {
                "variable": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "1000000 * E_LJ",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_517": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "check",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.is_finite(1000000 * E_LJ)",
                            "Call"
                        ],
                        [
                            "tf.is_finite(1000000 * E_LJ)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "E_LJ",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * tf.reduce_sum(self.eps * (D2rel ** 6 - 2 * D2rel ** 3), axis=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "E_LJ + self.eps * tf.reduce_sum(dyr2 ** 6 - 2 * dyr2 ** 3, axis=1)",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "E_exp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "E_exp + tf.reduce_sum(tf.exp(-Ryr2), axis=1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_527": {
                "variable": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(xcomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_528": {
                "variable": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(ycomp, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, 1, n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_532": {
                "variable": {
                    "value": "mmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(self.mask_matrix, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[batchsize, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_533": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2 + tf.eye(n)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sqrt_559": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(x[:, 0] - x[:, 2]) ** 2 + (x[:, 1] - x[:, 3]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_604": {
                "variable": {
                    "value": "mask_xl",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(xcomp - self.d) ** 2 < self.rm ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_609": {
                "variable": {
                    "value": "mask_xr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(xcomp + self.d) ** 2 < self.rm ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_614": {
                "variable": {
                    "value": "mask_yl",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(ycomp - self.d) ** 2 < self.rm ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "cast_619": {
                "variable": {
                    "value": "mask_yr",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(ycomp + self.d) ** 2 < self.rm ** 2",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "D2.dtype",
                            "Attribute"
                        ],
                        [
                            "x.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_446": {
                "input_tensor": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.5 * np.sum(k * (r - D) ** 2 * compare_solv * mmatrix, axis=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "0.5 * tf.reduce_sum(k * (r - D) ** 2 * compare_solv, axis=(1, 2)) - self_energy",
                            "BinOp"
                        ],
                        [
                            "0.5 * self.eps * np.sum(D2rel ** 6 - 2 * D2rel ** 3 + mmatrix * distance_mask, axis=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "0.5 * self.eps * tf.reduce_sum(D2rel ** 6 - 2 * D2rel ** 3 + mmatrix * distance_mask, axis=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "0.5 * self.eps * tf.reduce_sum(D2rel ** 6 - 2 * D2rel ** 3, axis=(1, 2))",
                            "BinOp"
                        ],
                        [
                            "E_solv + E_dim",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "E + tf.reduce_sum(tf.exp(kbox * dyr2), axis=1)",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "tf.where(check, E_LJ, E_morse)",
                            "Call"
                        ],
                        [
                            "tf.where(check, E_LJ, E_exp)",
                            "Call"
                        ],
                        [
                            "De * (1.0 - tf.exp(-a * (R - self.rm))) ** 2 - De",
                            "BinOp"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "0.0",
                            "float"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_505": {
                "input_tensor": {
                    "value": "tf.exp(-Rxl2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_508": {
                "input_tensor": {
                    "value": "tf.exp(-Rxr2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_511": {
                "input_tensor": {
                    "value": "tf.exp(-Ryl2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_514": {
                "input_tensor": {
                    "value": "tf.exp(-Ryr2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_733": {
                "input_tensor": {
                    "value": "tf.exp(kbox * dxl2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_735": {
                "input_tensor": {
                    "value": "tf.exp(kbox * dxr2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_737": {
                "input_tensor": {
                    "value": "tf.exp(kbox * dyl2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_739": {
                "input_tensor": {
                    "value": "tf.exp(kbox * dyr2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_84": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_85": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_86": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_87": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_88": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_89": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_90": {
                "num_rows": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sqrt_91": {
                "x": {
                    "value": "D2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2 + tf.eye(n)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2 + (1.0 - mmatrix)",
                            "BinOp"
                        ],
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ],
                        [
                            "D2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_91": {
                "num_rows": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_93": {
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "np.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(xcomp)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_104": {
                "input_tensor": {
                    "value": "D2 ** 6 - 2 * D2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_110": {
                "input_tensor": {
                    "value": "self.a_harmonic - self.b_harmonic * D2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_179": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_180": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_181": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_182": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_183": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_184": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_186": {
                "input": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_201": {
                "input_tensor": {
                    "value": "D2rel ** 6 - 2 * D2rel ** 3 + mmatrix * distance_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_212": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_213": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_214": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_215": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_216": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_217": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_219": {
                "input": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_228": {
                "input_tensor": {
                    "value": "D2rel ** 6 - 2 * D2rel ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_299": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_300": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_301": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_302": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_303": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_304": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_309": {
                "input": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.mask_matrix, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.mask_matrix, dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_326": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_328": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_329": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_330": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_331": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_336": {
                "input": {
                    "value": "mask_matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.mask_matrix, dtype)",
                            "Call"
                        ],
                        [
                            "tf.cast(self.mask_matrix, dtype)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_362": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_363": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_364": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_365": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_370": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_371": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_375": {
                "input": {
                    "value": "mask_matrix_solvent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.mask_matrix[2:, 2:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_376": {
                "num_rows": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_377": {
                "x": {
                    "value": "D2_solv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Dx ** 2 + Dy ** 2",
                            "BinOp"
                        ],
                        [
                            "D2_solv * mmatrix + tf.eye(1)",
                            "BinOp"
                        ],
                        [
                            "tf.sqrt(D2_solv) - tf.eye(1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_377": {
                "num_rows": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_382": {
                "input": {
                    "value": "tf.expand_dims(x[:, 0], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.nsolvent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_385": {
                "input": {
                    "value": "tf.expand_dims(x[:, 1], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.nsolvent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_388": {
                "input": {
                    "value": "tf.expand_dims(x[:, 2], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.nsolvent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_391": {
                "input": {
                    "value": "tf.expand_dims(x[:, 3], axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.nsolvent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_449": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_456": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_457": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_458": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_459": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_462": {
                "input": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_472": {
                "input_tensor": {
                    "value": "self.eps * (D2rel ** 6 - 2 * D2rel ** 3)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_494": {
                "input_tensor": {
                    "value": "dxl2 ** 6 - 2 * dxl2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_496": {
                "input_tensor": {
                    "value": "dxr2 ** 6 - 2 * dxr2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_498": {
                "input_tensor": {
                    "value": "dyl2 ** 6 - 2 * dyl2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_500": {
                "input_tensor": {
                    "value": "dyr2 ** 6 - 2 * dyr2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_505": {
                "x": {
                    "value": "-Rxl2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_508": {
                "x": {
                    "value": "-Rxr2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_511": {
                "x": {
                    "value": "-Ryl2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_514": {
                "x": {
                    "value": "-Ryr2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_525": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_526": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_527": {
                "input": {
                    "value": "xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 0::2])",
                            "Call"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 0::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_528": {
                "input": {
                    "value": "ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(x[:, 1::2])",
                            "Call"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "xsolv[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ],
                        [
                            "x[:, 1::2]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_529": {
                "a": {
                    "value": "Xcomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(xcomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(xcomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_530": {
                "a": {
                    "value": "Ycomp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "np.tile(np.expand_dims(ycomp, 2), (1, 1, n))",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, self.n])",
                            "Call"
                        ],
                        [
                            "tf.tile(tf.expand_dims(ycomp, 2), [1, 1, n])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_532": {
                "input": {
                    "value": "self.mask_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_535": {
                "input_tensor": {
                    "value": "E * mmatrix",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_606": {
                "input_tensor": {
                    "value": "dxl2 ** 6 - 2 * dxl2 ** 3 + self.eps * mask_xl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_611": {
                "input_tensor": {
                    "value": "dxr2 ** 6 - 2 * dxr2 ** 3 + self.eps * mask_xr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_616": {
                "input_tensor": {
                    "value": "dyl2 ** 6 - 2 * dyl2 ** 3 + self.eps * mask_yl",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_621": {
                "input_tensor": {
                    "value": "dyr2 ** 6 - 2 * dyr2 ** 3 + self.eps * mask_yr",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_668": {
                "input_tensor": {
                    "value": "dxl2 ** 6 - 2 * dxl2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_670": {
                "input_tensor": {
                    "value": "dxr2 ** 6 - 2 * dxr2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_672": {
                "input_tensor": {
                    "value": "dyl2 ** 6 - 2 * dyl2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_674": {
                "input_tensor": {
                    "value": "dyr2 ** 6 - 2 * dyr2 ** 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_733": {
                "x": {
                    "value": "kbox * dxl2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_735": {
                "x": {
                    "value": "kbox * dxr2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_737": {
                "x": {
                    "value": "kbox * dyl2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_739": {
                "x": {
                    "value": "kbox * dyr2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_95": {
                "input_tensor": {
                    "value": "k * (r - D) ** 2 * compare_solv",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_319": {
                "input_tensor": {
                    "value": "E_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.a_harmonic - self.b_harmonic * D2) * (1.0 - distance_mask) * self.mask_matrix",
                            "BinOp"
                        ],
                        [
                            "(self.c_harmonic * (np.sqrt(D2) + self.d_harmonic) ** 2 + self.e_harmonic) * (1 - distance_mask) * self.mask_matrix",
                            "BinOp"
                        ],
                        [
                            "(self.a_harmonic - self.b_harmonic * D2) * (1.0 - distance_mask) * mmatrix",
                            "BinOp"
                        ],
                        [
                            "(self.c_harmonic * (tf.sqrt(D2 + (1.0 - mask_matrix)) + self.d_harmonic) ** 2 + self.e_harmonic) * (1 - distance_mask) * mask_matrix",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_354": {
                "input_tensor": {
                    "value": "E_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.a_harmonic - self.b_harmonic * D2) * (1.0 - distance_mask) * self.mask_matrix",
                            "BinOp"
                        ],
                        [
                            "(self.c_harmonic * (np.sqrt(D2) + self.d_harmonic) ** 2 + self.e_harmonic) * (1 - distance_mask) * self.mask_matrix",
                            "BinOp"
                        ],
                        [
                            "(self.a_harmonic - self.b_harmonic * D2) * (1.0 - distance_mask) * mmatrix",
                            "BinOp"
                        ],
                        [
                            "(self.c_harmonic * (tf.sqrt(D2 + (1.0 - mask_matrix)) + self.d_harmonic) ** 2 + self.e_harmonic) * (1 - distance_mask) * mask_matrix",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "expand_dims_383": {
                "input": {
                    "value": "x[:, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_386": {
                "input": {
                    "value": "x[:, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_389": {
                "input": {
                    "value": "x[:, 2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_392": {
                "input": {
                    "value": "x[:, 3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_435": {
                "x": {
                    "value": "-a * (Rxl2 - self.rm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_438": {
                "x": {
                    "value": "-a * (Rxr2 - self.rm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_441": {
                "x": {
                    "value": "-a * (Ryl2 - self.rm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_444": {
                "x": {
                    "value": "-a * (Ryr2 - self.rm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_534": {
                "x": {
                    "value": "-a * (R - self.rm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_480": {
                "x": {
                    "value": "-a * (R - self.rm)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_340": {
                "x": {
                    "value": "D2 + (1.0 - mask_matrix)",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nmjmc/util.py": {
        "tensorflow": {}
    }
}