{
    "augment.py": {
        "tensorflow": {
            "cast_37": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sample_distorted_bounding_box_44": {
                "variable": {
                    "value": "(bbox_begin, bbox_size, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "image_size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "bounding_boxes": {
                    "value": "coord",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[[0.0",
                            "MethodArgument"
                        ],
                        [
                            "[[[0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "area_range": {
                    "value": "(0.08, 1.0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_attempts": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "use_image_if_no_bounding_boxes": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "unstack_51": {
                "variable": {
                    "value": "(offset_height, offset_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_begin",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "unstack_52": {
                "variable": {
                    "value": "(target_height, target_width, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "bbox_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "slice_53": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[offset_height, offset_width, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[target_height, target_width, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "resize_57": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.args.img_size, self.args.img_size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "method": {
                    "value": "bicubic",
                    "type": "str",
                    "possible_values": []
                }
            },
            "saturate_cast_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_78": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_79": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "1 - max_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "1 + max_delta",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "saturate_cast_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_contrast_85": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - contrast",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + contrast",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "saturate_cast_86": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_saturation_90": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "lower": {
                    "value": "1 - saturation",
                    "type": "BinOp",
                    "possible_values": []
                },
                "upper": {
                    "value": "1 + saturation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "saturate_cast_91": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_hue_95": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "max_delta": {
                    "value": "hue",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "saturate_cast_96": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "saturate_cast_100": {
                "variable": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "thres",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.saturate_cast(thres, x.dtype)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "less_73": {
                "x": {
                    "value": "tf.random.uniform(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(p, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_101": {
                "condition": {
                    "value": "x < thres",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "255 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_104": {
                "x": {
                    "value": "tf.random.uniform(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(p, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_109": {
                "x": {
                    "value": "tf.random.uniform(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(p, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_110": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_111": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "minval": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "maxval": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_112": {
                "variable": {
                    "value": "radius",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "kernel_size / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_114": {
                "variable": {
                    "value": "x_range",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(-radius, radius + 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_115": {
                "variable": {
                    "value": "blur_filter",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "-tf.pow(x_range, 2.0) / (2.0 * tf.pow(sigma, 2.0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_118": {
                "variable": {
                    "value": "blur_v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "blur_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.pow(x_range, 2.0) / (2.0 * tf.pow(sigma, 2.0)))",
                            "Call"
                        ],
                        [
                            "blur_filter / tf.reduce_sum(blur_filter)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[kernel_size, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_119": {
                "variable": {
                    "value": "blur_h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "blur_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.pow(x_range, 2.0) / (2.0 * tf.pow(sigma, 2.0)))",
                            "Call"
                        ],
                        [
                            "blur_filter / tf.reduce_sum(blur_filter)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, kernel_size, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_121": {
                "variable": {
                    "value": "blur_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blur_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(blur_filter, [1, kernel_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(blur_h, [1, 1, num_channels, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, num_channels, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_122": {
                "variable": {
                    "value": "blur_v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "blur_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(blur_filter, [kernel_size, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(blur_v, [1, 1, num_channels, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, num_channels, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_127": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "blur_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(blur_filter, [1, kernel_size, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(blur_h, [1, 1, num_channels, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "depthwise_conv2d_128": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "filter": {
                    "value": "blur_v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(blur_filter, [kernel_size, 1, 1, 1])",
                            "Call"
                        ],
                        [
                            "tf.tile(blur_v, [1, 1, num_channels, 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "less_136": {
                "x": {
                    "value": "tf.random.uniform(shape=[], dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.cast(p, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "uniform_73": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_104": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_104": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_109": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "blur_filter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(-tf.pow(x_range, 2.0) / (2.0 * tf.pow(sigma, 2.0)))",
                            "Call"
                        ],
                        [
                            "blur_filter / tf.reduce_sum(blur_filter)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_126": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "saturate_cast_131": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "uniform_136": {
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_136": {
                "x": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.8",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.5",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "flip_left_right_105": {
                "image": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_120": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._resize(x)",
                            "Call"
                        ],
                        [
                            "self._random_color_jitter(x, p=0.8)",
                            "Call"
                        ],
                        [
                            "self._random_gaussian_blur(x, p=p_blur)",
                            "Call"
                        ],
                        [
                            "self._random_solarize(x, p=p_solar)",
                            "Call"
                        ],
                        [
                            "self._standardize(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "x * delta",
                            "BinOp"
                        ],
                        [
                            "tf.slice(x, [offset_height, offset_width, 0], [target_height, target_width, 3])",
                            "Call"
                        ],
                        [
                            "tf.image.resize(x, (self.args.img_size, self.args.img_size), method='bicubic')",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "fn(x)",
                            "Call"
                        ],
                        [
                            "self._color_jitter(x)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_contrast(x, lower=1 - contrast, upper=1 + contrast)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_saturation(x, lower=1 - saturation, upper=1 + saturation)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.image.random_hue(x, max_delta=hue)",
                            "Call"
                        ],
                        [
                            "tf.saturate_cast(x, tf.uint8)",
                            "Call"
                        ],
                        [
                            "tf.cast(x, tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_h, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.depthwise_conv2d(x, blur_v, strides=[1, 1, 1, 1], padding='SAME')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_115": {
                "x": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random.uniform(shape=[], minval=0.1, maxval=2.0, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "callback.py": {
        "tensorflow": {
            "cast_83": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(step, tf.float32)",
                            "Call"
                        ],
                        [
                            "step + self.initial_epoch * self.steps_per_epoch",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "PiecewiseConstantDecay_63": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "decay_epochs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[int(e) for e in self.lr_interval.split(',')]",
                            "ListComp"
                        ]
                    ]
                },
                "values": {
                    "value": "lr_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.lr * self.lr_value ** k for k in range(len(decay_epochs) + 1)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "CosineDecay_66": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_learning_rate": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "self.total_epochs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModelCheckpoint_171": {
                "filepath": {
                    "value": "os.path.join(f'{args.result_path}/{args.task}/{args.stamp}/checkpoint', '{epoch:04d}_{loss:.4f}_{loss_ij:.4f}_{loss_ji:.4f}')",
                    "type": "Call",
                    "possible_values": []
                },
                "monitor": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "verbose": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "save_weights_only": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorBoard_187": {
                "log_dir": {
                    "value": "f'{args.result_path}/{args.task}/{args.stamp}/logs'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "histogram_freq": {
                    "value": "args.tb_histogram",
                    "type": "Attribute",
                    "possible_values": []
                },
                "write_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "write_images": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "update_freq": {
                    "value": "args.tb_interval",
                    "type": "Attribute",
                    "possible_values": []
                },
                "profile_batch": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "common.py": {
        "tensorflow": {
            "set_seed_63": {
                "seed": {
                    "value": "SEED",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "list_physical_devices_82": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "split_79": {
                "value": {
                    "value": ".",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_86": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "dataloader.py": {
        "tensorflow": {
            "read_file_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sqrt_93": {
                "variable": {
                    "value": "view1_A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(view1_Ax) + tf.square(view1_Ay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "variable": {
                    "value": "view2_A",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.square(view2_Ax) + tf.square(view2_Ay)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_99": {
                "variable": {
                    "value": "view1_A_norm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "view1_A_norm < self.args.threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_100": {
                "variable": {
                    "value": "view2_A_norm_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "view2_A_norm < self.args.threshold",
                    "type": "Compare",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "extract_jpeg_shape_132": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "decode_jpeg_133": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "contents": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "linspace_65": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "tf.cast(offset, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "stop": {
                    "value": "tf.cast(offset, tf.float32) + tf.cast(size, tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "num": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.img_size // 2 ** 5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_69": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.linspace(tf.cast(offset, tf.float32), tf.cast(offset, tf.float32) + tf.cast(size, tf.float32), feature_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.repeat(x, feature_size, axis=axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "repeat_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.linspace(tf.cast(offset, tf.float32), tf.cast(offset, tf.float32) + tf.cast(size, tf.float32), feature_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.repeat(x, feature_size, axis=axis)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.img_size // 2 ** 5",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reverse_79": {
                "variable": {
                    "value": "view1_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "view1_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coordmat(offset1[1], size1[1], 0)",
                            "Call"
                        ],
                        [
                            "tf.reverse(view1_x, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reverse_81": {
                "variable": {
                    "value": "view2_x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "view2_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_coordmat(offset2[1], size2[1], 0)",
                            "Call"
                        ],
                        [
                            "tf.reverse(view2_x, axis=[1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "repeat_84": {
                "variable": {
                    "value": "d",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reshape(source, (1, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "feature_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_139": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(label, self.args.classes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.args.classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_61": {
                "x": {
                    "value": "tf.cast(size1[0] ** 2 + size1[1] ** 2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_61": {
                "value": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.img_size // 2 ** 5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_62": {
                "x": {
                    "value": "tf.cast(size2[0] ** 2 + size2[1] ** 2, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_62": {
                "value": {
                    "value": "feature_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.args.img_size // 2 ** 5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_71": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.read_file(path)",
                            "Call"
                        ],
                        [
                            "tf.linspace(tf.cast(offset, tf.float32), tf.cast(offset, tf.float32) + tf.cast(size, tf.float32), feature_size)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=axis)",
                            "Call"
                        ],
                        [
                            "tf.repeat(x, feature_size, axis=axis)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "repeat_85": {
                "input": {
                    "value": "tf.reshape(target, (-1, 1))",
                    "type": "Call",
                    "possible_values": []
                },
                "repeats": {
                    "value": "feature_size ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_114": {
                "variable": {
                    "value": "aug_img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.io.decode_jpeg(value, channels=3)",
                            "Call"
                        ],
                        [
                            "self.augmentation(img, shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_61": {
                "x": {
                    "value": "size1[0] ** 2 + size1[1] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_62": {
                "x": {
                    "value": "size2[0] ** 2 + size2[1] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_66": {
                "x": {
                    "value": "offset",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "tensor": {
                    "value": "source",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_93": {
                "x": {
                    "value": "view1_Ay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_distance_axis(view1_y, view2_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "square_94": {
                "x": {
                    "value": "view2_Ay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_distance_axis(view2_y, view1_y)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_67": {
                "x": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "lars.py": {
        "tensorflow": {
            "clip_by_value_89": {
                "variable": {
                    "value": "decayed_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "decayed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "grad + self._weight_decay * var",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(decayed_grad, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "grad + self._weight_decay * var",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(decayed_grad, -10.0, 10.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "norm_105": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_106": {
                "variable": {
                    "value": "g_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clip_by_value_121": {
                "variable": {
                    "value": "decayed_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "decayed_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "grad + self._weight_decay * var",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(decayed_grad, -10.0, 10.0)",
                            "Call"
                        ],
                        [
                            "grad",
                            "Name"
                        ],
                        [
                            "grad + self._weight_decay * var",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(decayed_grad, -10.0, 10.0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-10.0",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "10.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "info_72": {
                "msg": {
                    "value": "LARS: apply dense: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_75": {
                "variable": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_76": {
                "variable": {
                    "value": "g_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ord": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_77": {
                "variable": {
                    "value": "trust_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.greater(w_norm, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.math.greater(g_norm, 0), self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon), 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_85": {
                "variable": {
                    "value": "trust_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "trust_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.greater(w_norm, 0), tf.where(tf.math.greater(g_norm, 0), self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon), 1.0), 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(trust_ratio, 0.0, 50)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.greater(w_norm, 0), tf.where(tf.math.greater(g_norm, 0), self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon), 1.0), 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(trust_ratio, 0.0, 50)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_104": {
                "msg": {
                    "value": "LARS: resouce apply dense: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_109": {
                "variable": {
                    "value": "trust_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.math.greater(w_norm, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(tf.math.greater(g_norm, 0), self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon), 1.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clip_by_value_117": {
                "variable": {
                    "value": "trust_ratio",
                    "type": "variable",
                    "possible_values": []
                },
                "t": {
                    "value": "trust_ratio",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(tf.math.greater(w_norm, 0), tf.where(tf.math.greater(g_norm, 0), self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon), 1.0), 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(trust_ratio, 0.0, 50)",
                            "Call"
                        ],
                        [
                            "tf.where(tf.math.greater(w_norm, 0), tf.where(tf.math.greater(g_norm, 0), self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon), 1.0), 1.0)",
                            "Call"
                        ],
                        [
                            "tf.clip_by_value(trust_ratio, 0.0, 50)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                }
            },
            "info_74": {
                "msg": {
                    "value": "LARS: apply dense, decay: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_108": {
                "msg": {
                    "value": "LARS: apply dense, decay: %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "var.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "greater_78": {
                "x": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(var, ord=2)",
                            "Call"
                        ],
                        [
                            "tf.norm(var, ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_79": {
                "condition": {
                    "value": "tf.math.greater(g_norm, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_110": {
                "x": {
                    "value": "w_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(var, ord=2)",
                            "Call"
                        ],
                        [
                            "tf.norm(var, ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_111": {
                "condition": {
                    "value": "tf.math.greater(g_norm, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "self._eeta * w_norm / (g_norm + self._weight_decay * w_norm + self._epsilon)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "greater_80": {
                "x": {
                    "value": "g_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(grad, ord=2)",
                            "Call"
                        ],
                        [
                            "tf.norm(grad, ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "greater_112": {
                "x": {
                    "value": "g_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(grad, ord=2)",
                            "Call"
                        ],
                        [
                            "tf.norm(grad, ord=2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "tensorflow": {
            "MirroredStrategy_112": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "OneDeviceStrategy_114": {
                "variable": {
                    "value": "strategy",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "/gpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "SGD_60": {
                "learning_rate": {
                    "value": "lr_scheduler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "OptionalLearningRateSchedule(lr=args.lr, lr_mode=args.lr_mode, lr_interval=args.lr_interval, lr_value=args.lr_value, total_epochs=args.epochs, steps_per_epoch=steps_per_epoch, initial_epoch=initial_epoch)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "model.py": {
        "tensorflow": {
            "Conv2D_32": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_1_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.filters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "self.kernel_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_2_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2D_36": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "4 * self.filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_3_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.bn1(self.conv1(inputs), training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.bn2(self.conv2(x), training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn2(self.conv2(x), training))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x), training)",
                            "Call"
                        ],
                        [
                            "shortcut + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "stack(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.resblock1(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock2(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock3(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock4(x, training)",
                            "Call"
                        ],
                        [
                            "self.backbone(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.proj_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.proj_bn1(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "self.proj_conv2(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_regular(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.ppm(x, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_momentum(views, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_103": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "conv1_conv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_105": {
                "variable": {
                    "value": "self.pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pool_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "poo1_pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_113": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self.bn1(self.conv1(inputs), training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2D_135": {
                "variable": {
                    "value": "self.proj_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_137": {
                "variable": {
                    "value": "self.proj_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "self.channel",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "proj_conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_143": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn2(self.conv2(x), training))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x), training)",
                            "Call"
                        ],
                        [
                            "shortcut + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "stack(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.resblock1(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock2(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock3(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock4(x, training)",
                            "Call"
                        ],
                        [
                            "self.backbone(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.proj_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.proj_bn1(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "self.proj_conv2(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_regular(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.ppm(x, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_momentum(views, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_178": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(t, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(transform[1](t, training))",
                            "Call"
                        ],
                        [
                            "transform[1](t)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h * w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1, h * w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "relu_182": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-cosine_similarity(x[:, :, None, :], x[:, None, :, :], axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.nn.relu(sim)",
                            "Call"
                        ],
                        [
                            "tf.pow(sim, self.gamma)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_183": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-cosine_similarity(x[:, :, None, :], x[:, None, :, :], axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.nn.relu(sim)",
                            "Call"
                        ],
                        [
                            "tf.pow(sim, self.gamma)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_185": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-cosine_similarity(x[:, :, None, :], x[:, None, :, :], axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "tf.nn.relu(sim)",
                            "Call"
                        ],
                        [
                            "tf.pow(sim, self.gamma)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "tf.reshape(t, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(transform[1](t, training))",
                            "Call"
                        ],
                        [
                            "transform[1](t)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(sim, t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (-1, h, w, c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self(views, training=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h, w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_263": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(sim, t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (-1, h, w, c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self(views, training=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h * w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reshape_264": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn2(self.conv2(x), training))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x), training)",
                            "Call"
                        ],
                        [
                            "shortcut + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "stack(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.resblock1(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock2(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock3(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock4(x, training)",
                            "Call"
                        ],
                        [
                            "self.backbone(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.proj_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.proj_bn1(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "self.proj_conv2(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_regular(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.ppm(x, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_momentum(views, training=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(-1, h * w, c)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_sum_267": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-cosine_similarity(y[:, :, None, :], tf.stop_gradient(x)[:, None, :, :], axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "cos * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cos, axis=(1, 2))",
                            "Call"
                        ],
                        [
                            "tf.math.divide_no_nan(cos, mask_cnt)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cos)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "count_nonzero_268": {
                "variable": {
                    "value": "mask_cnt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "(1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "divide_no_nan_269": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-cosine_similarity(y[:, :, None, :], tf.stop_gradient(x)[:, None, :, :], axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "cos * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cos, axis=(1, 2))",
                            "Call"
                        ],
                        [
                            "tf.math.divide_no_nan(cos, mask_cnt)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cos)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "mask_cnt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.count_nonzero(mask, axis=(1, 2), dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_270": {
                "variable": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "cos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-cosine_similarity(y[:, :, None, :], tf.stop_gradient(x)[:, None, :, :], axis=-1)",
                            "UnaryOp"
                        ],
                        [
                            "cos * mask",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(cos, axis=(1, 2))",
                            "Call"
                        ],
                        [
                            "tf.math.divide_no_nan(cos, mask_cnt)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cos)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_278": {
                "variable": {
                    "value": "views",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "(view1, view2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_281": {
                "variable": {
                    "value": "(x_i, x_j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn2(self.conv2(x), training))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x), training)",
                            "Call"
                        ],
                        [
                            "shortcut + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "stack(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.resblock1(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock2(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock3(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock4(x, training)",
                            "Call"
                        ],
                        [
                            "self.backbone(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.proj_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.proj_bn1(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "self.proj_conv2(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_regular(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.ppm(x, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_momentum(views, training=False)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_40": {
                "variable": {
                    "value": "self.shortcut_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filters": {
                    "value": "4 * self.filters",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "strides": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "self.name + '_0_conv'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "split_284": {
                "variable": {
                    "value": "(y_i, y_j)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(sim, t)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (-1, h, w, c))",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self(views, training=True)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_174": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "transform[1](t, training)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cosine_similarity_181": {
                "y_true": {
                    "value": "x[:, :, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "x[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_226": {
                "shape": {
                    "value": "(1, img_size, img_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "shape": {
                    "value": "(1, img_size, img_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_228": {
                "shape": {
                    "value": "(1, img_size // 2 ** 5, img_size // 2 ** 5, self.channel)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cosine_similarity_265": {
                "y_true": {
                    "value": "y[:, :, None, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "tf.stop_gradient(x)[:, None, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "GradientTape_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_163": {
                "filters": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ppm_conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stop_gradient_265": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn2(self.conv2(x), training))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(x), training)",
                            "Call"
                        ],
                        [
                            "shortcut + x",
                            "BinOp"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Name"
                        ],
                        [
                            "stack(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(self.bn1(self.conv1(inputs), training))",
                            "Call"
                        ],
                        [
                            "self.pool1(x)",
                            "Call"
                        ],
                        [
                            "self.resblock1(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock2(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock3(x, training)",
                            "Call"
                        ],
                        [
                            "self.resblock4(x, training)",
                            "Call"
                        ],
                        [
                            "self.backbone(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.proj_conv1(x)",
                            "Call"
                        ],
                        [
                            "self.proj_bn1(x, training)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(x)",
                            "Call"
                        ],
                        [
                            "self.proj_conv2(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_regular(inputs, training)",
                            "Call"
                        ],
                        [
                            "self.ppm(x, training)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, (-1, h * w, c))",
                            "Call"
                        ],
                        [
                            "self.encoder_momentum(views, training=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2D_166": {
                "filters": {
                    "value": "input_shape[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "ppm_conv2",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    }
}