{
    "layers/qlib.py": {
        "tensorflow": {
            "split_27": {
                "variable": {
                    "value": "(r, i, j, k)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('quarternion', [input_dim, dim], initializer=init)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_28": {
                "variable": {
                    "value": "r2",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[r, -i, -j, -k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_29": {
                "variable": {
                    "value": "i2",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[i, r, -k, j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_30": {
                "variable": {
                    "value": "j2",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[j, k, r, -i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_31": {
                "variable": {
                    "value": "k2",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[k, -j, i, r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_32": {
                "variable": {
                    "value": "hamilton",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[r2, i2, j2, k2]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "concat_dim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_66": {
                "variable": {
                    "value": "(ar, ax, ay, az)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_67": {
                "variable": {
                    "value": "(br, bx, by, bz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [al, 1])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_83": {
                "variable": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[bl, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_84": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [al, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_85": {
                "variable": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [al, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[al, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_87": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quarternion_dot(a, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [bsz, -1, al * bl])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(att, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bsz, -1, al * bl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_88": {
                "variable": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quarternion_dot(a, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [bsz, -1, al * bl])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(att, 1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_94": {
                "variable": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q0, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_95": {
                "variable": {
                    "value": "q1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q1, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "multiply_109": {
                "variable": {
                    "value": "r_base",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q0, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q1, [-1, d])",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_112": {
                "variable": {
                    "value": "i_base",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q0, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.concat([q1_i, q1_r, q1_k, q1_j], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_115": {
                "variable": {
                    "value": "j_base",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q0, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.concat([q1_j, q1_k, q1_r, q1_i], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_118": {
                "variable": {
                    "value": "k_base",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q0, [-1, d])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.concat([q1_k, q1_j, q1_i, q1_r], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_149": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, _d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_153": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sq, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "h",
                    "type": "Name",
                    "possible_values": [
                        [
                            "make_quarternion_mul(kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_89": {
                "tensor": {
                    "value": "att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quarternion_dot(a, b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(att, [bsz, -1, al * bl])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(att, 1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, al * bl]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_97": {
                "tensor": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quarternion_dot(q0, q1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, sq, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_121": {
                "values": {
                    "value": "[r, i, j, k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_130": {
                "variable": {
                    "value": "sp",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_136": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "output",
                            "Name"
                        ],
                        [
                            "tf.concat(o, axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_139": {
                "values": {
                    "value": "final",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "get_variable_167": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "quarternion",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "init",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.contrib.layers.xavier_initializer()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_169": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "hamilton",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([r2, i2, j2, k2], axis=concat_dim)",
                            "Call"
                        ],
                        [
                            "make_quarternion_mul(kernel)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_218": {
                "variable": {
                    "value": "new_state",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "new_state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(state, self.Wh) + tf.matmul(inputs, self.Wx)",
                            "BinOp"
                        ],
                        [
                            "tf.nn.sigmoid(new_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_219": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(inputs, self.Wy)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_36": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_39": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_42": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "split_45": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_68": {
                "a": {
                    "value": "ax",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "bx",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "a": {
                    "value": "ax",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "br",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_70": {
                "a": {
                    "value": "ax",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "bz",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_71": {
                "a": {
                    "value": "ax",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "by",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "a",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(a, [bl, 1])",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_78": {
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [al, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_81": {
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [al, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_93": {
                "input": {
                    "value": "q0",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(q0, [-1, d])",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_112": {
                "values": {
                    "value": "[q1_i, q1_r, q1_k, q1_j]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_115": {
                "values": {
                    "value": "[q1_j, q1_k, q1_r, q1_i]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_118": {
                "values": {
                    "value": "[q1_k, q1_j, q1_i, q1_r]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_148": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1, _d])",
                            "Call"
                        ],
                        [
                            "quarternion_ffn(x, dim, name=name, init=init, num_layers=num_layers, activation=activation, reuse=reuse)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [-1, sq, dim])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "'Q{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "self.Wh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wh",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_196": {
                "variable": {
                    "value": "self.Wx",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wx",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "self.Wy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "Wy",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_dim, output_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_64": {
                "input": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(b, [-1, d])",
                            "Call"
                        ],
                        [
                            "tf.tile(b, [al, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_189": {
                "name_or_scope": {
                    "value": "'QuartRNN{}'.format(name)",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_217": {
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wx",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_219": {
                "a": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "self.Wy",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "layers/quaternion_attention.py": {
        "tensorflow": {
            "to_float_756": {
                "variable": {
                    "value": "position",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length) + start_index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_764": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_765": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(length, channels, min_timescale, max_timescale, start_index)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_learned_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(num_layers, channels)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_sinusoid_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(signal, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_766": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(length, channels, min_timescale, max_timescale, start_index)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_learned_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(num_layers, channels)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_sinusoid_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(signal, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_868": {
                "variable": {
                    "value": "layer_signal",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "signal[:, layer, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_918": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_919": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(length, channels, min_timescale, max_timescale, start_index)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_learned_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(num_layers, channels)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_sinusoid_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(signal, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_1170": {
                "variable": {
                    "value": "emb_sum",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(emb)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_1303": {
                "variable": {
                    "value": "in_target",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "exclusive": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cumsum_1305": {
                "variable": {
                    "value": "target_pos",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "in_target",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cumsum(padding, axis=1, exclusive=True)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_1308": {
                "variable": {
                    "value": "illegal_connections",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(target_pos, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(target_pos, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1311": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_1325": {
                "variable": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1357": {
                "variable": {
                    "value": "bc_v",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "to_float(batch_coordinates_q)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1358": {
                "variable": {
                    "value": "bc_h",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "to_float(batch_coordinates_k)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1426": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], common_layers.shape_list(x)[2:]], 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_1445": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1450": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_1477": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1482": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_1513": {
                "variable": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(attn, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_1516": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cast(attn, tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pow_1517": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_1520": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_1522": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_1879": {
                "variable": {
                    "value": "v_vals",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_1900": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clip_by_value_1913": {
                "variable": {
                    "value": "distance_mat_clipped",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "distance_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "range_mat - tf.transpose(range_mat)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.range(-length + 1, 1, 1), 0)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "-max_relative_position",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "max_relative_position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_1955": {
                "variable": {
                    "value": "xy_matmul",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "transpose",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_1957": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1959": {
                "variable": {
                    "value": "x_t_r",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]]), [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[length, heads * batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1961": {
                "variable": {
                    "value": "x_tz_matmul",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x_t_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_t, [length, heads * batch_size, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "transpose",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_1963": {
                "variable": {
                    "value": "x_tz_matmul_r",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_tz_matmul",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x_t_r, z, transpose_b=transpose)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[length, batch_size, heads, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1965": {
                "variable": {
                    "value": "x_tz_matmul_r_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x_tz_matmul_r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x_tz_matmul, [length, batch_size, heads, -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2057": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [1, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2058": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, 1 + length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2059": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2084": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2085": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, length, length + 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2086": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch, heads, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_2117": {
                "variable": {
                    "value": "relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "embedding_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(max_relative_position, depth)",
                            "Tuple"
                        ],
                        [
                            "(num_heads, max_relative_position, depth)",
                            "Tuple"
                        ],
                        [
                            "(max_relative_position_unmasked, depth)",
                            "Tuple"
                        ],
                        [
                            "(num_heads, max_relative_position_unmasked, depth)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=initializer_stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_2121": {
                "variable": {
                    "value": "pad_length",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length - max_relative_position",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_2122": {
                "variable": {
                    "value": "start_slice_position",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "max_relative_position - length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_2254": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [0, length - 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2255": {
                "variable": {
                    "value": "x_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, length ** 2 + length * (length - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2257": {
                "variable": {
                    "value": "x_flat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch, heads, length ** 2 + length * (length - 1)])",
                            "Call"
                        ],
                        [
                            "tf.pad(x_flat, [[0, 0], [0, 0], [length, 0]])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [length, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2258": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_flat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(x, [batch, heads, length ** 2 + length * (length - 1)])",
                            "Call"
                        ],
                        [
                            "tf.pad(x_flat, [[0, 0], [0, 0], [length, 0]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, length, 2 * length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2259": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[batch, heads, length, 2 * length - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_2293": {
                "variable": {
                    "value": "relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "embedding_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(max_relative_position, depth)",
                            "Tuple"
                        ],
                        [
                            "(num_heads, max_relative_position, depth)",
                            "Tuple"
                        ],
                        [
                            "(max_relative_position_unmasked, depth)",
                            "Tuple"
                        ],
                        [
                            "(num_heads, max_relative_position_unmasked, depth)",
                            "Tuple"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=initializer_stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_2297": {
                "variable": {
                    "value": "pad_length",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length - max_relative_position",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_2298": {
                "variable": {
                    "value": "slice_start_position",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "max_relative_position - length",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_2479": {
                "variable": {
                    "value": "col_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, heads, length, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_2480": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x, col_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2483": {
                "variable": {
                    "value": "flat_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, length * 2 * length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_2484": {
                "variable": {
                    "value": "flat_pad",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "(batch, heads, length - 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "concat_2485": {
                "variable": {
                    "value": "flat_x_padded",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[flat_x, flat_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2488": {
                "variable": {
                    "value": "final_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "flat_x_padded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([flat_x, flat_pad], axis=2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, length + 1, 2 * length - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2607": {
                "variable": {
                    "value": "prev_block",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, num_blocks - 1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2609": {
                "variable": {
                    "value": "cur_block",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_2610": {
                "variable": {
                    "value": "local_block",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_block, cur_block]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_2940": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_3306": {
                "variable": {
                    "value": "padded_x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], 0], [memory_flange[1], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "transpose_3325": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_3326": {
                "variable": {
                    "value": "x_new",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]]), [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_3335": {
                "variable": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3338": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scatter_nd_3339": {
                "variable": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "updates": {
                    "value": "x_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(tf.reshape(x, [x_shape[0], x_shape[1], -1, x_shape[-1]]), [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_t_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_3340": {
                "variable": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, x_t, x_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scattered_x, [1, 2, 0, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_3347": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "block_shape[0] * block_shape[1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_3352": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, x_shape[2], x_shape[3], 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_3353": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(indices, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.eye(full_filter_width), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.eye(block_shape[0] * block_shape[1])",
                            "Call"
                        ],
                        [
                            "reshape_range(kernel, 0, 1, [block_shape[0], block_shape[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, block_stride[0], block_stride[1], 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_3364": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_blocks, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_3385": {
                "variable": {
                    "value": "split_query_masks",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "query_triangle",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.ones_matrix_band_part(np.prod(query_shape), np.prod(query_shape), -1, 0)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "query_shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_3397": {
                "variable": {
                    "value": "final_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([np.prod(query_shape), (query_shape[1] + 2 * memory_flange[1]) * memory_flange[0]]), tf.concat(mask_pieces, axis=1)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_3431": {
                "variable": {
                    "value": "x_memory_padded",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x_query_padded",
                    "type": "Name",
                    "possible_values": [
                        [
                            "pad_to_multiple_2d(x, query_block_shape)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], 0], [memory_flange[1], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "one_hot_3828": {
                "variable": {
                    "value": "r_shape",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.size(shape) + axis",
                            "BinOp"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.size(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "on_value": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "off_value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cond_3874": {
                "variable": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count))",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : length",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_3934": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(length, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros(shape=[0, depth], dtype=tf.float32, name='empty_out')",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : length_not_null(x, batch_coordinate)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "cond_4044": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0))",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "is_zero",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "is_not_zero",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "squeeze_4051": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_4052": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_4142": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "out_unpacked",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[fn(e) for e in zip(*elems_unpacked)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "unstack_4205": {
                "variable": {
                    "value": "list_q",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_4206": {
                "variable": {
                    "value": "list_k",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                }
            },
            "unstack_4207": {
                "variable": {
                    "value": "list_v",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_4222": {
                "variable": {
                    "value": "gates_q",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "list_gates_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_4223": {
                "variable": {
                    "value": "gates_k",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "list_gates_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_4298": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(k_dispatcher.nonpadding() - 1.0) * 1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_4417": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, nb_heads, -1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_4438": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_transpose_4439": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_depth or x.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "out_depth or x.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_4447": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_4471": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_4472": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "out_depth",
                    "type": "Name",
                    "possible_values": [
                        [
                            "out_depth or x.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "out_depth or x.get_shape().as_list()[-1]",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(1, factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "strides": {
                    "value": "(1, factor)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "Constant",
                    "possible_values": []
                },
                "data_format": {
                    "value": "channels_last",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_4480": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_4622": {
                "variable": {
                    "value": "memory_x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[x[:, :1, :], memory_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_59": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=initializer_stddev)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_64": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "antecedent.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[input_depth, total_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_684": {
                "variable": {
                    "value": "attentions",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "attention_list",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softmax_695": {
                "variable": {
                    "value": "expected_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "expected_logits",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "to_float_966": {
                "variable": {
                    "value": "position",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_969": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_972": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(length, channels, min_timescale, max_timescale, start_index)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_learned_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(num_layers, channels)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_sinusoid_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(signal, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [prepad, postpad]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_995": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.get_variable(name, [max_length, depth])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_1067": {
                "variable": {
                    "value": "adjacency_matrix_one_hot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "adjacency_matrix",
                    "type": "Name",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_edge_types",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_1069": {
                "variable": {
                    "value": "att_adj_vectors",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.to_float(adjacency_matrix_one_hot), [-1, num_edge_types])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "adj_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('adj_vectors', att_adj_vectors_shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5))) * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_1136": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_1138": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.t_vectors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sign_1140": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_1149": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_1152": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.nb_buckets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1171": {
                "x": {
                    "value": "tf.equal(emb_sum, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_int32_1184": {
                "x": {
                    "value": "tf.reduce_sum(non_padding, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1247": {
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(tf.expand_dims(query_segment_id, 2), tf.expand_dims(memory_segment_id, 1))) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "memory_padding * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([[-1], common_layers.shape_list(x)[2:]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "ret + matmul_with_relative_values(relative_weights, value_relative_embeddings, heads_share_relative_embedding)",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('bhlm,md->bhld', x, y)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bhlm,hmd->bhld', x, y)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bhld,md->bhlm', x, y)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bhld,hmd->bhlm', x, y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1261": {
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.not_equal(tf.expand_dims(query_segment_id, 2), tf.expand_dims(memory_segment_id, 1))) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "memory_padding * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, tf.concat([[-1], common_layers.shape_list(x)[2:]], 0))",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "ret + matmul_with_relative_values(relative_weights, value_relative_embeddings, heads_share_relative_embedding)",
                            "BinOp"
                        ],
                        [
                            "tf.einsum('bhlm,md->bhld', x, y)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bhlm,hmd->bhld', x, y)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bhld,md->bhlm', x, y)",
                            "Call"
                        ],
                        [
                            "tf.einsum('bhld,hmd->bhlm', x, y)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_1278": {
                "input": {
                    "value": "tf.to_float(tf.less(attention_bias, -1))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1327": {
                "input": {
                    "value": "-tf.log(1 + tf.abs(diff))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_1352": {
                "variable": {
                    "value": "bc",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(bc, 1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(bc)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_1353": {
                "variable": {
                    "value": "bc",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "bc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.squeeze(bc, 1)",
                            "Call"
                        ],
                        [
                            "tf.to_float(bc)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1398": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:-1] + [n, m // n]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_1413": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:-2] + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_1448": {
                "variable": {
                    "value": "_x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "split_last_dimension(_x, num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1464": {
                "a": {
                    "value": "split_last_dimension(x, num_heads)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 3, 1, 2, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "image_1540": {
                "name": {
                    "value": "attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1633": {
                "variable": {
                    "value": "q_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "q_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, num_heads, 1, num_groups]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1641": {
                "variable": {
                    "value": "m_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "m_bias",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, num_heads, 1, num_groups]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_1652": {
                "variable": {
                    "value": "q_group",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q_pred_biased",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_pred + q_bias",
                            "BinOp"
                        ],
                        [
                            "combine_first_two_dimensions(q_pred_biased)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_1653": {
                "variable": {
                    "value": "q_requests",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "q_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(q_pred_biased, axis=2)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_1654": {
                "variable": {
                    "value": "m_requests",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(m_pred_biased, 0.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1656": {
                "variable": {
                    "value": "m_requests",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "m_requests",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(m_pred_biased, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(m_requests, tf.reshape(tf.one_hot([0], length_kv), [1, length_kv, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(tf.one_hot([0], length_kv), [1, length_kv, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1658": {
                "variable": {
                    "value": "q_group_size",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_requests",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(q_group, num_groups, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1659": {
                "variable": {
                    "value": "m_group_size",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "m_requests",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.greater(m_pred_biased, 0.0))",
                            "Call"
                        ],
                        [
                            "tf.maximum(m_requests, tf.reshape(tf.one_hot([0], length_kv), [1, length_kv, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_1664": {
                "variable": {
                    "value": "capacity_q",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(query_antecedent)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_int32(q_group_target_size * multiplicative_overhead + additive_overhead)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "minimum_1668": {
                "variable": {
                    "value": "capacity_m",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length_kv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(memory_antecedent)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_int32(m_group_target_size * multiplicative_overhead + additive_overhead)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "split_1681": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "dispatched_kv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m_dispatcher.dispatch(kv)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[depth_qk, depth_v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_1682": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "dispatched_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1683": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(m_dispatcher.nonpadding() - 1.0) * 1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_1691": {
                "variable": {
                    "value": "log_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1692": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "log_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.log_softmax(logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1694": {
                "variable": {
                    "value": "q_total",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits[:, :, :, :1] - log_weights[:, :, :, :1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1696": {
                "variable": {
                    "value": "m_total",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.stop_gradient(weights), axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_1698": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_1701": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.combine(o)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o, [batch, num_heads, length_q, depth_v])",
                            "Call"
                        ],
                        [
                            "combine_heads(o)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(o, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v_vals[i])",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention_simple(q, k, v, attention_bias)",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention_simple(q, k, v, attention_bias)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, num_heads, length_q, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_1708": {
                "variable": {
                    "value": "q_total",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "q_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logits[:, :, :, :1] - log_weights[:, :, :, :1])",
                            "Call"
                        ],
                        [
                            "q_dispatcher.combine(q_total)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(q_total, -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "squeeze_1709": {
                "variable": {
                    "value": "m_total",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "m_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(tf.stop_gradient(weights), axis=2), -1)",
                            "Call"
                        ],
                        [
                            "m_dispatcher.combine(m_total)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(m_total, -1)",
                            "Call"
                        ],
                        [
                            "tf.log(m_total + epsilon)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1711": {
                "variable": {
                    "value": "m_pred_used",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(m_pred) * m_dispatcher.gates()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1712": {
                "variable": {
                    "value": "q_pred_used",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_pred * q_dispatcher.gates()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_1714": {
                "variable": {
                    "value": "m_pred_used",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "m_pred_used + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_1715": {
                "variable": {
                    "value": "m_total",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "m_total + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_1716": {
                "variable": {
                    "value": "m_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "m_total - m_pred_used",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "l2_loss_1717": {
                "variable": {
                    "value": "q_loss",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "(q_total - q_pred_used) * tf.reduce_sum(q_gates, axis=2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_1832": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_1836": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1909": {
                "variable": {
                    "value": "range_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.tile(range_vec, [length])",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_1912": {
                "variable": {
                    "value": "distance_mat",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.range(-length + 1, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1930": {
                "variable": {
                    "value": "embeddings_table",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "embeddings",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[vocab_size, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_1931": {
                "variable": {
                    "value": "embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "embeddings_table",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('embeddings', [vocab_size, depth])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "relative_positions_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_generate_relative_positions_matrix(length, max_relative_position, cache=cache)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_2029": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "dropout_2030": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pad_2124": {
                "variable": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad_length, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2127": {
                "variable": {
                    "value": "used_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(relative_embeddings, [[pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[pad_length, pad_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, pad_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[start_slice_position, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2131": {
                "variable": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_length, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2134": {
                "variable": {
                    "value": "used_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(relative_embeddings, [[pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[pad_length, pad_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, pad_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, start_slice_position, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_2201": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_2213": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_2219": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_2300": {
                "variable": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[pad_length, pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2303": {
                "variable": {
                    "value": "used_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(relative_embeddings, [[pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[pad_length, pad_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, pad_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[slice_start_position, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[2 * length - 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2307": {
                "variable": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name=name, shape=embedding_shape, initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [pad_length, pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2310": {
                "variable": {
                    "value": "used_relative_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "padded_relative_embeddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pad(relative_embeddings, [[pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[pad_length, pad_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.pad(relative_embeddings, [[0, 0], [pad_length, pad_length], [0, 0]])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, slice_start_position, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, 2 * length - 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_2366": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_2385": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_2392": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "mod_2436": {
                "variable": {
                    "value": "padding_size",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "-length",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2439": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2440": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2441": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_2444": {
                "variable": {
                    "value": "num_blocks",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_2445": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2446": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2447": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_2449": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_2452": {
                "variable": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + tf.reshape(attention_bias_lower_triangle(block_length), [1, 1, 1, block_length, block_length])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_2454": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "attention",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "attention + tf.reshape(attention_bias_lower_triangle(block_length), [1, 1, 1, block_length, block_length])",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(attention)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2455": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, -1, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2458": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, original_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mod_2536": {
                "variable": {
                    "value": "padding_size",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "-length",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2539": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2540": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2541": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "slice_2549": {
                "variable": {
                    "value": "first_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, block_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2550": {
                "variable": {
                    "value": "first_k",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, block_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2551": {
                "variable": {
                    "value": "first_v",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, block_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2563": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2564": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2565": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2571": {
                "variable": {
                    "value": "tail_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2572": {
                "variable": {
                    "value": "tail_q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(q, [0, 0, 1, 0, 0], [-1, -1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tail_q, [batch, heads, num_blocks - 1, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.slice(q, [0, 0, 1, 0, 0], [-1, -1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tail_q, [batch, heads, num_blocks - 1, block_length, depth_k])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks - 1, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2595": {
                "variable": {
                    "value": "tail_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dot_product_attention(tail_q, local_k, local_v, bias, dropout_rate=dropout_rate, make_image_summary=False, name='tail_block')",
                            "Call"
                        ],
                        [
                            "tf.reshape(tail_output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, (num_blocks - 1) * block_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_2597": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[first_output, tail_output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_2600": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, original_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2601": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, original_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2611": {
                "tensor": {
                    "value": "local_block",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([prev_block, cur_block], 3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks - 1, block_length * 2, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mod_2676": {
                "variable": {
                    "value": "padding_size",
                    "type": "Name",
                    "possible_values": []
                },
                "x1": {
                    "value": "-length",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2679": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2680": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_2681": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, padding_size], [0, 0]]",
                            "List"
                        ],
                        [
                            "'VALID'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "slice_2685": {
                "variable": {
                    "value": "first_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, block_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2686": {
                "variable": {
                    "value": "first_k",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, block_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2687": {
                "variable": {
                    "value": "first_v",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, block_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_2699": {
                "variable": {
                    "value": "first_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "first_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(q, [0, 0, 0, 0], [-1, -1, block_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(q, [0, 0, 0, 0], [-1, -1, block_length, -1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "first_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(k, [0, 0, 0, 0], [-1, -1, block_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(k, [0, 0, 0, 0], [-1, -1, block_length, -1])",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_2706": {
                "variable": {
                    "value": "first_att",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "first_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(first_q, first_k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "first_logits + common_layers.cast_like(attention_bias_lower_triangle(block_length), first_logits)",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "first_attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_2715": {
                "variable": {
                    "value": "first_output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "first_att",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(first_logits, name='first_attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(first_att, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "first_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(v, [0, 0, 0, 0], [-1, -1, block_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.slice(v, [0, 0, 0, 0], [-1, -1, block_length, -1])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2718": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2719": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2720": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks, block_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2725": {
                "variable": {
                    "value": "tail_q",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 1, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2726": {
                "variable": {
                    "value": "tail_q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tail_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.slice(q, [0, 0, 1, 0, 0], [-1, -1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tail_q, [batch, heads, num_blocks - 1, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.slice(q, [0, 0, 1, 0, 0], [-1, -1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(tail_q, [batch, heads, num_blocks - 1, block_length, depth_k])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, num_blocks - 1, block_length, depth_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2749": {
                "variable": {
                    "value": "masked_rel_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "rel_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul_with_relative_keys(q, key_relative_embeddings, heads_share_relative_embedding)",
                            "Call"
                        ],
                        [
                            "_relative_position_to_absolute_position_masked(rel_logits)",
                            "Call"
                        ],
                        [
                            "matmul_with_relative_keys(rel_tail_q, rel_embeddings, heads_share_relative_embedding)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, block_length]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2753": {
                "variable": {
                    "value": "unmasked_rel_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "rel_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "matmul_with_relative_keys(q, key_relative_embeddings, heads_share_relative_embedding)",
                            "Call"
                        ],
                        [
                            "_relative_position_to_absolute_position_masked(rel_logits)",
                            "Call"
                        ],
                        [
                            "matmul_with_relative_keys(rel_tail_q, rel_embeddings, heads_share_relative_embedding)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, -1, 2 * block_length - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_2757": {
                "variable": {
                    "value": "all_rel_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[unmasked_rel_logits, masked_rel_logits]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_2768": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "all_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quarternion_attention(q, k)",
                            "Call"
                        ],
                        [
                            "tf.matmul(rel_tail_q, rel_k, transpose_b=True) + all_rel_logits",
                            "BinOp"
                        ],
                        [
                            "all_logits + tf.reshape(mask, [1, 1, block_length, local_length])",
                            "BinOp"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_2775": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rel_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_reshape_for_relative(local_v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_2814": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, num_blocks - 1, heads, block_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_2816": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2818": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, (num_blocks - 1) * block_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_2820": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[first_output, output]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_2821": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, original_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2822": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch, heads, original_length, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "einsum_2828": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhlm,md->bhld",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_2830": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhlm,hmd->bhld",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_2836": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhld,md->bhlm",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_2838": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "equation": {
                    "value": "bhld,hmd->bhlm",
                    "type": "Constant",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_2888": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_2889": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.eye(full_filter_width)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_2890": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(indices, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.eye(full_filter_width), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.eye(block_shape[0] * block_shape[1])",
                            "Call"
                        ],
                        [
                            "reshape_range(kernel, 0, 1, [block_shape[0], block_shape[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gather_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_2897": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(gather_indices, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_2901": {
                "variable": {
                    "value": "k_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2902": {
                "variable": {
                    "value": "k_new",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "k_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(k, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(k, [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, block_length, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_2903": {
                "variable": {
                    "value": "k_new",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "k_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(k_t, gather_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(k_new, [2, 3, 0, 1, 4])",
                            "Call"
                        ],
                        [
                            "gather_blocks_2d(k, k_and_v_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat([k_flange, k_center], axis=3)",
                            "Call"
                        ],
                        [
                            "k_center",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_2905": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_to_padding(k_new) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "transpose_2907": {
                "variable": {
                    "value": "v_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_2908": {
                "variable": {
                    "value": "v_new",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "v_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(v, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v, [2, 0, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, block_length, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_2909": {
                "variable": {
                    "value": "v_new",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(v_t, gather_indices)",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_new, [2, 3, 0, 1, 4])",
                            "Call"
                        ],
                        [
                            "gather_blocks_2d(v, k_and_v_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat([v_flange, v_center], axis=3)",
                            "Call"
                        ],
                        [
                            "v_center",
                            "Name"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2919": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_heads, -1, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_2922": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, original_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3009": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_3010": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.eye(memory_block_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_3011": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(indices, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.eye(full_filter_width), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.eye(block_shape[0] * block_shape[1])",
                            "Call"
                        ],
                        [
                            "reshape_range(kernel, 0, 1, [block_shape[0], block_shape[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "query_block_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gather_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_3018": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(gather_indices, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_3022": {
                "variable": {
                    "value": "k_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_3023": {
                "variable": {
                    "value": "v_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_3048": {
                "variable": {
                    "value": "k_windows",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[left_k, self_k_part, right_k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_3049": {
                "variable": {
                    "value": "v_windows",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[left_v, self_v_part, right_v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_3050": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_to_padding(k_windows) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_3061": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_heads, -1, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_3064": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, original_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_3110": {
                "values": {
                    "value": "gathered_blocks",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_3176": {
                "variable": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_3177": {
                "variable": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.eye(memory_block_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_3178": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(indices, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "filters": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.eye(full_filter_width), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.eye(memory_block_size), axis=1)",
                            "Call"
                        ],
                        [
                            "tf.eye(block_shape[0] * block_shape[1])",
                            "Call"
                        ],
                        [
                            "reshape_range(kernel, 0, 1, [block_shape[0], block_shape[1], 1])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "query_block_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "VALID",
                    "type": "Constant",
                    "possible_values": []
                },
                "name": {
                    "value": "gather_conv",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_3184": {
                "variable": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.cast(gather_indices, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_3188": {
                "variable": {
                    "value": "k_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_3189": {
                "variable": {
                    "value": "v_t",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_3200": {
                "variable": {
                    "value": "masked_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(attention_bias_lower_triangle(query_block_size), axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[block_q_shape[0], block_q_shape[1], block_q_shape[2], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_3203": {
                "variable": {
                    "value": "padding_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_to_padding(k_unmasked_windows) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_3205": {
                "variable": {
                    "value": "padding_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "padding_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedding_to_padding(k_unmasked_windows) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(padding_attention_bias, [1, 1, 1, query_block_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, query_block_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_3207": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[masked_attention_bias, padding_attention_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_3210": {
                "variable": {
                    "value": "k_windows",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self_k_part, k_unmasked_windows]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_3211": {
                "variable": {
                    "value": "v_windows",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[self_v_part, v_unmasked_windows]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_3220": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, num_heads, -1, depth_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_3223": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, original_length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_3265": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], 0], [memory_flange[1], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "pad_3266": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "paddings",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], memory_flange[1]], [memory_flange[0], memory_flange[1]], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [0, height_padding], [0, width_padding], [0, 0]]",
                            "List"
                        ],
                        [
                            "[[0, 0], [0, 0], [memory_flange[0], 0], [memory_flange[1], memory_flange[1]], [0, 0]]",
                            "List"
                        ]
                    ]
                }
            },
            "expand_dims_3279": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.to_float(embedding_to_padding(k_new)) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "slice_3294": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, v_shape[2], v_shape[3], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3317": {
                "tensor": {
                    "value": "tensor",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "target_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t_shape[:i] + shape + t_shape[j:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "transpose_3328": {
                "a": {
                    "value": "x_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(x, gather_indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(x_t, indices)",
                            "Call"
                        ],
                        [
                            "get_shifted_center_blocks(x, x_indices)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3341": {
                "tensor": {
                    "value": "scattered_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.scatter_nd(indices, x_t, x_t_shape)",
                            "Call"
                        ],
                        [
                            "tf.transpose(scattered_x, [1, 2, 0, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_layers, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_prod_3363": {
                "variable": {
                    "value": "num_blocks",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "dims",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(indices)[:3]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cast_3365": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_3458": {
                "variable": {
                    "value": "x_flange",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[top_x, left_x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_3504": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_3514": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_3516": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, x_shape[1], x_shape[2], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3584": {
                "variable": {
                    "value": "center_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "center_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_bias_lower_triangle(np.prod(query_elements))",
                            "Call"
                        ],
                        [
                            "tf.reshape(center_attention_bias, [1, 1, 1, query_elements, query_elements])",
                            "Call"
                        ],
                        [
                            "tf.tile(center_attention_bias, [v_center_shape[0], v_center_shape[1], v_center_shape[2], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, 1, query_elements, query_elements]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_3587": {
                "variable": {
                    "value": "center_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "center_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_bias_lower_triangle(np.prod(query_elements))",
                            "Call"
                        ],
                        [
                            "tf.reshape(center_attention_bias, [1, 1, 1, query_elements, query_elements])",
                            "Call"
                        ],
                        [
                            "tf.tile(center_attention_bias, [v_center_shape[0], v_center_shape[1], v_center_shape[2], 1, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[v_center_shape[0], v_center_shape[1], v_center_shape[2], 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_3609": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=3)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=2)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.concat(output, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "output + output_rel",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(attention, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, tail_output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, rel_v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, num_blocks - 1, heads, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(output, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, (num_blocks - 1) * block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.concat([first_output, output], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch, heads, original_length, depth_v])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k_windows, v_windows, attention_bias, dropout_rate=0.0, name='dilated_1d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [batch_size, num_heads, -1, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, -1, original_length, -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(x_new, x_indices, padded_x_shape)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(output, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0], [-1, x_shape[1], x_shape[2], -1])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q_new, k_new, v_new, attention_bias, dropout_rate=0.0, name='masked_local_2d', make_image_summary=False)",
                            "Call"
                        ],
                        [
                            "scatter_blocks_2d(output, q_indices, padded_q_shape)",
                            "Call"
                        ],
                        [
                            "tf.slice(output, [0, 0, 0, 0, 0], [-1, -1, v_shape[2], v_shape[3], -1])",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[-1, -1, v_shape[2], v_shape[3], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3726": {
                "variable": {
                    "value": "batch_q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, num_parts, part_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3727": {
                "variable": {
                    "value": "batch_k",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, num_parts, part_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3728": {
                "variable": {
                    "value": "batch_v",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, num_parts, part_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3734": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0], x_shape[1], filter_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_3775": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "k",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_heads, memory_rows, head_size_k]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_3780": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "v",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "var_shape_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_heads, memory_rows, head_size_v]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_3797": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, num_heads, head_size_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_3798": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3799": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_heads, batch_size * length, head_size_k]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_3800": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_3801": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_3802": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_3803": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[num_heads, batch_size, length, head_size_v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_3804": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3805": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dp(fct, x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "fct(x, *args, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [num_heads, batch_size, length, head_size_v])",
                            "Call"
                        ],
                        [
                            "tf.transpose(y, [1, 2, 0, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(y, [batch_size, length, total_value_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(y, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "forward_fn(x, wqkv, wo, bias, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "y + tf.nn.conv1d(o, wo_split[h], 1, 'SAME')",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, total_value_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_3881": {
                "name": {
                    "value": "batch_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "experts_stats_batch_size",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_3974": {
                "variable": {
                    "value": "batch_coordinate",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "coordinate_tensor(common_layers.shape_list(x)[:-1], axis=0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_4022": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, length_q, depth_v]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Print_4023": {
                "variable": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "zeros",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros(shape=[1, 1, length_q, depth_v], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.Print(zeros, [length_k, length_q], 'length_k/length_q: ')",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[length_k, length_q]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "length_k/length_q: ",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_4187": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_4188": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_heads, -1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_4236": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_4238": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_heads, batch_size, -1, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_4239": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_4268": {
                "variable": {
                    "value": "nb_elems_to_dispatch",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lsh.get_gates(single_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.stack(list_gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [nb_heads, batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.transpose(gates, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.maximum(gates, tf.reshape(tf.one_hot([0], length), [1, 1, length, 1]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_4269": {
                "variable": {
                    "value": "nb_elems_to_dispatch",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "nb_elems_to_dispatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gates, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(nb_elems_to_dispatch)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(nb_elems_to_dispatch)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_4270": {
                "variable": {
                    "value": "nb_elems_to_dispatch",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "nb_elems_to_dispatch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(gates, axis=[1, 2])",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(nb_elems_to_dispatch)",
                            "Call"
                        ],
                        [
                            "tf.to_int32(nb_elems_to_dispatch)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_4272": {
                "variable": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nb_elems_to_dispatch // nb_buckets * 2",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(length, capacity)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_4279": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_4300": {
                "variable": {
                    "value": "q_coordinate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(q_dispatcher.length_coordinate(), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_4302": {
                "variable": {
                    "value": "k_coordinate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(k_dispatcher.length_coordinate(), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_4376": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_4377": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_heads, batch_size * length, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_4379": {
                "variable": {
                    "value": "list_x",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_4393": {
                "variable": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "list_gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "reshape_4396": {
                "variable": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lsh.get_gates(single_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.stack(list_gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [nb_heads, batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.transpose(gates, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.maximum(gates, tf.reshape(tf.one_hot([0], length), [1, 1, length, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[nb_heads, batch_size, length, nb_buckets]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_4397": {
                "variable": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lsh.get_gates(single_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.stack(list_gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [nb_heads, batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.transpose(gates, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.maximum(gates, tf.reshape(tf.one_hot([0], length), [1, 1, length, 1]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_4534": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "compute_attention_component(query_antecedent, total_key_depth, q_filter_width, q_padding, 'q', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "tfp.distributions.Categorical(logits=actual_logits)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(query_antecedent, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(q)",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(q, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, block_length)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, block_length)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(q, query_block_size)",
                            "Call"
                        ],
                        [
                            "reshape_by_blocks(q, new_q_shape, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(q, query_shape)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(q, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(common_layers.dense(x, filter_depth, use_bias=False, name='q_transform'), axis=2)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, total_key_depth, use_bias=False, name='q_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [batch_size, length, num_heads, head_size_k])",
                            "Call"
                        ],
                        [
                            "tf.transpose(q, [2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(q, [num_heads, batch_size * length, head_size_k])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(q)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.dispatch(q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_4535": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_4543": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_4544": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_4553": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_4554": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_4555": {
                "variable": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "v_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.logical_or(tf.equal(length_q, 0), tf.equal(length_k, 0)), is_zero, is_not_zero)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "map_fn_switch(lambda args: dot_product_single_head(*args, bi=bi), elems=(q, k, v, gates_q, gates_k), dtype=tf.float32, parallel_iterations=2, use_map_fn=use_map_fn)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v_out, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [nb_heads, batch_size, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(v_out, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias=bias)",
                            "Call"
                        ],
                        [
                            "dot_product_batched_head(q, k, v, gates_q, gates_k, mask_right)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v_out, [batch_size, nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(v_out, axis=3)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_4632": {
                "variable": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "common_layers.shape_list(t)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "expand_dims_4634": {
                "variable": {
                    "value": "length_coordinates",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "length_coordinates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(length, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(length_coordinates, axis=axis)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.size(shape) + axis",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_4649": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_4650": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_4677": {
                "variable": {
                    "value": "scalar",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.to_float(common_layers.shape_list(q)[2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_4678": {
                "variable": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q * scalar",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_4681": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_4731": {
                "variable": {
                    "value": "wqkv_split",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "wqkv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('wqkv', [num_heads, 1, io_size, 3 * head_size], initializer=tf.random_normal_initializer(stddev=io_size ** (-0.5)))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(attn)[1]",
                            "Subscript"
                        ],
                        [
                            "k_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unstack_4732": {
                "variable": {
                    "value": "wo_split",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "wo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('wo', [num_heads, 1, head_size, io_size], initializer=tf.random_normal_initializer(stddev=(head_size * num_heads) ** (-0.5)))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(attn)[1]",
                            "Subscript"
                        ],
                        [
                            "k_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "squeeze_4792": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensordot_66": {
                "a": {
                    "value": "antecedent",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_237": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[query_antecedent, memory_antecedent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_385": {
                "variable": {
                    "value": "o_var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "o",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_heads, total_value_depth // num_heads, output_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_387": {
                "variable": {
                    "value": "o_var",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "o_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('o', [num_heads, total_value_depth // num_heads, output_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(o_var, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_var, [total_value_depth, output_depth])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_388": {
                "variable": {
                    "value": "o_var",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "o_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('o', [num_heads, total_value_depth // num_heads, output_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(o_var, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_var, [total_value_depth, output_depth])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[total_value_depth, output_depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensordot_389": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "o_var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('o', [num_heads, total_value_depth // num_heads, output_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(o_var, x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o_var, [total_value_depth, output_depth])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_687": {
                "input_tensor": {
                    "value": "attentions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack(attention_list)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "mean_squared_error_696": {
                "y_true": {
                    "value": "expected_weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(expected_logits)",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "actual_weights",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "maximum_760": {
                "x": {
                    "value": "tf.to_float(num_timescales) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_761": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_763": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_826": {
                "name": {
                    "value": "layer_embedding",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_layers, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, channels ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_913": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_916": {
                "input": {
                    "value": "tf.expand_dims(inv_timescales, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_962": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_974": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(length, channels, min_timescale, max_timescale, start_index)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_learned_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(num_layers, channels)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_sinusoid_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(signal, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_976": {
                "variable": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "signal",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(length, channels, min_timescale, max_timescale, start_index)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_learned_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "get_timing_signal_1d(num_layers, channels)",
                            "Call"
                        ],
                        [
                            "get_layer_timing_signal_sinusoid_1d(channels, layer, num_layers)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=2)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(signal, x)",
                            "Call"
                        ],
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [prepad, postpad]])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, 0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(signal, -2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "name_scope_993": {
                "name": {
                    "value": "add_positional_embedding",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_997": {
                "variable": {
                    "value": "pad_length",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "length - max_length",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cond_998": {
                "variable": {
                    "value": "sliced",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(length, max_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.slice(var, [0, 0], [length, -1])",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : tf.pad(var, [[0, pad_length], [0, 0]])",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "name_scope_1021": {
                "name": {
                    "value": "add_positional_embedding_nd",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_1034": {
                "variable": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_layers, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, depth ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_1054": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "edge_vectors",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1072": {
                "tensor": {
                    "value": "att_adj_vectors",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(tf.to_float(adjacency_matrix_one_hot), [-1, num_edge_types]), adj_vectors)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[adjacency_matrix_shape[0], adjacency_matrix_shape[1], adjacency_matrix_shape[2], depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_1106": {
                "variable": {
                    "value": "self.t_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "vector",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "(self.depth, self.nb_hyperplanes * self.nb_replicat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "self.trainable",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_1113": {
                "variable": {
                    "value": "self.t_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "[self._idx_to_bits(i) for i in range(self.nb_buckets)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "group",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_1170": {
                "x": {
                    "value": "emb",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "equal_1171": {
                "x": {
                    "value": "emb_sum",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.abs(emb), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1184": {
                "input_tensor": {
                    "value": "non_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 - padding",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "to_float_1243": {
                "x": {
                    "value": "tf.not_equal(tf.expand_dims(query_segment_id, 2), tf.expand_dims(memory_segment_id, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1278": {
                "x": {
                    "value": "tf.less(attention_bias, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_1309": {
                "input": {
                    "value": "target_pos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cumsum(in_target, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_1310": {
                "x": {
                    "value": "illegal_connections",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.greater(tf.expand_dims(target_pos, 1), tf.expand_dims(target_pos, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "range_1325": {},
            "expand_dims_1326": {
                "input": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ],
                        [
                            "tf.range(shape[axis])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1426": {
                "values": {
                    "value": "[[-1], common_layers.shape_list(x)[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_1496": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1526": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows, q_cols, m_rows, m_cols, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1527": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2, 4, 5]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1528": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows * m_rows, q_cols * m_cols, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1533": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1536": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 3, 2, 5, 6, 7]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_1537": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1610": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention_sparse",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[query_antecedent, memory_antecedent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1685": {
                "variable": {
                    "value": "q_coordinate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(q_dispatcher.length_coordinate(), 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1687": {
                "variable": {
                    "value": "m_coordinate",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.expand_dims(m_dispatcher.length_coordinate(), 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1720": {
                "x": {
                    "value": "batch * length_q",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1721": {
                "x": {
                    "value": "batch * length_kv",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_1830": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_1845": {
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_1881": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_1889": {
                "variable": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(dispatched_q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "_relative_attention_inner(q, k, relations_keys, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(logits, [common_layers.shape_list(logits)[0], num_head, common_layers.shape_list(logits)[2], block_length ** 2])",
                            "Call"
                        ],
                        [
                            "tf.matmul(q * scalar, k, transpose_b=True)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_1898": {
                "variable": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_vals[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_1925": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "shape_1950": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_1952": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_2006": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention_relative",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2187": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_self_attention_relative_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2355": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_unmasked_self_attention_relative_v2",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2425": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "within_local_attention_1d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_value_2430": {
                "variable": {
                    "value": "const",
                    "type": "Name",
                    "possible_values": []
                },
                "pylist": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_2450": {
                "tensor": {
                    "value": "attention_bias_lower_triangle(block_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, block_length, block_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2519": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "local_attention_1d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_value_2524": {
                "variable": {
                    "value": "const",
                    "type": "Name",
                    "possible_values": []
                },
                "pylist": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "where_2531": {
                "variable": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(length, block_length * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "div_2546": {
                "variable": {
                    "value": "num_blocks",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_2659": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "masked_relative_local_attention_1d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                },
                "reuse": {
                    "value": "tf.AUTO_REUSE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_2671": {
                "variable": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.less(length, block_length * 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "block_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "int(const)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "length if length < block_length * 2 else block_length",
                            "IfExp"
                        ],
                        [
                            "tf.where(tf.less(length, block_length * 2), length, block_length)",
                            "Call"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "128",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_2735": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2736": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch * x_shape[2], heads, x_shape[3], x_shape[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_2767": {
                "tensor": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(mask, all_logits)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, block_length, local_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_2779": {
                "variable": {
                    "value": "(weights_for_unmasked, weights_for_masked)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2800": {
                "variable": {
                    "value": "rel_weights",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[rel_weights_unmasked, rel_weights_masked]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_2806": {
                "variable": {
                    "value": "value_rel_embeddings",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[value_rel_embeddings_unmasked, value_rel_embeddings_masked]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "value_rel_embeddings_concat_axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "variable_scope_2860": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "local_self_attention_1d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_2971": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dilated_self_attention_1d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_3103": {
                "variable": {
                    "value": "x_new",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, block_length, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_3137": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "masked_dilated_self_attention_1d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_3255": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "local_self_attention_2d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3336": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x_shape[0], x_shape[1], -1, x_shape[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_3354": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_3388": {
                "values": {
                    "value": "[tf.ones([np.prod(query_shape), memory_flange[1]]), split_query_masks[i], tf.zeros([np.prod(query_shape), memory_flange[1]])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_3499": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "right_shift_blockwise",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_3551": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "local_masked_self_attention_2d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_3568": {
                "variable": {
                    "value": "k_new",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[k_flange, k_center]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_3569": {
                "variable": {
                    "value": "v_new",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[v_flange, v_center]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_3578": {
                "variable": {
                    "value": "padding_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding_to_padding(k_flange) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_3580": {
                "variable": {
                    "value": "padding_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "padding_mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.expand_dims(embedding_to_padding(k_flange) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.tile(padding_mask, [1, 1, 1, query_elements, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 1, 1, query_elements, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_3592": {
                "variable": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[padding_mask, center_attention_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_3650": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention_2d",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[query_antecedent, memory_antecedent]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_3703": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "feedforward_self_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_3710": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.dense(x, filter_depth * 3, use_bias=False, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(combined, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_3711": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.dense(x, filter_depth * 3, use_bias=False, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(combined, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_3713": {
                "variable": {
                    "value": "q",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "common_layers.dense(x, filter_depth, use_bias=False, name='q_transform')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_3717": {
                "variable": {
                    "value": "kv_combined",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "common_layers.dense(tf.concat([x, x], axis=1), filter_depth, use_bias=False, name='kv_transform')",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_3724": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "kv_combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(common_layers.dense(tf.concat([x, x], axis=1), filter_depth, use_bias=False, name='kv_transform'), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[x_shape[1], x_shape[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_3770": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "parameter_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_3793": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                },
                "noise_shape": {
                    "value": "[num_heads, memory_rows, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_3829": {
                "input": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_layers, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_3830": {
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_layers, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_3830": {
                "tensor": {
                    "value": "r",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ],
                        [
                            "tf.range(shape[axis])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "r_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(axis, tf.size(shape), on_value=-1, off_value=1, dtype=tf.int32)",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_3875": {
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_3905": {
                "variable": {
                    "value": "bias_past",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "attention_bias_lower_triangle(length)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3912": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_3927": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_3929": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.zeros(shape=[0, depth], dtype=tf.float32, name='empty_out'), lambda : length_not_null(x, batch_coordinate))",
                            "Call"
                        ],
                        [
                            "expert_utils.map_ids(x, batch_coordinate, mask_and_call_attention)",
                            "Call"
                        ],
                        [
                            "mask_and_call_attention(x)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(out, 0)",
                            "Call"
                        ],
                        [
                            "tf.stack(out_unpacked)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_3935": {
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_3976": {
                "name_or_scope": {
                    "value": "local_expert_attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_4019": {
                "input": {
                    "value": "t",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "logical_or_4045": {
                "x": {
                    "value": "tf.equal(length_q, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.equal(length_k, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "map_fn_4139": {
                "fn": {
                    "value": "fn",
                    "type": "Name",
                    "possible_values": []
                },
                "elems": {
                    "value": "elems",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "unstack_4140": {
                "value": {
                    "value": "e",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "scalar_4273": {
                "name": {
                    "value": "dispatch_capacity",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "capacity",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nb_elems_to_dispatch // nb_buckets * 2",
                            "BinOp"
                        ],
                        [
                            "tf.minimum(length, capacity)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "lsh",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_4280": {
                "name": {
                    "value": "prefix + '_min'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "family": {
                    "value": "lsh",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_4281": {
                "name": {
                    "value": "prefix + '_max'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "family": {
                    "value": "lsh",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "histogram_4282": {
                "name": {
                    "value": "prefix + 'capacity_distribution'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "family": {
                    "value": "lsh",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_4390": {
                "variable": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lsh.get_gates(single_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.stack(list_gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [nb_heads, batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.transpose(gates, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.maximum(gates, tf.reshape(tf.one_hot([0], length), [1, 1, length, 1]))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, length, nb_buckets]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_4401": {
                "variable": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lsh.get_gates(single_x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.stack(list_gates)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gates, [nb_heads, batch_size, length, nb_buckets])",
                            "Call"
                        ],
                        [
                            "tf.transpose(gates, [1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.maximum(gates, tf.reshape(tf.one_hot([0], length), [1, 1, length, 1]))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.reshape(tf.one_hot([0], length), [1, 1, length, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_4519": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_4520": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_4618": {
                "x": {
                    "value": "memory_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "local_reduction_attention(x, factor, multihead_params)",
                            "Call"
                        ],
                        [
                            "conv_elems_1d(x, factor)",
                            "Call"
                        ],
                        [
                            "memory_x * tf.nn.sigmoid(memory_x)",
                            "BinOp"
                        ],
                        [
                            "tf.concat([x[:, :1, :], memory_x], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_4675": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "scaled_dot_product_attention_simple",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_4685": {
                "a": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_4793": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_4800": {
                "variable": {
                    "value": "wqkv",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "wqkv",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_heads, 1, io_size, 3 * head_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=io_size ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_4803": {
                "variable": {
                    "value": "wo",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "wo",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "[num_heads, 1, head_size, io_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(stddev=(head_size * num_heads) ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "range_756": {},
            "sin_764": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_764": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_912": {
                "x": {
                    "value": "num_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_916": {
                "x": {
                    "value": "position",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length) + start_index)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_917": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_918": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_918": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_961": {
                "x": {
                    "value": "num_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "range_966": {},
            "expand_dims_967": {
                "input": {
                    "value": "inv_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ],
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_995": {
                "name": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'c'",
                            "MethodArgument"
                        ],
                        [
                            "'multihead_attention'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[max_length, depth]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "slice_1039": {
                "input_": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "start",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_start[:]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "base_size[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "get_variable_1058": {
                "name": {
                    "value": "adj_vectors",
                    "type": "Constant",
                    "possible_values": []
                },
                "shape": {
                    "value": "att_adj_vectors_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_edge_types, depth]",
                            "List"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_normal_initializer(0, depth ** (-0.5))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_1070": {
                "tensor": {
                    "value": "tf.to_float(adjacency_matrix_one_hot)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, num_edge_types]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1104": {
                "name_or_scope": {
                    "value": "lsh_gating",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_1145": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "self.t_group",
                    "type": "Attribute",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "not_equal_1244": {
                "x": {
                    "value": "tf.expand_dims(query_segment_id, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.expand_dims(memory_segment_id, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "less_1278": {
                "x": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedding_to_padding(k_new) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedding_to_padding(k_windows) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([masked_attention_bias, padding_attention_bias], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(embedding_to_padding(k_new)) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([padding_mask, center_attention_bias], axis=4)",
                            "Call"
                        ],
                        [
                            "center_attention_bias",
                            "Name"
                        ]
                    ]
                },
                "y": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "minimum_1368": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.abs(bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_1377": {
                "x": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.minimum(1.0, bias)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_1480": {
                "a": {
                    "value": "_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "tf.transpose(split_last_dimension(_x, num_heads), [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "x",
                            "Name"
                        ],
                        [
                            "combine_last_two_dimensions(tf.transpose(_x, [0, 2, 1, 3]))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stop_gradient_1628": {
                "input": {
                    "value": "query_antecedent",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "stop_gradient_1636": {
                "input": {
                    "value": "memory_antecedent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "query_antecedent",
                            "Name"
                        ],
                        [
                            "kwargs.pop('memory_antecedent', x)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "greater_1654": {
                "x": {
                    "value": "m_pred_biased",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m_pred + m_bias",
                            "BinOp"
                        ],
                        [
                            "combine_first_two_dimensions(m_pred_biased)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_1657": {
                "tensor": {
                    "value": "tf.one_hot([0], length_kv)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, length_kv, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_1660": {
                "x": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "to_float_1663": {
                "x": {
                    "value": "num_groups",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "to_int32_1666": {
                "x": {
                    "value": "q_group_target_size * multiplicative_overhead + additive_overhead",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_int32_1670": {
                "x": {
                    "value": "m_group_target_size * multiplicative_overhead + additive_overhead",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1697": {
                "input_tensor": {
                    "value": "tf.stop_gradient(weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1729": {
                "input_tensor": {
                    "value": "tf.reduce_mean(q_pred_biased, axis=1) * q_group_deviation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1731": {
                "x": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(query_antecedent)[0]",
                            "Subscript"
                        ],
                        [
                            "x_shape[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_1733": {
                "input_tensor": {
                    "value": "tf.reduce_mean(m_pred_biased, axis=1) * m_group_deviation",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_1735": {
                "x": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(query_antecedent)[0]",
                            "Subscript"
                        ],
                        [
                            "x_shape[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "histogram_1750": {
                "name": {
                    "value": "q_group_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "q_group_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(q_requests, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1751": {
                "name": {
                    "value": "m_group_size",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "m_group_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(m_requests, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_1752": {
                "name": {
                    "value": "q_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "q_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss((q_total - q_pred_used) * tf.reduce_sum(q_gates, axis=2))",
                            "Call"
                        ],
                        [
                            "q_loss / tf.to_float(batch * length_q)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_1753": {
                "name": {
                    "value": "m_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "m_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.l2_loss(m_total - m_pred_used)",
                            "Call"
                        ],
                        [
                            "m_loss / tf.to_float(batch * length_kv)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_1754": {
                "name": {
                    "value": "q_balance_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "q_balance_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reduce_mean(q_pred_biased, axis=1) * q_group_deviation) / tf.to_float(batch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "scalar_1755": {
                "name": {
                    "value": "m_balance_loss",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "m_balance_loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.reduce_mean(m_pred_biased, axis=1) * m_group_deviation) / tf.to_float(batch)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "histogram_1756": {
                "name": {
                    "value": "m_pred_used",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "m_pred_used",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.exp(m_pred) * m_dispatcher.gates(), axis=2)",
                            "Call"
                        ],
                        [
                            "tf.log(m_pred_used + epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1757": {
                "name": {
                    "value": "m_total",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "m_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(tf.stop_gradient(weights), axis=2), -1)",
                            "Call"
                        ],
                        [
                            "m_dispatcher.combine(m_total)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(m_total, -1)",
                            "Call"
                        ],
                        [
                            "tf.log(m_total + epsilon)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1758": {
                "name": {
                    "value": "q_pred_used",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "q_pred_used",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(q_pred * q_dispatcher.gates(), axis=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "histogram_1759": {
                "name": {
                    "value": "q_total",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "q_total",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stop_gradient(logits[:, :, :, :1] - log_weights[:, :, :, :1])",
                            "Call"
                        ],
                        [
                            "q_dispatcher.combine(q_total)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(q_total, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_1764": {
                "variable": {
                    "value": "trunc_length_q",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "length_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(query_antecedent)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_1771": {
                "variable": {
                    "value": "grouping_mask",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q_gates_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_gates[:trunc_heads, :trunc_length_q, :]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "m_gates_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m_gates[:trunc_heads, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_1775": {
                "variable": {
                    "value": "logits_trunc",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "q_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q[:trunc_heads, :trunc_length_q, :]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "k_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kv[:trunc_heads, :, :depth_qk]",
                            "Subscript"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_1781": {
                "variable": {
                    "value": "att_trunc",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_trunc, k_trunc, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits_trunc + trunc_bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_1785": {
                "variable": {
                    "value": "att_trunc_hdr",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "att_trunc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits_trunc)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_1787": {
                "variable": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[att_trunc_hdr, mask_channel, mask_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1790": {
                "variable": {
                    "value": "att_per_group",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weights[:trunc_heads, 0, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_1909": {
                "input": {
                    "value": "range_vec",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(length)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_1910": {
                "a": {
                    "value": "range_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(tf.tile(range_vec, [length]), [length, length])",
                            "Call"
                        ]
                    ]
                }
            },
            "range_1912": {},
            "random_normal_initializer_2119": {
                "stddev": {
                    "value": "initializer_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "initializer_stddev * depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_normal_initializer_2295": {
                "stddev": {
                    "value": "initializer_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "initializer_stddev * depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_2760": {
                "a": {
                    "value": "rel_tail_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_reshape_for_relative(tail_q)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "rel_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "_reshape_for_relative(local_k)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_2868": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, -x_length % pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2871": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [pad_length, pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_2889": {
                "num_rows": {
                    "value": "full_filter_width",
                    "type": "Name",
                    "possible_values": [
                        [
                            "block_length + 2 * filter_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_2891": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_2897": {
                "x": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, block_length, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pad_2983": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, -x_length % pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_2986": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [pad_length, pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_3010": {
                "num_rows": {
                    "value": "memory_block_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_3012": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_3018": {
                "x": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, block_length, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_3105": {
                "a": {
                    "value": "x_new",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.gather(x, gather_indices)",
                            "Call"
                        ],
                        [
                            "tf.gather(x_t, indices)",
                            "Call"
                        ],
                        [
                            "get_shifted_center_blocks(x, x_indices)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 3, 0, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_3149": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, -x_length % pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_3152": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [left_pad_length, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_3177": {
                "num_rows": {
                    "value": "memory_block_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "128",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cast_3179": {
                "x": {
                    "value": "indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.range(0, length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(0, index_length, delta=1, name='index_range')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, -1, 1])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [-1, 1])",
                            "Call"
                        ],
                        [
                            "tf.range(x_shape[2] * x_shape[3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [1, x_shape[2], x_shape[3], 1])",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(tf.cast(indices, tf.float32), kernel, strides=[1, block_stride[0], block_stride[1], 1], padding='VALID')",
                            "Call"
                        ],
                        [
                            "tf.reshape(indices, [num_blocks, -1])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_3184": {
                "x": {
                    "value": "gather_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, block_length, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(tf.cast(indices, tf.float32), kernel, query_block_size, padding='VALID', name='gather_conv')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(tf.cast(gather_indices, tf.int32), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_3201": {
                "input": {
                    "value": "attention_bias_lower_triangle(query_block_size)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_prod_3323": {
                "input_tensor": {
                    "value": "x_shape[2:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_3399": {
                "shape": {
                    "value": "[np.prod(query_shape), (query_shape[1] + 2 * memory_flange[1]) * memory_flange[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_3403": {
                "values": {
                    "value": "mask_pieces",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[tf.concat([tf.ones([np.prod(query_shape), memory_flange[1]]), split_query_masks[i], tf.zeros([np.prod(query_shape), memory_flange[1]])], axis=1) for i in range(query_shape[0])]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pad_3481": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, 0], [0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "size_3825": {
                "input": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_layers, 1, 1, channels]",
                            "List"
                        ],
                        [
                            "base_shape[:]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Print_3876": {
                "input_": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[length]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'Expert {} empty: '.format(_expert_count)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_3936": {
                "shape": {
                    "value": "[0, depth]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "empty_out",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "equal_4045": {
                "x": {
                    "value": "length_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(k)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_4184": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_4280": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_4281": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "attention_type(q, k, v, **kwargs)",
                            "Call"
                        ],
                        [
                            "combine_heads(x)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.tensordot(x, o_var, axes=1)",
                            "Call"
                        ],
                        [
                            "quarternion_ffn_3d(x, output_depth, name='output_transfom', init=tf.random_normal_initializer(stddev=output_depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "quaternion_dot_product_attention(q, k, v, bias, dropout_rate, image_shapes, save_weights_to=save_weights_to, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "dot_product_attention_relative(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, cache=cache is not None)",
                            "Call"
                        ],
                        [
                            "dot_product_unmasked_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "dot_product_self_attention_relative_v2(q, k, v, bias, max_relative_position, dropout_rate, image_shapes, make_image_summary=make_image_summary, dropout_broadcast_dims=dropout_broadcast_dims, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values)",
                            "Call"
                        ],
                        [
                            "masked_within_block_local_attention_1d(q, k, v, block_length=block_length)",
                            "Call"
                        ],
                        [
                            "masked_relative_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary, dropout_rate=dropout_rate, heads_share_relative_embedding=heads_share_relative_embedding, add_relative_to_values=add_relative_to_values, name='masked_relative_local_attention_1d')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_1d(q, k, v, block_length=block_length, make_image_summary=make_image_summary)",
                            "Call"
                        ],
                        [
                            "local_attention_1d(q, k, v, block_length=block_length, filter_width=block_width)",
                            "Call"
                        ],
                        [
                            "masked_dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "dilated_self_attention_1d(q, k, v, block_length, block_width, gap_size, num_memory_blocks)",
                            "Call"
                        ],
                        [
                            "args[0]",
                            "Subscript"
                        ],
                        [
                            "x + tf.slice(var, start, size)",
                            "BinOp"
                        ],
                        [
                            "tf.split(x, 4, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.split(x, 4, axis=3)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [1, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, 1 + length, length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 1, 0], [-1, -1, -1, -1])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [1, 0], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch, heads, length, length + 1])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, length])",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, 0], [0, length - 1]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x_flat, [batch, heads, length, 2 * length])",
                            "Call"
                        ],
                        [
                            "tf.slice(x, [0, 0, 0, 1], [batch, heads, length, 2 * length - 1])",
                            "Call"
                        ],
                        [
                            "tf.concat([x, col_pad], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, [0, 2, 1, 3, 4])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [batch * x_shape[2], heads, x_shape[3], x_shape[4]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], x_shape[2] // memory_block_size, memory_block_size, x_shape[3]])",
                            "Call"
                        ],
                        [
                            "reshape_range(x, 2, 4, [tf.reduce_prod(x_shape[2:4])])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, axis=1)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(x, query_shape)",
                            "Call"
                        ],
                        [
                            "local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "combine_heads_2d(x)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "masked_local_attention_2d(q, k, v, query_shape=query_shape, memory_flange=memory_flange)",
                            "Call"
                        ],
                        [
                            "dot_product_attention(batch_q, batch_k, batch_v, bias, dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [x_shape[0], x_shape[1], filter_depth])",
                            "Call"
                        ],
                        [
                            "common_layers.dense(x, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [1, length, depth])",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, -1, depth])",
                            "Call"
                        ],
                        [
                            "x[0, ...]",
                            "Subscript"
                        ],
                        [
                            "tf.reduce_sum(x, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x, perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [nb_heads, batch_size * length, depth])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d_transpose(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.layers.conv2d(inputs=x, filters=out_depth, kernel_size=(1, factor), strides=(1, factor), padding='valid', data_format='channels_last')",
                            "Call"
                        ],
                        [
                            "tf.squeeze(x, 1)",
                            "Call"
                        ],
                        [
                            "tf.pad(x, [[0, 0], [0, 0], [0, -length_x % block_length], [0, 0]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [common_layers.shape_list(x)[0], num_head, common_layers.shape_list(x)[2] // block_length, block_length, depth])",
                            "Call"
                        ],
                        [
                            "tf.stop_gradient(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_vectors)",
                            "Call"
                        ],
                        [
                            "tf.sign(x)",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, self.t_group, transpose_b=True) / self.nb_hyperplanes",
                            "BinOp"
                        ],
                        [
                            "tf.argmax(x, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.one_hot(x, self.nb_buckets)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_4284": {
                "name": {
                    "value": "'{}_{}'.format(prefix, i)",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "x[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "family": {
                    "value": "lsh",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_4301": {
                "input": {
                    "value": "q_dispatcher.length_coordinate()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_4303": {
                "input": {
                    "value": "k_dispatcher.length_coordinate()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_4304": {
                "x": {
                    "value": "tf.greater(k_coordinate, q_coordinate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_4639": {
                "x": {
                    "value": "tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_4677": {
                "x": {
                    "value": "common_layers.shape_list(q)[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "image_4683": {
                "name": {
                    "value": "attention",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.expand_dims(tf.pow(weights, 0.2), 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_4736": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.layer_norm_compute(x, epsilon, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_norm_compute(x, epsilon, norm_scale, norm_bias)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "wqkv_split[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_4737": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.dense(x, filter_depth * 3, use_bias=False, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(combined, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_63": {
                "stddev": {
                    "value": "initializer_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "initializer_stddev * depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "random_normal_initializer_69": {
                "stddev": {
                    "value": "initializer_stddev",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "initializer_stddev * depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "input_depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "depth ** (-0.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "concat_268": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['k'], k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_269": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[cache['v'], v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_276": {
                "variable": {
                    "value": "tmp_k",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "cache['k']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_279": {
                "variable": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tmp_k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(cache['k'], perm=[2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "inplace_ops.alias_inplace_update(tmp_k, decode_loop_step, tf.squeeze(k, axis=2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_280": {
                "variable": {
                    "value": "tmp_v",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "cache['v']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[2, 0, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_283": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "tmp_v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(cache['v'], perm=[2, 0, 1, 3])",
                            "Call"
                        ],
                        [
                            "inplace_ops.alias_inplace_update(tmp_v, decode_loop_step, tf.squeeze(v, axis=2))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[1, 2, 0, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_760": {
                "x": {
                    "value": "num_timescales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // 2",
                            "BinOp"
                        ],
                        [
                            "channels // (num_dims * 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_762": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_765": {
                "x1": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_829": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "channels ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_914": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_919": {
                "x1": {
                    "value": "channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[-1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_963": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_969": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_969": {
                "x": {
                    "value": "scaled_time",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(position), 2) * tf.expand_dims(tf.expand_dims(inv_timescales, 0), 0)",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_999": {
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "max_length",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "expand_dims_1002": {
                "input": {
                    "value": "sliced",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.cond(tf.less(length, max_length), lambda : tf.slice(var, [0, 0], [length, -1]), lambda : tf.pad(var, [[0, pad_length], [0, 0]]))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gather_1004": {
                "params": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.to_int32(positions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_1070": {
                "x": {
                    "value": "adjacency_matrix_one_hot",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.one_hot(adjacency_matrix, num_edge_types)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_1245": {
                "input": {
                    "value": "query_segment_id",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1246": {
                "input": {
                    "value": "memory_segment_id",
                    "type": "Name",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_1327": {
                "x": {
                    "value": "1 + tf.abs(diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_1368": {
                "x": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "minimum_1377": {
                "x": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "y": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(illegal_connections) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, 1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((m_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "bias + tf.to_float(tf.greater(k_coordinate, q_coordinate)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "common_layers.cast_like(bias, logits)",
                            "Call"
                        ],
                        [
                            "(1.0 - good_part) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "add_or_set_if(bias, bias_past, mask_right)",
                            "Call"
                        ],
                        [
                            "add_or_set_if(bias, bias_batch, not split_batch)",
                            "Call"
                        ],
                        [
                            "tf.reshape(bias, [1, 1, length, length])",
                            "Call"
                        ],
                        [
                            "attention_bias_coordinates(info_q.coordinates, info_k.coordinates)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims((k_dispatcher.nonpadding() - 1.0) * 1000000000.0, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.greater(construct_bias_vectors(memory_x, 0) * factor, construct_bias_vectors(x, 1) + 0.001)) * -1000000000.0",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(bias, axis=0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "tf.squeeze(bias, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mod_1520": {
                "x1": {
                    "value": "-num_heads",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "x2": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_1657": {
                "indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "length_kv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(memory_antecedent)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "to_float_1662": {
                "x": {
                    "value": "length_kv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(memory_antecedent)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_1686": {
                "input": {
                    "value": "q_dispatcher.length_coordinate()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1688": {
                "input": {
                    "value": "m_dispatcher.length_coordinate()",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_1689": {
                "x": {
                    "value": "tf.greater(m_coordinate, q_coordinate)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1697": {
                "input": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_1711": {
                "x": {
                    "value": "m_pred",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.dense(tf.stop_gradient(memory_antecedent), num_heads * num_groups, use_bias=False, name='m_pred')",
                            "Call"
                        ],
                        [
                            "split_heads(m_pred, num_heads)",
                            "Call"
                        ],
                        [
                            "combine_first_two_dimensions(m_pred)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1718": {
                "input_tensor": {
                    "value": "q_gates",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_dispatcher.gates()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1779": {
                "variable": {
                    "value": "trunc_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "(1.0 - band) * -1000000000.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "scalar_1784": {
                "name": {
                    "value": "coverage",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "mask_coverage",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_sum(grouping_mask * att_trunc) / (tf.to_float(trunc_length_q) * trunc_heads)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "image_1788": {
                "name": {
                    "value": "att",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(attn, [0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.pow(image, 0.2)",
                            "Call"
                        ],
                        [
                            "tf.pad(image, [[0, 0], [0, 0], [0, 0], [0, tf.mod(-num_heads, 3)]])",
                            "Call"
                        ],
                        [
                            "split_last_dimension(image, 3)",
                            "Call"
                        ],
                        [
                            "tf.reduce_max(image, 4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, m_rows, m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 3, 2, 4, 5])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows, q_cols * m_cols, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows, q_cols, q_channnels, m_rows, m_cols, m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.transpose(image, [0, 1, 4, 3, 2, 5, 6, 7])",
                            "Call"
                        ],
                        [
                            "tf.reshape(image, [-1, q_rows * m_rows * q_channnels, q_cols * m_cols * m_channels, 3])",
                            "Call"
                        ],
                        [
                            "tf.stack([att_trunc_hdr, mask_channel, mask_channel], axis=3)",
                            "Call"
                        ]
                    ]
                },
                "max_outputs": {
                    "value": "trunc_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(4, num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "image_1791": {
                "name": {
                    "value": "att_per_group_%d",
                    "type": "Constant",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.pow(att_per_group, 0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "trunc_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "min(4, num_heads)",
                            "Call"
                        ]
                    ]
                }
            },
            "less_2532": {
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "block_length * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "less_2672": {
                "x": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "block_length * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_3280": {
                "x": {
                    "value": "embedding_to_padding(k_new)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_3390": {
                "shape": {
                    "value": "[np.prod(query_shape), memory_flange[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_3392": {
                "shape": {
                    "value": "[np.prod(query_shape), memory_flange[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_3778": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "output_depth ** (-0.5) * num_heads ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_3783": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "output_depth ** (-0.5) * output_depth ** 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_4304": {
                "x": {
                    "value": "k_coordinate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.expand_dims(k_dispatcher.length_coordinate(), 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_coordinate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.expand_dims(q_dispatcher.length_coordinate(), 3))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.expand_dims(q_dispatcher.length_coordinate(), 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_4402": {
                "tensor": {
                    "value": "tf.one_hot([0], length)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, length, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_4640": {
                "x": {
                    "value": "construct_bias_vectors(memory_x, 0) * factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "construct_bias_vectors(x, 1) + 0.001",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_4684": {
                "input": {
                    "value": "tf.pow(weights, 0.2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_4735": {
                "control_inputs": {
                    "value": "[y] if h > 0 else []",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "conv1d_4739": {
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.combine(o)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o, [batch, num_heads, length_q, depth_v])",
                            "Call"
                        ],
                        [
                            "combine_heads(o)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(o, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v_vals[i])",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention_simple(q, k, v, attention_bias)",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention_simple(q, k, v, attention_bias)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "wo_split[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unstack_4755": {
                "variable": {
                    "value": "wqkv_split",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "wqkv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('wqkv', [num_heads, 1, io_size, 3 * head_size], initializer=tf.random_normal_initializer(stddev=io_size ** (-0.5)))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(attn)[1]",
                            "Subscript"
                        ],
                        [
                            "k_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unstack_4756": {
                "variable": {
                    "value": "wo_split",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "wo",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable('wo', [num_heads, 1, head_size, io_size], initializer=tf.random_normal_initializer(stddev=(head_size * num_heads) ** (-0.5)))",
                            "Call"
                        ]
                    ]
                },
                "num": {
                    "value": "num_heads",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(attn)[1]",
                            "Subscript"
                        ],
                        [
                            "k_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ],
                        [
                            "v_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "stack_4775": {
                "variable": {
                    "value": "dwqkv",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "dwqkvs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_4776": {
                "variable": {
                    "value": "dwo",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "dwos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "random_normal_initializer_392": {
                "stddev": {
                    "value": "output_depth ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_762": {},
            "range_914": {},
            "range_963": {},
            "slice_1000": {
                "input_": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[length, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_1001": {
                "tensor": {
                    "value": "var",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.get_variable(name, [input_depth, vars_3d_num_heads, total_depth // vars_3d_num_heads], initializer=tf.random_normal_initializer(stddev=initializer_stddev))",
                            "Call"
                        ],
                        [
                            "tf.cast(var, antecedent.dtype)",
                            "Call"
                        ],
                        [
                            "tf.reshape(var, [input_depth, total_depth])",
                            "Call"
                        ],
                        [
                            "tf.cast(tf.get_variable(name, [max_length, depth]), x.dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_%d' % i, shape, initializer=tf.random_normal_initializer(0, depth ** (-0.5)))",
                            "Call"
                        ],
                        [
                            "var * depth ** 0.5",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, pad_length], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int32_1004": {
                "x": {
                    "value": "positions",
                    "type": "Name",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_1037": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "depth ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_1061": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "depth ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "greater_1689": {
                "x": {
                    "value": "m_coordinate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.expand_dims(m_dispatcher.length_coordinate(), 2))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "q_coordinate",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.to_float(tf.expand_dims(q_dispatcher.length_coordinate(), 3))",
                            "Call"
                        ],
                        [
                            "tf.to_float(tf.expand_dims(q_dispatcher.length_coordinate(), 3))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1730": {
                "input_tensor": {
                    "value": "q_pred_biased",
                    "type": "Name",
                    "possible_values": [
                        [
                            "q_pred + q_bias",
                            "BinOp"
                        ],
                        [
                            "combine_first_two_dimensions(q_pred_biased)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_1734": {
                "input_tensor": {
                    "value": "m_pred_biased",
                    "type": "Name",
                    "possible_values": [
                        [
                            "m_pred + m_bias",
                            "BinOp"
                        ],
                        [
                            "combine_first_two_dimensions(m_pred_biased)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_1782": {
                "input_tensor": {
                    "value": "grouping_mask * att_trunc",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_1786": {
                "x": {
                    "value": "att_trunc_hdr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.pow(att_trunc, 0.2)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_1793": {
                "x": {
                    "value": "att_per_group",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(weights[:trunc_heads, 0, :, :], -1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "get_variable_scope_2031": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "concat_3719": {
                "values": {
                    "value": "[x, x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_4402": {
                "indices": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "depth": {
                    "value": "length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[dim + 1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "length + padding_size",
                            "BinOp"
                        ],
                        [
                            "x_shape[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(q)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(k)[2]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(batch_coordinate)[0]",
                            "Subscript"
                        ],
                        [
                            "tf.cond(tf.equal(length, 0), lambda : tf.Print(length, [length], 'Expert {} empty: '.format(_expert_count)), lambda : length)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(gates)[1]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(x)[2]",
                            "Subscript"
                        ],
                        [
                            "tf.to_float(common_layers.shape_list(t)[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_4684": {
                "x": {
                    "value": "weights",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(log_weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1.0 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(all_logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "common_layers.dropout_with_broadcast_dims(weights, 1.0 - dropout_rate, broadcast_dims=None)",
                            "Call"
                        ],
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(weights)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, [common_layers.shape_list(weights)[0], num_head, common_layers.shape_list(weights)[2], block_length, block_length])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weights, axis=3, keep_dims=True)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "control_dependencies_4753": {
                "control_inputs": {
                    "value": "[dy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gradients_4778": {
                "variable": {
                    "value": "(dx, dnorm_scale, dnorm_bias)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[x, norm_scale, norm_bias]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[dn]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_4802": {
                "stddev": {
                    "value": "io_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_4805": {
                "stddev": {
                    "value": "(head_size * num_heads) ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_278": {
                "input": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_key_depth, kv_filter_width, kv_padding, 'k', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['k_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "tf.pad(k, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(k, [batch, heads, num_blocks, block_length, depth_k])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(k, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(k, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(k, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(k, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(k, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('k', var_shape_k, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * num_heads ** 0.5))",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(k)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(k)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_282": {
                "input": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": [
                        [
                            "compute_attention_component(memory_antecedent, total_value_depth, kv_filter_width, kv_padding, 'v', vars_3d_num_heads=vars_3d_num_heads)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "cache['v_encdec']",
                            "Subscript"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "tf.pad(v, padding)",
                            "Call"
                        ],
                        [
                            "tf.reshape(v, [batch, heads, num_blocks, block_length, depth_v])",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, block_length)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, filter_width)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l_and_r(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple(v, query_block_size)",
                            "Call"
                        ],
                        [
                            "pad_l(v, k_v_padding)",
                            "Call"
                        ],
                        [
                            "pad_to_multiple_2d(v, query_shape)",
                            "Call"
                        ],
                        [
                            "tf.pad(v, paddings)",
                            "Call"
                        ],
                        [
                            "split_heads_2d(v, num_heads)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('v', var_shape_v, initializer=tf.random_normal_initializer(0, output_depth ** (-0.5) * output_depth ** 0.5))",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(v, 1.0 - dropout_rate, noise_shape=[num_heads, memory_rows, 1])",
                            "Call"
                        ],
                        [
                            "flatten_first_dims(v)",
                            "Call"
                        ],
                        [
                            "k_dispatcher.dispatch(v)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_1327": {
                "x": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(r, 0) - tf.expand_dims(r, 1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_1783": {
                "x": {
                    "value": "trunc_length_q",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.minimum(length_q, 512)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv1d_4763": {
                "variable": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.layer_norm_compute(x, epsilon, norm_scale, norm_bias)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_norm_compute(x, epsilon, norm_scale, norm_bias)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "wqkv_split[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_4764": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.dense(x, filter_depth * 3, use_bias=False, name='qkv_transform')",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(combined, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv1d(n, wqkv_split[h], 1, 'SAME')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv1d_4766": {
                "variable": {
                    "value": "partial_y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "o",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(weights, v)",
                            "Call"
                        ],
                        [
                            "q_dispatcher.combine(o)",
                            "Call"
                        ],
                        [
                            "tf.reshape(o, [batch, num_heads, length_q, depth_v])",
                            "Call"
                        ],
                        [
                            "combine_heads(o)",
                            "Call"
                        ],
                        [
                            "common_layers.dense(o, output_depth, use_bias=False, name='output_transform')",
                            "Call"
                        ],
                        [
                            "tf.matmul(weights, v_vals[i])",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention_simple(q, k, v, attention_bias)",
                            "Call"
                        ],
                        [
                            "scaled_dot_product_attention_simple(q, k, v, attention_bias)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "wo_split[h]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "gradients_4767": {
                "variable": {
                    "value": "(pdn, dwqkvh, dwoh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "ys": {
                    "value": "[partial_y]",
                    "type": "List",
                    "possible_values": []
                },
                "xs": {
                    "value": "[n, wqkv_split[h], wo_split[h]]",
                    "type": "List",
                    "possible_values": []
                },
                "grad_ys": {
                    "value": "[dy]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_4777": {
                "control_inputs": {
                    "value": "deps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[dn, dwqkvh, dwoh]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_like_4780": {
                "input": {
                    "value": "attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.expand_dims(embedding_to_padding(k_new) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(embedding_to_padding(k_windows) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([masked_attention_bias, padding_attention_bias], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.to_float(embedding_to_padding(k_new)) * -1000000000.0, axis=-2)",
                            "Call"
                        ],
                        [
                            "tf.concat([padding_mask, center_attention_bias], axis=4)",
                            "Call"
                        ],
                        [
                            "center_attention_bias",
                            "Name"
                        ]
                    ]
                }
            },
            "control_dependencies_4762": {
                "control_inputs": {
                    "value": "deps",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[dn, dwqkvh, dwoh]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "layers/quaternion_transformer.py": {
        "tensorflow": {
            "reshape_80": {
                "variable": {
                    "value": "emb_target_space",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "emb_target_space",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.embedding(target_space, 32, ishape_static[-1], name='target_space_embedding', dtype=tf.bfloat16 if hparams.activation_dtype == 'bfloat16' else tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.reshape(emb_target_space, [1, 1, -1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cast_93": {
                "variable": {
                    "value": "encoder_self_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_self_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_attention.attention_bias_same_segment(inputs_segmentation, inputs_segmentation)",
                            "Call"
                        ],
                        [
                            "ignore_padding",
                            "Name"
                        ],
                        [
                            "encoder_self_attention_bias + common_attention.attention_bias_proximal(common_layers.shape_list(inputs)[1])",
                            "BinOp"
                        ],
                        [
                            "tf.cast(encoder_self_attention_bias, tf.bfloat16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_95": {
                "variable": {
                    "value": "encoder_decoder_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_decoder_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_attention.attention_bias_same_segment(targets_segmentation, inputs_segmentation)",
                            "Call"
                        ],
                        [
                            "ignore_padding",
                            "Name"
                        ],
                        [
                            "tf.cast(encoder_decoder_attention_bias, tf.bfloat16)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'encoder'",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_310": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_input",
                            "Name"
                        ],
                        [
                            "common_layers.layer_postprocess(x, y, hparams)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_postprocess(x, y, hparams)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([[-1], original_shape[2:]], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad_remover.remove(x), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([[-1], original_shape[2:]], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad_remover.remove(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], original_shape[2:]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_311": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_remover.remove(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_320": {
                "variable": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pad_remover.restore(tf.squeeze(conv_output, axis=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "original_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_343": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "encoder_input",
                            "Name"
                        ],
                        [
                            "common_layers.layer_postprocess(x, y, hparams)",
                            "Call"
                        ],
                        [
                            "common_layers.layer_postprocess(x, y, hparams)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([[-1], original_shape[2:]], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad_remover.remove(x), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, tf.concat([[-1], original_shape[2:]], axis=0))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(pad_remover.remove(x), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.concat([[-1], original_shape[2:]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_344": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "pad_remover.remove(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_353": {
                "variable": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pad_remover.restore(tf.squeeze(conv_output, axis=0))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "original_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(x)",
                            "Call"
                        ],
                        [
                            "common_layers.shape_list(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_166": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_310": {
                "values": {
                    "value": "[[-1], original_shape[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_167": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_190": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_321": {
                "input": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quaternion_dense_relu_dense(x, hparams.filter_size, hparams.hidden_size, dropout=hparams.relu_dropout, dropout_broadcast_dims=relu_dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(conv_output, axis=0)), original_shape)",
                            "Call"
                        ],
                        [
                            "common_layers.dense_relu_dense(x, hparams.filter_size, hparams.hidden_size, dropout=hparams.relu_dropout, dropout_broadcast_dims=relu_dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(conv_output, axis=0)), original_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_343": {
                "values": {
                    "value": "[[-1], original_shape[2:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_354": {
                "input": {
                    "value": "conv_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "quaternion_dense_relu_dense(x, hparams.filter_size, hparams.hidden_size, dropout=hparams.relu_dropout, dropout_broadcast_dims=relu_dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(conv_output, axis=0)), original_shape)",
                            "Call"
                        ],
                        [
                            "common_layers.dense_relu_dense(x, hparams.filter_size, hparams.hidden_size, dropout=hparams.relu_dropout, dropout_broadcast_dims=relu_dropout_broadcast_dims)",
                            "Call"
                        ],
                        [
                            "tf.reshape(pad_remover.restore(tf.squeeze(conv_output, axis=0)), original_shape)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/quaternion.py": {
        "tensorflow": {
            "dropout_96": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(encoder_input, 1.0 - hparams.layer_prepostprocess_dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(encoder_input, 1.0 - hparams.layer_prepostprocess_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - hparams.layer_prepostprocess_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "dropout_145": {
                "variable": {
                    "value": "decoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shift_right_3d(targets)",
                            "Call"
                        ],
                        [
                            "common_attention.add_timing_signal_1d_given_position(decoder_input, targets_position)",
                            "Call"
                        ],
                        [
                            "common_attention.add_timing_signal_1d(decoder_input)",
                            "Call"
                        ],
                        [
                            "common_attention.add_positional_embedding(decoder_input, hparams.max_length, 'targets_positional_embedding', targets_position)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(decoder_input, 1.0 - hparams.layer_prepostprocess_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - hparams.layer_prepostprocess_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_217": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoder_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, decoder_self_attention_bias, encoder_decoder_attention_bias, hparams, cache=cache, decode_loop_step=decode_loop_step, nonpadding=nonpadding, save_weights_to=self.attention_weights, losses=losses)",
                            "Call"
                        ],
                        [
                            "self.decode(decoder_input, encoder_output, encoder_decoder_attention_bias, decoder_self_attention_bias, hparams, nonpadding=features_to_nonpadding(features, 'targets'), losses=losses)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "targets_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(targets)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_861": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, decode_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_862": {
                "variable": {
                    "value": "hit_eos",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_864": {
                "variable": {
                    "value": "initial_log_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_869": {
                "variable": {
                    "value": "(_, _, _, decoded_ids, _, log_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "is_not_finished",
                    "type": "Name",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), hit_eos, next_id, decoded_ids, cache, initial_log_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([batch_size]), tf.TensorShape([batch_size, 1]), tf.TensorShape([batch_size, decode_length]), nest.map_structure(compute_cache_shape_invariants, cache), tf.TensorShape([batch_size])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_1041": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_1042": {
                "variable": {
                    "value": "hit_eos",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_1044": {
                "variable": {
                    "value": "initial_log_prob",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_1045": {
                "variable": {
                    "value": "(_, _, _, decoded_ids, cache, log_prob)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "is_not_finished",
                    "type": "Name",
                    "possible_values": []
                },
                "body": {
                    "value": "inner_loop",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[tf.constant(0), hit_eos, next_id, decoded_ids, cache, initial_log_prob]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), tf.TensorShape([None]), tf.TensorShape([None, None]), tf.TensorShape([None, None]), nest.map_structure(beam_search.get_state_shape_invariants, cache), tf.TensorShape([None])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_1078": {
                "variable": {
                    "value": "encoder_input",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.nn.dropout(encoder_input, 1.0 - hparams.layer_prepostprocess_dropout)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(encoder_input, 1.0 - hparams.layer_prepostprocess_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - hparams.layer_prepostprocess_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_1085": {
                "variable": {
                    "value": "encoder_output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "encoder_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer_encoder(encoder_input, self_attention_bias, hparams, nonpadding=features_to_nonpadding(features, 'inputs'), save_weights_to=self.attention_weights, make_image_summary=not common_layers.is_xla_compiled(), losses=losses)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "encoder_output[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "encoder_output[0]",
                            "Subscript"
                        ],
                        [
                            "transformer_encoder(encoder_input, encoder_self_attention_bias, hparams, nonpadding=features_to_nonpadding(features, 'inputs'))",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(encoder_output, 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_1150": {
                "variable": {
                    "value": "decoder_self_attention_bias",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_self_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_attention.attention_bias_ignore_padding(decoder_padding)",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_prepend_inputs_full_attention(common_attention.embedding_to_padding(targets))",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_lower_triangle(common_layers.shape_list(targets)[1])",
                            "Call"
                        ],
                        [
                            "decoder_self_attention_bias + common_attention.attention_bias_proximal(decode_length)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(decoder_self_attention_bias, tf.bfloat16)",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_lower_triangle(decode_length)",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_lower_triangle(decode_length)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.bfloat16",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_346": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_351": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[s[0] * s[1], s[2], s[3], s[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_380": {
                "variable": {
                    "value": "partial_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "partial_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features.get('inputs')",
                            "Call"
                        ],
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.expand_squeeze_to_nd(partial_targets, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(partial_targets)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "features.get('inputs')",
                            "Call"
                        ],
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.expand_squeeze_to_nd(partial_targets, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(partial_targets)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "cond_419": {
                "variable": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros_like(targets)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : targets",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_451": {
                "input": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, -1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_455": {
                "variable": {
                    "value": "bias",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "decoder_self_attention_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_attention.attention_bias_ignore_padding(decoder_padding)",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_prepend_inputs_full_attention(common_attention.embedding_to_padding(targets))",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_lower_triangle(common_layers.shape_list(targets)[1])",
                            "Call"
                        ],
                        [
                            "decoder_self_attention_bias + common_attention.attention_bias_proximal(decode_length)",
                            "BinOp"
                        ],
                        [
                            "tf.cast(decoder_self_attention_bias, tf.bfloat16)",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_lower_triangle(decode_length)",
                            "Call"
                        ],
                        [
                            "common_attention.attention_bias_lower_triangle(decode_length)",
                            "Call"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, 0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[bias_shape[0], bias_shape[1], 1, bias_shape[3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_473": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_modality.top_sharded(body_outputs, None, dp)[0]",
                            "Subscript"
                        ],
                        [
                            "target_modality.top_sharded(body_outputs, None, dp)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_563": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_568": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[s[0] * s[1], s[2], s[3], s[4]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_597": {
                "variable": {
                    "value": "partial_targets",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "partial_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features.get('inputs')",
                            "Call"
                        ],
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.expand_squeeze_to_nd(partial_targets, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(partial_targets)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "features.get('inputs')",
                            "Call"
                        ],
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.expand_squeeze_to_nd(partial_targets, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(partial_targets)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "cond_636": {
                "variable": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.equal(i, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "lambda : tf.zeros_like(targets)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : targets",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_652": {
                "input": {
                    "value": "ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ids[:, -1:]",
                            "Subscript"
                        ],
                        [
                            "ids[:, -1:]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "squeeze_671": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target_modality.top_sharded(body_outputs, None, dp)[0]",
                            "Subscript"
                        ],
                        [
                            "target_modality.top_sharded(body_outputs, None, dp)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_844": {
                "variable": {
                    "value": "log_prob_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(tf.to_int64(batch_size)), next_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_848": {
                "variable": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_849": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, decode_length], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "decoded_ids[:, :top_beams, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(decoded_ids)",
                            "Call"
                        ],
                        [
                            "inplace_ops.alias_inplace_update(decoded_ids, i, tf.squeeze(next_id, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(decoded_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, 0], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "decoded_ids[:, :top_beams, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([decoded_ids, next_id], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_852": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.zeros([batch_size, decode_length], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "decoded_ids[:, :top_beams, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.transpose(decoded_ids)",
                            "Call"
                        ],
                        [
                            "inplace_ops.alias_inplace_update(decoded_ids, i, tf.squeeze(next_id, axis=1))",
                            "Call"
                        ],
                        [
                            "tf.transpose(decoded_ids)",
                            "Call"
                        ],
                        [
                            "tf.zeros([batch_size, 0], dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "decoded_ids[:, 0, 1:]",
                            "Subscript"
                        ],
                        [
                            "decoded_ids[:, :top_beams, 1:]",
                            "Subscript"
                        ],
                        [
                            "tf.concat([decoded_ids, next_id], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_970": {
                "variable": {
                    "value": "cache[layer_%d % layer][f]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, 0, hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_1027": {
                "variable": {
                    "value": "log_prob_indices",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.range(tf.to_int64(batch_size)), next_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "expand_dims_1031": {
                "variable": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "concat_1032": {
                "variable": {
                    "value": "decoded_ids",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[decoded_ids, next_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "minimum_1093": {
                "x": {
                    "value": "tf.to_float(features[key])",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1215": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'decoder'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "expand_dims_167": {
                "input": {
                    "value": "decoder_output",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, decoder_self_attention_bias, encoder_decoder_attention_bias, hparams, cache=cache, decode_loop_step=decode_loop_step, nonpadding=nonpadding, save_weights_to=self.attention_weights, losses=losses)",
                            "Call"
                        ],
                        [
                            "self.decode(decoder_input, encoder_output, encoder_decoder_attention_bias, decoder_self_attention_bias, hparams, nonpadding=features_to_nonpadding(features, 'targets'), losses=losses)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_247": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_287": {
                "name_or_scope": {
                    "value": "self.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_348": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_489": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(i, partial_targets_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "forced_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : ret",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "expand_dims_565": {
                "variable": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(inputs, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.reshape(inputs, [s[0] * s[1], s[2], s[3], s[4]])",
                            "Call"
                        ],
                        [
                            "self._shard_features({'inputs': inputs})['inputs']",
                            "Subscript"
                        ],
                        [
                            "input_modality.bottom_sharded(inputs, dp)",
                            "Call"
                        ],
                        [
                            "features['inputs']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(inputs)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cond_685": {
                "variable": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": []
                },
                "pred": {
                    "value": "tf.less(i, partial_targets_length)",
                    "type": "Call",
                    "possible_values": []
                },
                "true_fn": {
                    "value": "forced_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "false_fn": {
                    "value": "lambda : ret",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "zeros_780": {
                "shape": {
                    "value": "[batch_size, decode_length, hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_814": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_842": {
                "x": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_search.EOS_ID",
                            "MethodArgument"
                        ],
                        [
                            "beam_search.EOS_ID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_nd_846": {
                "params": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.log_prob_from_logits(logits)",
                            "Call"
                        ],
                        [
                            "common_layers.log_prob_from_logits(logits)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "log_prob_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.to_int64(batch_size)), next_id], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(tf.to_int64(batch_size)), next_id], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_859": {
                "x": {
                    "value": "finished",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i >= decode_length",
                            "Compare"
                        ],
                        [
                            "finished | tf.reduce_all(hit_eos)",
                            "BinOp"
                        ],
                        [
                            "i >= decode_length",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_863": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_867": {
                "dims": {
                    "value": "tensor.shape.as_list()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_997": {
                "shape": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_1025": {
                "x": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "beam_search.EOS_ID",
                            "MethodArgument"
                        ],
                        [
                            "beam_search.EOS_ID",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "gather_nd_1029": {
                "params": {
                    "value": "log_probs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.log_prob_from_logits(logits)",
                            "Call"
                        ],
                        [
                            "common_layers.log_prob_from_logits(logits)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "log_prob_indices",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.stack([tf.range(tf.to_int64(batch_size)), next_id], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.stack([tf.range(tf.to_int64(batch_size)), next_id], axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_1039": {
                "x": {
                    "value": "finished",
                    "type": "Name",
                    "possible_values": [
                        [
                            "i >= decode_length",
                            "Compare"
                        ],
                        [
                            "finished | tf.reduce_all(hit_eos)",
                            "BinOp"
                        ],
                        [
                            "i >= decode_length",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_1043": {
                "shape": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_1093": {
                "x": {
                    "value": "features[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_355": {
                "name_or_scope": {
                    "value": "input_modality.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_357": {
                "name_or_scope": {
                    "value": "body",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_414": {
                "name_or_scope": {
                    "value": "target_modality.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_420": {
                "x": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_424": {
                "input_": {
                    "value": "positional_encoding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_attention.get_timing_signal_1d(decode_length + 1, hparams.hidden_size)",
                            "Call"
                        ],
                        [
                            "common_attention.add_positional_embedding(tf.zeros([1, decode_length + 1, hparams.hidden_size]), hparams.max_length, 'body/targets_positional_embedding', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "common_attention.get_timing_signal_1d(decode_length + 1, hparams.hidden_size)",
                            "Call"
                        ],
                        [
                            "common_attention.add_positional_embedding(tf.zeros([1, decode_length, hparams.hidden_size]), hparams.max_length, 'body/targets_positional_embedding', None)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[positional_encoding_shape[0], 1, positional_encoding_shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_458": {
                "name_or_scope": {
                    "value": "body",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_470": {
                "name_or_scope": {
                    "value": "target_modality.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_572": {
                "name_or_scope": {
                    "value": "input_modality.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_574": {
                "name_or_scope": {
                    "value": "body",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_631": {
                "name_or_scope": {
                    "value": "target_modality.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_637": {
                "x": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_657": {
                "name_or_scope": {
                    "value": "body",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_668": {
                "name_or_scope": {
                    "value": "target_modality.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_773": {
                "shape": {
                    "value": "[batch_size, decode_length, key_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_777": {
                "shape": {
                    "value": "[batch_size, decode_length, value_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_787": {
                "name_or_scope": {
                    "value": "'%sdecoder/%s/encdec_attention/multihead_attention' % (scope_prefix, layer_name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_851": {
                "input": {
                    "value": "next_id",
                    "type": "Name",
                    "possible_values": [
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ],
                        [
                            "sos_id * tf.ones([batch_size, 1], dtype=tf.int64)",
                            "BinOp"
                        ],
                        [
                            "common_layers.sample_with_temperature(logits, temperature)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(next_id, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_all_858": {
                "input_tensor": {
                    "value": "hit_eos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], False)",
                            "Call"
                        ],
                        [
                            "hit_eos | tf.equal(next_id, eos_id)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([batch_size], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_872": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_976": {
                "name_or_scope": {
                    "value": "'%sdecoder/%s/encdec_attention/multihead_attention' % (scope_prefix, layer_name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_all_1038": {
                "input_tensor": {
                    "value": "hit_eos",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.fill([batch_size], False)",
                            "Call"
                        ],
                        [
                            "hit_eos | tf.equal(next_id, eos_id)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([batch_size], False)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_1048": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1219": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'layer_%d' % layer",
                            "BinOp"
                        ],
                        [
                            "'layer_%d' % layer",
                            "BinOp"
                        ],
                        [
                            "'layer_%d' % layer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_n_219": {
                "inputs": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_392": {
                "shape": {
                    "value": "[1, decode_length + 1, hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_420": {
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(targets)",
                            "Call"
                        ],
                        [
                            "self._shard_features({'targets': targets})['targets']",
                            "Subscript"
                        ],
                        [
                            "target_modality.targets_bottom_sharded(targets, dp)[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(targets)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : tf.zeros_like(targets), lambda : targets)",
                            "Call"
                        ],
                        [
                            "targets + positional_encoding[:, i:i + 1]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(ids, axis=2), axis=3)",
                            "Call"
                        ],
                        [
                            "preprocess_targets(targets, i)",
                            "Call"
                        ],
                        [
                            "self._shard_features({'targets': targets})['targets']",
                            "Subscript"
                        ],
                        [
                            "target_modality.targets_bottom_sharded(targets, dp)[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(targets)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : tf.zeros_like(targets), lambda : targets)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(ids, axis=2), axis=3)",
                            "Call"
                        ],
                        [
                            "preprocess_targets(targets, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_480": {
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(decoder_output, targets_shape)",
                            "Call"
                        ],
                        [
                            "fast_decode_tpu(encoder_output=encoder_output, encoder_decoder_attention_bias=encoder_decoder_attention_bias, symbols_to_logits_fn=symbols_to_logits_tpu_fn, hparams=hparams, decode_length=decode_length, vocab_size=target_modality.top_dimensionality, beam_size=beam_size, top_beams=top_beams, alpha=alpha, batch_size=batch_size, force_decode_length=self._decode_hparams.force_decode_length)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, partial_targets_length), forced_logits, lambda : ret)",
                            "Call"
                        ],
                        [
                            "fast_decode(encoder_output=encoder_output, encoder_decoder_attention_bias=encoder_decoder_attention_bias, symbols_to_logits_fn=symbols_to_logits_fn, hparams=hparams, decode_length=decode_length, vocab_size=target_modality.top_dimensionality, beam_size=beam_size, top_beams=top_beams, alpha=alpha, batch_size=batch_size, force_decode_length=self._decode_hparams.force_decode_length)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, partial_targets_length), forced_logits, lambda : ret)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_483": {
                "indices": {
                    "value": "tf.tile(tf.slice(partial_targets, [0, i], [partial_targets.shape.as_list()[0], 1]), [beam_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(ret)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(ret)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "less_490": {
                "x": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "partial_targets_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_targets_shape[1]",
                            "Subscript"
                        ],
                        [
                            "partial_targets_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_609": {
                "shape": {
                    "value": "[1, decode_length, hparams.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_637": {
                "input": {
                    "value": "targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(targets)",
                            "Call"
                        ],
                        [
                            "self._shard_features({'targets': targets})['targets']",
                            "Subscript"
                        ],
                        [
                            "target_modality.targets_bottom_sharded(targets, dp)[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(targets)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : tf.zeros_like(targets), lambda : targets)",
                            "Call"
                        ],
                        [
                            "targets + positional_encoding[:, i:i + 1]",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(ids, axis=2), axis=3)",
                            "Call"
                        ],
                        [
                            "preprocess_targets(targets, i)",
                            "Call"
                        ],
                        [
                            "self._shard_features({'targets': targets})['targets']",
                            "Subscript"
                        ],
                        [
                            "target_modality.targets_bottom_sharded(targets, dp)[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.flatten4d3d(targets)",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.equal(i, 0), lambda : tf.zeros_like(targets), lambda : targets)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.expand_dims(ids, axis=2), axis=3)",
                            "Call"
                        ],
                        [
                            "preprocess_targets(targets, i)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_678": {
                "input": {
                    "value": "ret",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(decoder_output, targets_shape)",
                            "Call"
                        ],
                        [
                            "fast_decode_tpu(encoder_output=encoder_output, encoder_decoder_attention_bias=encoder_decoder_attention_bias, symbols_to_logits_fn=symbols_to_logits_tpu_fn, hparams=hparams, decode_length=decode_length, vocab_size=target_modality.top_dimensionality, beam_size=beam_size, top_beams=top_beams, alpha=alpha, batch_size=batch_size, force_decode_length=self._decode_hparams.force_decode_length)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, partial_targets_length), forced_logits, lambda : ret)",
                            "Call"
                        ],
                        [
                            "fast_decode(encoder_output=encoder_output, encoder_decoder_attention_bias=encoder_decoder_attention_bias, symbols_to_logits_fn=symbols_to_logits_fn, hparams=hparams, decode_length=decode_length, vocab_size=target_modality.top_dimensionality, beam_size=beam_size, top_beams=top_beams, alpha=alpha, batch_size=batch_size, force_decode_length=self._decode_hparams.force_decode_length)",
                            "Call"
                        ],
                        [
                            "tf.squeeze(logits, axis=[1, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.cond(tf.less(i, partial_targets_length), forced_logits, lambda : ret)",
                            "Call"
                        ]
                    ]
                }
            },
            "one_hot_681": {
                "indices": {
                    "value": "tf.tile(partial_targets[:, i], [beam_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.shape(ret)[1]",
                            "Subscript"
                        ],
                        [
                            "tf.shape(ret)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "off_value": {
                    "value": "-1000000000.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "less_686": {
                "x": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": []
                },
                "y": {
                    "value": "partial_targets_length",
                    "type": "Name",
                    "possible_values": [
                        [
                            "partial_targets_shape[1]",
                            "Subscript"
                        ],
                        [
                            "partial_targets_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "TensorShape_876": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_877": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_878": {
                "dims": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_879": {
                "dims": {
                    "value": "[batch_size, decode_length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_880": {
                "func": {
                    "value": "compute_cache_shape_invariants",
                    "type": "Name",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cache",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'layer_%d' % layer: {'k': common_attention.split_heads(tf.zeros([batch_size, decode_length, key_channels]), hparams.num_heads), 'v': common_attention.split_heads(tf.zeros([batch_size, decode_length, value_channels]), hparams.num_heads), 'f': tf.zeros([batch_size, decode_length, hparams.hidden_size])} for layer in range(num_layers)}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_881": {
                "dims": {
                    "value": "[batch_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_956": {
                "shape": {
                    "value": "[batch_size, 0, key_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_959": {
                "shape": {
                    "value": "[batch_size, 0, value_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_1052": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_1053": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_1054": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_1055": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_1056": {
                "func": {
                    "value": "beam_search.get_state_shape_invariants",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*structure": {
                    "value": "cache",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'layer_%d' % layer: {'k': common_attention.split_heads(tf.zeros([batch_size, decode_length, key_channels]), hparams.num_heads), 'v': common_attention.split_heads(tf.zeros([batch_size, decode_length, value_channels]), hparams.num_heads), 'f': tf.zeros([batch_size, decode_length, hparams.hidden_size])} for layer in range(num_layers)}",
                            "DictComp"
                        ],
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "TensorShape_1057": {
                "dims": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_1220": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_1268": {
                "name_or_scope": {
                    "value": "ffn",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tile_484": {
                "input": {
                    "value": "tf.slice(partial_targets, [0, i], [partial_targets.shape.as_list()[0], 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_682": {
                "input": {
                    "value": "partial_targets[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_int64_845": {
                "x": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(encoder_output)[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(encoder_output)[0]",
                            "Subscript"
                        ],
                        [
                            "partial_targets_shape[0]",
                            "Subscript"
                        ],
                        [
                            "s[0]",
                            "Subscript"
                        ],
                        [
                            "partial_targets_shape[0]",
                            "Subscript"
                        ],
                        [
                            "s[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "to_int64_1027": {
                "x": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "common_layers.shape_list(encoder_output)[0]",
                            "Subscript"
                        ],
                        [
                            "common_layers.shape_list(encoder_output)[0]",
                            "Subscript"
                        ],
                        [
                            "partial_targets_shape[0]",
                            "Subscript"
                        ],
                        [
                            "s[0]",
                            "Subscript"
                        ],
                        [
                            "partial_targets_shape[0]",
                            "Subscript"
                        ],
                        [
                            "s[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_1245": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "slice_485": {
                "input_": {
                    "value": "partial_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "features.get('inputs')",
                            "Call"
                        ],
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.expand_squeeze_to_nd(partial_targets, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(partial_targets)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "features.get('inputs')",
                            "Call"
                        ],
                        [
                            "features['targets']",
                            "Subscript"
                        ],
                        [
                            "common_layers.expand_squeeze_to_nd(partial_targets, 2)",
                            "Call"
                        ],
                        [
                            "tf.to_int64(partial_targets)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                },
                "begin": {
                    "value": "[0, i]",
                    "type": "List",
                    "possible_values": []
                },
                "size": {
                    "value": "[partial_targets.shape.as_list()[0], 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}