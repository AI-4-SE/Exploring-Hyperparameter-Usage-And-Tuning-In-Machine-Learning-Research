{
    "config/__init__.py": {
        "torch": {}
    },
    "dataset/cityscapes.py": {
        "torch": {
            "DataLoader_352": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dst",
                    "type": "Name",
                    "possible_values": [
                        [
                            "CitySegmentationTrain('./cityscapes/', './list/cityscapes/trainval.lst', crop_size=(1024, 2048))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_367": {
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "labels[:, :, :] == k",
                            "Compare"
                        ]
                    ]
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "upsample_193": {
                "variable": {
                    "value": "full_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_290": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_293": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "deeplab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_model('_'.join([args.network, args.method]), num_classes=args.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_298": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "get_segmentation_dataset(args.dataset, root=args.data_dir, list_path=args.data_list, crop_size=(1024, 2048), scale=False, mirror=False, network=args.network)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_146": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_148": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_161": {
                "variable": {
                    "value": "full_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_163": {
                "variable": {
                    "value": "full_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_175": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_177": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_127": {
                "variable": {
                    "value": "padded_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padded_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "padded_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=padded_prediction, size=tile_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "padded_prediction.cpu().data.numpy().transpose(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tile_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_331": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "eq_348": {
                "input": {
                    "value": "label",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Variable(label.long().cuda())",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "scaled_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_187": {
                "ndarray": {
                    "value": "scaled_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_119": {
                "ndarray": {
                    "value": "padded_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.pad(img, ((0, 0), (0, 0), (0, rows_missing), (0, cols_missing)), 'constant')",
                            "Call"
                        ],
                        [
                            "pad_image(img, tile_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "generate_submit.py": {
        "torch": {
            "load_224": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_227": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "deeplab",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_segmentation_model('_'.join([args.network, args.method]), num_classes=args.num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_231": {
                "variable": {
                    "value": "testloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "get_segmentation_dataset(args.dataset, root=args.data_dir, list_path=args.data_list, crop_size=(1024, 2048), scale=False, mirror=False, network=args.network)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_78": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "tile_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_80": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "tile_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_134": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_136": {
                "variable": {
                    "value": "interp",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_153": {
                "variable": {
                    "value": "full_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_155": {
                "variable": {
                    "value": "full_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "full_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "full_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "full_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=full_prediction, size=(H_, W_), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H_, W_)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_113": {
                "variable": {
                    "value": "padded_prediction",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "padded_prediction",
                    "type": "Name",
                    "possible_values": [
                        [
                            "padded_prediction_[-1]",
                            "Subscript"
                        ],
                        [
                            "padded_prediction_",
                            "Name"
                        ],
                        [
                            "F.upsample(input=padded_prediction, size=tile_size, mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "padded_prediction.cpu().data.numpy().transpose(0, 2, 3, 1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "tile_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_260": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_146": {
                "ndarray": {
                    "value": "scaled_img",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ],
                        [
                            "image",
                            "Name"
                        ],
                        [
                            "ndimage.zoom(image, (1.0, 1.0, scale, scale), order=1, prefilter=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_106": {
                "ndarray": {
                    "value": "padded_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.pad(img, ((0, 0), (0, 0), (0, rows_missing), (0, cols_missing)), 'constant')",
                            "Call"
                        ],
                        [
                            "pad_image(img, tile_size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "inplace_abn/bn.py": {
        "torch": {
            "batch_norm_66": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_49": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_50": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_54": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "relu_70": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_49": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_72": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "elu_74": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "functional.batch_norm(x, self.running_mean, self.running_var, self.weight, self.bias, self.training, self.momentum, self.eps)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "device_count_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "inplace_abn/functions.py": {
        "torch": {
            "load_9": {
                "variable": {
                    "value": "_backend",
                    "type": "Variable",
                    "possible_values": []
                },
                "name": {
                    "value": "inplace_abn",
                    "type": "Constant",
                    "possible_values": []
                },
                "extra_cflags": {
                    "value": "['-O3']",
                    "type": "List",
                    "possible_values": []
                },
                "sources": {
                    "value": "[path.join(_src_path, f) for f in ['inplace_abn.cpp', 'inplace_abn_cpu.cpp', 'inplace_abn_cuda.cu']]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "extra_cuda_cflags": {
                    "value": "['--expt-extended-lambda']",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_168": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "comm.gather(means)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_169": {
                "variable": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "comm.gather(vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_coalesced_174": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[mean.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_224": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edz, eydz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[edz.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_add_221": {
                "inputs": {
                    "value": "edzs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_add_222": {
                "inputs": {
                    "value": "eydzs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "inplace_abn_03/modules/_ext/__init__.py": {
        "torch": {}
    },
    "inplace_abn_03/modules/bn.py": {
        "torch": {
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_144": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_82": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_83": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_149": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_150": {
                "*size": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_count_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_43": {
                "num_features": {
                    "value": "num_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "inplace_abn_03/modules/build.py": {
        "torch": {}
    },
    "inplace_abn_03/modules/dense.py": {
        "torch": {
            "ModuleList_16": {
                "variable": {
                    "value": "self.convs1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.convs3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "inputs + [x]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "inputs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x]",
                            "List"
                        ],
                        [
                            "inputs + [x]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_19": {
                "*args": {
                    "value": "OrderedDict([('bn', norm_act(in_channels)), ('conv', nn.Conv2d(in_channels, self.growth * bottleneck_factor, 1, bias=False))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_23": {
                "*args": {
                    "value": "OrderedDict([('bn', norm_act(self.growth * bottleneck_factor)), ('conv', nn.Conv2d(self.growth * bottleneck_factor, self.growth, 3, padding=dilation, bias=False, dilation=dilation))])",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "in_channels + self.growth",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "self.growth * bottleneck_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_25": {
                "in_channels": {
                    "value": "self.growth * bottleneck_factor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.growth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "inplace_abn_03/modules/functions.py": {
        "torch": {
            "gather_193": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "comm.gather(means)",
                            "Call"
                        ]
                    ]
                }
            },
            "gather_194": {
                "variable": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "comm.gather(vars)",
                            "Call"
                        ]
                    ]
                }
            },
            "broadcast_coalesced_199": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[mean.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_274": {
                "variable": {
                    "value": "tensors",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(edz, eydz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "devices": {
                    "value": "[edz.get_device()] + ctx.worker_ids",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_add_271": {
                "inputs": {
                    "value": "edzs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reduce_add_272": {
                "inputs": {
                    "value": "eydzs",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "inplace_abn_03/modules/misc.py": {
        "torch": {}
    },
    "inplace_abn_03/modules/residual.py": {
        "torch": {
            "Sequential_72": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict(layers)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "variable": {
                    "value": "self.proj_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/resnet101_asp_oc.py": {
        "torch": {
            "ReLU_50": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_75": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/resnet101_base_oc.py": {
        "torch": {
            "ReLU_50": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_66": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_95": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_76": {
                "p": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/resnet101_baseline.py": {
        "torch": {
            "ReLU_48": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_55": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_58": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "variable": {
                    "value": "self.layer6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "19",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_74": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_66": {
                "p": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_75": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "network/resnet101_pyramid_oc.py": {
        "torch": {
            "ReLU_50": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_56": {
                "variable": {
                    "value": "self.relu3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_57": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_58": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_59": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.layer5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2048, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "variable": {
                    "value": "self.dsn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(1024, 512, kernel_size=3, stride=1, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_83": {
                "variable": {
                    "value": "downsample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_94": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "2048",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_73": {
                "in_channels": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_75": {
                "p": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_76": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "21",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "oc_module/asp_oc_block.py": {
        "torch": {
            "Sequential_44": {
                "variable": {
                    "value": "self.context",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=1, dilation=1, bias=True)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=dilations[0], dilation=dilations[0], bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.conv4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=dilations[1], dilation=dilations[1], bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(features, out_features, kernel_size=3, padding=dilations[2], dilation=dilations[2], bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_57": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(out_features * 5, out_features * 2, kernel_size=1, padding=0, dilation=1, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_86": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(feat1, feat2, feat3, feat4, feat5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_44": {
                "in_channels": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[1]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features",
                    "type": "Name",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilations[2]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "(12",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "in_channels": {
                    "value": "out_features * 5",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_60": {
                "p": {
                    "value": "0.1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_68": {
                "tensors": {
                    "value": "(feat1[i], feat2[i], feat3[i], feat4[i], feat5[i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "oc_module/base_oc_block.py": {
        "torch": {
            "MaxPool2d_58": {
                "variable": {
                    "value": "self.pool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(scale, scale)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_65": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_query(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.f_key(x).view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_86": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_88": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query, key)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.f_value(x).view(batch_size, self.value_channels, -1)",
                            "Call"
                        ],
                        [
                            "value.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(in_channels, out_channels, key_channels, value_channels, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_159": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(in_channels, out_channels, key_channels, value_channels, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, out_channels, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_94": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.value_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=context, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=context, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "priors[0]",
                            "Subscript"
                        ],
                        [
                            "context + priors[i]",
                            "BinOp"
                        ],
                        [
                            "priors[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_124": {
                "in_channels": {
                    "value": "2 * in_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_126": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[context, feats]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_96": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(sim_map, value)",
                            "Call"
                        ],
                        [
                            "context.permute(0, 2, 1).contiguous()",
                            "Call"
                        ],
                        [
                            "context.view(batch_size, self.value_channels, *x.size()[2:])",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=context, size=(h, w), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "F.upsample(input=context, size=(h, w), mode='bilinear')",
                            "Call"
                        ],
                        [
                            "priors[0]",
                            "Subscript"
                        ],
                        [
                            "context + priors[i]",
                            "BinOp"
                        ],
                        [
                            "priors[0]",
                            "Subscript"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "oc_module/pyramid_oc_block.py": {
        "torch": {
            "Sequential_58": {
                "variable": {
                    "value": "self.f_key",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=self.in_channels, out_channels=self.key_channels, kernel_size=1, stride=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.f_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.value_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_124": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "context_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.stages",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[self._make_stage(in_channels, out_channels, in_channels // 2, in_channels, size) for size in sizes]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_155": {
                "variable": {
                    "value": "self.conv_bn_dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(2 * in_channels * self.group, out_channels, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_160": {
                "variable": {
                    "value": "self.up_dr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, in_channels * self.group, kernel_size=1, padding=0)",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_108": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "query_local",
                    "type": "Call",
                    "possible_values": [
                        [
                            "query[:, :, local_x[i]:local_x[i + 1], local_y[i]:local_y[i + 1]]",
                            "Subscript"
                        ],
                        [
                            "query_local.contiguous().view(batch_size, self.key_channels, -1)",
                            "Call"
                        ],
                        [
                            "query_local.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "key_local",
                    "type": "Name",
                    "possible_values": [
                        [
                            "key[:, :, local_x[i]:local_x[i + 1], local_y[i]:local_y[i + 1]]",
                            "Subscript"
                        ],
                        [
                            "key_local.contiguous().view(batch_size, self.key_channels, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_110": {
                "variable": {
                    "value": "sim_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query_local, key_local)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_112": {
                "variable": {
                    "value": "context_local",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_map",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.matmul(query_local, key_local)",
                            "Call"
                        ],
                        [
                            "self.key_channels ** (-0.5) * sim_map",
                            "BinOp"
                        ],
                        [
                            "F.softmax(sim_map, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "value_local",
                    "type": "Call",
                    "possible_values": [
                        [
                            "value[:, :, local_x[i]:local_x[i + 1], local_y[i]:local_y[i + 1]]",
                            "Subscript"
                        ],
                        [
                            "value_local.contiguous().view(batch_size, self.value_channels, -1)",
                            "Call"
                        ],
                        [
                            "value_local.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.key_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "2 * in_channels * self.group",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout2d_158": {
                "p": {
                    "value": "dropout",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_161": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels * self.group",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_177": {
                "tensors": {
                    "value": "context",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.cat(context_list, 2)",
                            "Call"
                        ],
                        [
                            "self.W(context)",
                            "Call"
                        ],
                        [
                            "[self.up_dr(feats)]",
                            "List"
                        ],
                        [
                            "context + [priors[i]]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "row_tmp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "train.py": {
        "torch": {
            "load_72": {
                "variable": {
                    "value": "saved_state_dict",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.restore_from",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "trainloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "get_segmentation_dataset(args.dataset, root=args.data_dir, list_path=args.data_list, max_iters=args.num_steps * args.batch_size, crop_size=input_size, scale=args.random_scale, mirror=args.random_mirror, network=args.network)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, deeplab.parameters()), 'lr': args.learning_rate}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_166": {
                "obj": {
                    "value": "deeplab.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'CS_scenes_' + str(args.num_steps) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_171": {
                "obj": {
                    "value": "deeplab.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(args.snapshot_dir, 'CS_scenes_' + str(i_iter) + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils/criterion.py": {
        "torch": {
            "CrossEntropyLoss_24": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_105": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "upsample_29": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_31": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_47": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_50": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_index",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "upsample_56": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_58": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_62": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_64": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_82": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_84": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_87": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_89": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_112": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_114": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_118": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "upsample_120": {
                "variable": {
                    "value": "scale_pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/files.py": {
        "torch": {
            "save_17": {
                "obj": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "directory + filename",
                            "BinOp"
                        ],
                        [
                            "'checkpoint.pth.tar'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/loss.py": {
        "torch": {
            "CrossEntropyLoss_48": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.ignore_label",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_77": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "freq / np.sum(freq)",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor([0.8373, 0.918, 0.866, 1.0345, 1.0166, 0.9969, 0.9754, 1.0489, 0.8786, 1.0023, 0.9539, 0.9843, 1.1116, 0.9037, 1.0865, 1.0955, 1.0865, 1.1529, 1.0507])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_80": {
                "variable": {
                    "value": "self.criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "ignore_label",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "255",
                            "MethodArgument"
                        ],
                        [
                            "255",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sum_38": {
                "variable": {
                    "value": "freq[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "Name",
                    "possible_values": [
                        [
                            "target[:, :, :] == k",
                            "Compare"
                        ]
                    ]
                }
            },
            "from_numpy_127": {
                "ndarray": {
                    "value": "input_label.reshape(target.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_61": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/operator.py": {
        "torch": {
            "ConvTranspose2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_14": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_26": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ],
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "2",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_27": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "dilation": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "affine": {
                    "value": "affine_par",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "Constant"
                        ]
                    ]
                }
            },
            "ReLU_30": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/parallel.py": {
        "torch": {
            "broadcast_coalesced_42": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "broadcast_coalesced_51": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "results",
                    "type": "Call",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ],
                        [
                            "comm.reduce_add_coalesced(inputs, ctx.target_gpus[0])",
                            "Call"
                        ]
                    ]
                },
                "devices": {
                    "value": "ctx.target_gpus",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_grad_enabled_155": {
                "variable": {
                    "value": "grad_enabled",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_add_60": {
                "inputs": {
                    "value": "inputs",
                    "type": "ListComp",
                    "possible_values": [
                        [
                            "[inputs[i:i + num_inputs] for i in range(0, len(inputs), num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i[0].get_device())",
                            "Call"
                        ],
                        [
                            "[i.data for i in inputs]",
                            "ListComp"
                        ],
                        [
                            "[inputs[i:i + ctx.num_inputs] for i in range(0, len(inputs), ctx.num_inputs)]",
                            "ListComp"
                        ],
                        [
                            "sorted(inputs, key=lambda i: i.get_device())",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_159": {
                "mode": {
                    "value": "grad_enabled",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.is_grad_enabled()",
                            "Call"
                        ]
                    ]
                }
            },
            "device_163": {
                "type": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_a_var(input).get_device()",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/resnet_block.py": {
        "torch": {
            "Conv2d_38": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation * multi_grid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation * multi_grid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_51": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_53": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_54": {
                "variable": {
                    "value": "self.relu_inplace",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/utils.py": {
        "torch": {
            "from_numpy_214": {
                "ndarray": {
                    "value": "_target",
                    "type": "Call",
                    "possible_values": [
                        [
                            "target.data.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "_zero_corrected_countless(_target)",
                            "Call"
                        ],
                        [
                            "_zero_corrected_countless(_target)",
                            "Call"
                        ],
                        [
                            "_zero_corrected_countless(_target)",
                            "Call"
                        ],
                        [
                            "_zero_corrected_countless(_target)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}