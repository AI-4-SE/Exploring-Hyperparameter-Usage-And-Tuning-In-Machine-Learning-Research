{
    "utils.py": {
        "sklearn": {
            "ParameterGrid_148": {
                "param_grid": {
                    "value": "config_grid",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "load_109": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(experiment['save_dir'], 'rnn_model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_178": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "paths.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_179": {
                "variable": {
                    "value": "paths",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[paths, t.unsqueeze(0).repeat(paths.shape[0], 1).unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_124": {
                "input": {
                    "value": "torch.norm(paths[:, :-1, :] - paths_shifted, dim=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_154": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "norm_124": {
                "input": {
                    "value": "paths[:, :-1, :] - paths_shifted",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_110": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "adversarial.py": {
        "torch": {
            "randn_like_49": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_like_53": {
                "variable": {
                    "value": "deltas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ims",
                    "type": "Variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_58": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adversarial_experiment.py": {
        "torch": {
            "device_61": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "dev",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ],
                        [
                            "'cpu'",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "TensorDataset_105": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_106": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X_test, y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "exp['batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "norm_134": {
                "input": {
                    "value": "model.get_kernel_penalization(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "norm_135": {
                "input": {
                    "value": "torch.cat([model.weight_ih, model.weight_hh], 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_135": {
                "tensors": {
                    "value": "[model.weight_ih, model.weight_hh]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "generate_data.py": {
        "torch": {
            "linspace_13": {
                "variable": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "end": {
                    "value": "4 * math.pi",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "length",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_16": {
                "variable": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_17": {
                "variable": {
                    "value": "speed",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_23": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x_pos, y_pos]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_27": {
                "variable": {
                    "value": "perm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_49": {
                "variable": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_train",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X_train, y_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "TensorDataset_52": {
                "variable": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "X_test",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_53": {
                "variable": {
                    "value": "test_dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(X_test, y_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_18": {
                "input": {
                    "value": "start.unsqueeze(1) + speed.unsqueeze(1) * t.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_21": {
                "input": {
                    "value": "start.unsqueeze(1) + speed.unsqueeze(1) * t.unsqueeze(0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_15": {
                "*size": {
                    "value": "n_samples",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "is_available_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rnn.py": {
        "torch": {
            "CrossEntropyLoss_141": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.readout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_32": {
                "variable": {
                    "value": "self.hidden_state_0",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.hidden_channels, device=device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.hidden_state_0, torch.zeros(self.input_channels, device=device)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Linear_101": {
                "variable": {
                    "value": "self.weight_ih",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_102": {
                "variable": {
                    "value": "self.weight_hh",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_116": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Adam_131": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "StepLR_132": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_134": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "StepLR_135": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.optim.Adam(model.parameters(), lr=lr)",
                            "Call"
                        ],
                        [
                            "torch.optim.Adam(model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "40",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "device_10": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "RNNCell_35": {
                "variable": {
                    "value": "self.rnn_cell",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "input_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "hidden_size": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "non_linearity",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[self.hidden_state_0.unsqueeze(0)] * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_66": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mean_87": {
                "input": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.readout(hidden_state[:self.hidden_channels]) ** 2",
                            "BinOp"
                        ],
                        [
                            "norm + (torch.norm(model_jacobian_i, dim=0) / torch.tensor(i + 2, device=device, dtype=torch.float).lgamma().exp()) ** 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "*size": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "save_157": {
                "obj": {
                    "value": "{'epoch': epoch, 'model_state_dict': model.state_dict(), 'loss': criterion, 'optimizer': optimizer.state_dict(), 'grad_dict': grad_dict}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(save_dir, 'rnn_model_{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "self.input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "norm_85": {
                "input": {
                    "value": "model_jacobian_i",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model_jacobian_vectorized[i].flatten(start_dim=1).permute(1, 0)[:, :self.hidden_channels]",
                            "Subscript"
                        ],
                        [
                            "self.readout(model_jacobian_i)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_86": {
                "data": {
                    "value": "i + 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lgamma_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "taylor_expansion.py": {
        "torch": {
            "zeros_220": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[e + d, e + d]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[e + d]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "device_28": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_55": {
                "variable": {
                    "value": "E",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[d, e + d]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_56": {
                "variable": {
                    "value": "E[:, e:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "n": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.input_channels",
                            "Attribute"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_57": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[e + d]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "jacobian_111": {
                "variable": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": []
                },
                "func": {
                    "value": "tensor_field_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "create_graph",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_121": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_128": {
                "variable": {
                    "value": "identities_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "int(np.prod(shapes))",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_128": {
                "variable": {
                    "value": "identities_product",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shapes + shapes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_174": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tensordot_179": {
                "variable": {
                    "value": "zeroth_order_result",
                    "type": "Variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "B[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "contraction",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "device_200": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "y[:e]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "einsum_83": {
                "variable": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "b...,bi->b...i",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "np.einsum('b...,bi->b...i', R, C)",
                            "Call"
                        ],
                        [
                            "torch.einsum('b...,bi->b...i', R, C)",
                            "Call"
                        ]
                    ]
                }
            },
            "movedim_114": {
                "input": {
                    "value": "torch.tensordot(output_1, jacobian, dims=([0, 1], [-2, -1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "source": {
                    "value": "(nb_axes_1, nb_axes_1 + 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "destination": {
                    "value": "(0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_276": {
                "input": {
                    "value": "reshaped_jacobian * signature_tensor",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_278": {
                "tensors": {
                    "value": "all_results",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_54": {
                "input": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros([e + d, e + d], device=device)",
                            "Call"
                        ],
                        [
                            "C.detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "y[:e]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:e]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[E.T, y[:, None]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensordot_115": {
                "a": {
                    "value": "output_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor_field_1(inputs)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "jacobian",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.autograd.functional.jacobian(tensor_field_2, inputs, create_graph=create_graph)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "([0, 1], [-2, -1])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "movedim_150": {
                "variable": {
                    "value": "tensor_with_good_axes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "source": {
                    "value": "tuple(range(number_first_axes, number_first_axes + number_second_axes))",
                    "type": "Call",
                    "possible_values": []
                },
                "destination": {
                    "value": "tuple(range(number_second_axes))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "movedim_171": {
                "input": {
                    "value": "t",
                    "type": "Variable",
                    "possible_values": []
                },
                "source": {
                    "value": "old",
                    "type": "Variable",
                    "possible_values": []
                },
                "destination": {
                    "value": "new",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_231": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_14": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.matmul(C, h) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(C, h) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "[torch.zeros([e + d, d] + [e + d] * k, device=device), torch.einsum('b...,b->b...', R, I)[:, None, ...]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_238": {
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_80": {
                "*size": {
                    "value": "[e + d, d] + [e + d] * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ],
                        [
                            "torch.device('cpu')",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tanh_16": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.matmul(C, h) + b",
                            "BinOp"
                        ],
                        [
                            "torch.matmul(C, h) + b",
                            "BinOp"
                        ]
                    ]
                }
            },
            "einsum_81": {
                "equation": {
                    "value": "b...,b->b...",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "R",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "C",
                            "Name"
                        ],
                        [
                            "np.einsum('b...,bi->b...i', R, C)",
                            "Call"
                        ],
                        [
                            "torch.einsum('b...,bi->b...i', R, C)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "taylor_experiment.py": {
        "torch": {
            "randn_42": {
                "variable": {
                    "value": "hidden_state",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "model.hidden_channels + model.input_channels",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "norm_78": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat([model.weight_hh, model.weight_ih])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_78": {
                "tensors": {
                    "value": "[model.weight_hh, model.weight_ih]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}