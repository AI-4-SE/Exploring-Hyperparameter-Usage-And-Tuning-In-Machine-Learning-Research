{
    "lm_lstm/main.py": {
        "torch": {
            "ReduceLROnPlateau_240": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "optim.SGD(LMModel.parameters(), lr=args.lr, momentum=args.momentum, weight_decay=args.wd)",
                            "Call"
                        ],
                        [
                            "optim.Adam(LMModel.parameters(), lr=args.lr, weight_decay=args.wd)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "min",
                    "type": "str",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "patience": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_139": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "LMModel_start",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.start_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_231": {
                "variable": {
                    "value": "LMModel_parallel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "RNNModel(vocab_size=vocab_size, embed_size=args.embedsz, hidden_size=args.hiddensz, num_layers=args.numlayers, dropout=args.dropout, padid=padid, tieweights=args.tieweights)",
                            "Call"
                        ],
                        [
                            "RNNModel(vocab_size=vocab_size, embed_size=args.embedsz, hidden_size=args.hiddensz, num_layers=args.numlayers, dropout=args.dropout, padid=padid, tieweights=args.tieweights)",
                            "Call"
                        ],
                        [
                            "LMModel.cuda(cuda_device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(int, args.devids.split(',')))",
                            "Call"
                        ]
                    ]
                },
                "output_device": {
                    "value": "output_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_ids[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SGD_236": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "LMModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_230": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_238": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "LMModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_rng_state_265": {
                "new_state": {
                    "value": "torch.load(start_model_rngstate_path)['torch_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "set_rng_state_all_266": {
                "new_states": {
                    "value": "torch.load(start_model_rngstate_path)['cuda_rng_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_246": {
                "f": {
                    "value": "start_model_optstate_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.splitext(args.start_model)[0] + '_optstate.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_252": {
                "f": {
                    "value": "start_model_schstate_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.splitext(args.start_model)[0] + '_schstate.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_265": {
                "f": {
                    "value": "start_model_rngstate_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.splitext(args.start_model)[0] + '_rngstate.pth'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_266": {
                "f": {
                    "value": "start_model_rngstate_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.splitext(args.start_model)[0] + '_rngstate.pth'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "lm_lstm/model.py": {
        "torch": {
            "Embedding_21": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "padding_idx": {
                    "value": "self.padid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "LSTM_22": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_size": {
                    "value": "embed_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embed_size",
                            "Method Argument"
                        ]
                    ]
                },
                "hidden_size": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "num_layers": {
                    "value": "num_layers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_layers",
                            "Method Argument"
                        ]
                    ]
                },
                "dropout": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_24": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dropout",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_25": {
                "variable": {
                    "value": "self.proj",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cross_entropy_63": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model_output[:-1, 0, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "textid[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "self.padid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean if size_average else sum",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "softmax_47": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(embed, hn)",
                            "Call"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ],
                        [
                            "self.proj(output) if subvocab is None else nn.functional.linear(output, self.proj.weight[subvocab, :], self.proj.bias[subvocab])",
                            "IfExp"
                        ],
                        [
                            "nn.functional.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_45": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.lstm(embed, hn)",
                            "Call"
                        ],
                        [
                            "self.drop(output)",
                            "Call"
                        ],
                        [
                            "self.proj(output) if subvocab is None else nn.functional.linear(output, self.proj.weight[subvocab, :], self.proj.bias[subvocab])",
                            "IfExp"
                        ],
                        [
                            "nn.functional.softmax(output, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.proj.weight[subvocab, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.proj.bias[subvocab]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "no_grad_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lm_lstm/testppl.py": {
        "torch": {
            "load_128": {
                "variable": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_155": {
                "variable": {
                    "value": "LMModel_parallel",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.model).cpu()",
                            "Call"
                        ],
                        [
                            "LMModel.cuda(cuda_device)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "device_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(map(int, args.devids.split(',')))",
                            "Call"
                        ]
                    ]
                },
                "output_device": {
                    "value": "output_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device_ids[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lm_lstm/train.py": {
        "torch": {
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "LMModel.padid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_84": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "LMModel.padid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_86": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LMModel",
                            "Method Argument"
                        ],
                        [
                            "LMModel",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "savepath",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./LMModel.pth'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_74": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.splitext(savepath)[0] + '_optstate.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_75": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.splitext(savepath)[0] + '_schstate.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_76": {
                "obj": {
                    "value": "{'torch_rng_state': torch.get_rng_state(), 'cuda_rng_state': torch.cuda.get_rng_state_all()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.splitext(savepath)[0] + '_rngstate.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_98": {
                "input": {
                    "value": "batch.target.ne(LMModel.padid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_grad_norm__43": {
                "parameters": {
                    "value": "LMModel.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "grad_max_norm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_rng_state_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_rng_state_all_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "numel_47": {
                "input": {
                    "value": "batch.target",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_48": {
                "input": {
                    "value": "batch.target == LMModel.padid",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "lm_lstm/utils.py": {
        "torch": {
            "cat_28": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[batch.text.view(-1), batch.target.view(-1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_28": {
                "variable": {
                    "value": "batch_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "subvocab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.randperm(vocab_size)[:subvocab_size], batch_ids]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unique_29": {
                "variable": {
                    "value": "subvocab",
                    "type": "variable",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_29": {
                "n": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vocab_size",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "uss/beam_search.py": {
        "torch": {
            "log_softmax_168": {
                "variable": {
                    "value": "scores_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext_GPT2(template_vec, word_list, ge, prevs_state=bu.gpt2_state, prevs_align=bu.align_loc if mono else None, normalized=normalized, bpe2word=bpe2word)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_170": {
                "variable": {
                    "value": "(sorted_scores, sorting_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext_GPT2(template_vec, word_list, ge, prevs_state=bu.gpt2_state, prevs_align=bu.align_loc if mono else None, normalized=normalized, bpe2word=bpe2word)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_300": {
                "variable": {
                    "value": "lm_cum_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_cum_allbeam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sim_cum_logprob if sim_cum_allbeam is None else torch.cat([sim_cum_allbeam, sim_cum_logprob])",
                            "IfExp"
                        ],
                        [
                            "sim_cum_allbeam[remainpos_simallbeam]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sim_cum_logprob if sim_cum_allbeam is None else torch.cat([sim_cum_allbeam, sim_cum_logprob])",
                            "IfExp"
                        ],
                        [
                            "sim_cum_allbeam[remainpos_simallbeam]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_like_445": {
                "variable": {
                    "value": "lm_cum_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_cum_allbeam",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sim_cum_logprob if sim_cum_allbeam is None else torch.cat([sim_cum_allbeam, sim_cum_logprob])",
                            "IfExp"
                        ],
                        [
                            "sim_cum_allbeam[remainpos_simallbeam]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "sim_cum_logprob if sim_cum_allbeam is None else torch.cat([sim_cum_allbeam, sim_cum_logprob])",
                            "IfExp"
                        ],
                        [
                            "sim_cum_allbeam[remainpos_simallbeam]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "no_grad_196": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_213": {
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_softmax_280": {
                "variable": {
                    "value": "scores_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext_GPT2(template_vec, word_list, ge, prevs_state=bu.gpt2_state, prevs_align=bu.align_loc if mono else None, normalized=normalized, bpe2word=bpe2word)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_322": {
                "variable": {
                    "value": "(subprobs_max, subprobs_maxids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_354": {
                "variable": {
                    "value": "scores_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - alpha) * torch.exp(sim_cum_allbeam) + alpha * torch.exp(lm_cum_logprob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_softmax_425": {
                "variable": {
                    "value": "scores_logprob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext(template_vec, word_list, ee, prevs_state=bu.elmo_state, batch_size=batch_size, prevs_align=bu.align_loc if mono else None, normalized=normalized, elmo_layer=elmo_layer)",
                            "Call"
                        ],
                        [
                            "simScoreNext_GPT2(template_vec, word_list, ge, prevs_state=bu.gpt2_state, prevs_align=bu.align_loc if mono else None, normalized=normalized, bpe2word=bpe2word)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_467": {
                "variable": {
                    "value": "(subprobs_max, subprobs_maxids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_499": {
                "variable": {
                    "value": "scores_comb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(1 - alpha) * torch.exp(sim_cum_allbeam) + alpha * torch.exp(lm_cum_logprob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "chunk_212": {
                "input": {
                    "value": "hn[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "len(onbeam_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_349": {
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_494": {
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ],
                        [
                            "prob_next_1step(LMModel, batch_text, hn=batch_hn, subvocab=subvocab, clustermask=clustermask, onscore=False, renorm=renorm, temperature=temperature)",
                            "Call"
                        ],
                        [
                            "subprobs[remainpos, :]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_204": {
                "tensors": {
                    "value": "[bulist[i].lm_state[0] for i in onbeam_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "tensors": {
                    "value": "[bulist[i].lm_state[1] for i in onbeam_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_282": {
                "data": {
                    "value": "bu.sim_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_284": {
                "tensors": {
                    "value": "[sim_cum_allbeam, sim_cum_logprob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_286": {
                "tensors": {
                    "value": "[indices_allbeam, indices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_311": {
                "tensors": {
                    "value": "[bulist[i].lm_state[0] for i in onbeam_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_312": {
                "tensors": {
                    "value": "[bulist[i].lm_state[1] for i in onbeam_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_347": {
                "input": {
                    "value": "hn[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "len(onbeam_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_348": {
                "input": {
                    "value": "hn[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "len(onbeam_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_427": {
                "data": {
                    "value": "bu.sim_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_429": {
                "tensors": {
                    "value": "[sim_cum_allbeam, sim_cum_logprob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "[indices_allbeam, indices]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_456": {
                "tensors": {
                    "value": "[bulist[i].lm_state[0] for i in onbeam_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_457": {
                "tensors": {
                    "value": "[bulist[i].lm_state[1] for i in onbeam_ids]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_492": {
                "input": {
                    "value": "hn[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "len(onbeam_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_493": {
                "input": {
                    "value": "hn[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "chunks": {
                    "value": "len(onbeam_ids)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_354": {
                "input": {
                    "value": "lm_cum_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subprobs.new_tensor([bulist[i].lm_score for i in onbeam_ids]).unsqueeze(1) + torch.log(subprobs)",
                            "BinOp"
                        ],
                        [
                            "lm_cum_logprob.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sim_cum_allbeam)",
                            "Call"
                        ],
                        [
                            "subprobs.new_tensor([bulist[i].lm_score for i in onbeam_ids]).unsqueeze(1) + torch.log(subprobs)",
                            "BinOp"
                        ],
                        [
                            "lm_cum_logprob.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sim_cum_allbeam)",
                            "Call"
                        ],
                        [
                            "subprobs.new_tensor([bulist[i].lm_score for i in onbeam_ids]).unsqueeze(1) + torch.log(subprobs)",
                            "BinOp"
                        ],
                        [
                            "lm_cum_logprob.view(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_499": {
                "input": {
                    "value": "lm_cum_logprob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "subprobs.new_tensor([bulist[i].lm_score for i in onbeam_ids]).unsqueeze(1) + torch.log(subprobs)",
                            "BinOp"
                        ],
                        [
                            "lm_cum_logprob.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sim_cum_allbeam)",
                            "Call"
                        ],
                        [
                            "subprobs.new_tensor([bulist[i].lm_score for i in onbeam_ids]).unsqueeze(1) + torch.log(subprobs)",
                            "BinOp"
                        ],
                        [
                            "lm_cum_logprob.view(-1)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(sim_cum_allbeam)",
                            "Call"
                        ],
                        [
                            "subprobs.new_tensor([bulist[i].lm_score for i in onbeam_ids]).unsqueeze(1) + torch.log(subprobs)",
                            "BinOp"
                        ],
                        [
                            "lm_cum_logprob.view(-1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "uss/elmo_lstm_forward.py": {
        "torch": {
            "pad_packed_sequence_199": {
                "variable": {
                    "value": "(inputs, batch_lengths)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pad_packed_sequence(inputs, batch_first=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_137": {
                "variable": {
                    "value": "stacked_sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stacked_sequence_output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_157": {
                "variable": {
                    "value": "stacked_sequence_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[stacked_sequence_output, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_230": {
                "tensors": {
                    "value": "sequence_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_236": {
                "tensors": {
                    "value": "final_hidden_states",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_237": {
                "tensors": {
                    "value": "final_memory_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*final_states)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_144": {
                "tensors": {
                    "value": "[state, zeros]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uss/elmo_sequential_embedder.py": {
        "torch": {
            "cat_225": {
                "variable": {
                    "value": "activations",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ele.unsqueeze(1) for ele in activations_without_bos_eos]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_365": {
                "variable": {
                    "value": "full_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_423": {
                "variable": {
                    "value": "character_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_ids_with_bos_eos.view(-1, max_chars_per_token)",
                    "type": "Call",
                    "possible_values": []
                },
                "weight": {
                    "value": "self._char_embedding_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_438": {
                "variable": {
                    "value": "character_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "character_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.functional.embedding(character_ids_with_bos_eos.view(-1, max_chars_per_token), self._char_embedding_weights)",
                            "Call"
                        ],
                        [
                            "torch.transpose(character_embedding, 1, 2)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_449": {
                "variable": {
                    "value": "token_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "convs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "chunk_213": {
                "input": {
                    "value": "lstm_outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._elmo_lstm_forward(token_embedding, mask, initial_state)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "lstm_outputs.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_444": {
                "variable": {
                    "value": "(convolved, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "convolved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(character_embedding)",
                            "Call"
                        ],
                        [
                            "torch.max(convolved, dim=-1)",
                            "Call"
                        ],
                        [
                            "activation(convolved)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_120": {
                "variable": {
                    "value": "word_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "word_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[[self.vocab.index(w) for w in b] for b in batch]",
                            "ListComp"
                        ],
                        [
                            "[b + [0] * (max_timesteps - len(b)) if len(b) < max_timesteps else b for b in word_inputs]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(word_inputs, dtype=torch.long, device=self.cuda_device)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squeeze_317": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uss/gpt2_sequential_embedder.py": {
        "torch": {
            "tensor_133": {
                "variable": {
                    "value": "bpe_padded",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bpe_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[self.enc.encode(bos_sp + w) for w in words]",
                            "ListComp"
                        ],
                        [
                            "[b + [padding] * (max_seqlen - l) for (b, l) in zip(bpe_list, bpe_lens)]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_163": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "mid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(bpe_padded, past=past)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_164": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(mid, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.split(states, 1, dim=1)",
                            "Call"
                        ],
                        [
                            "[torch.chunk(s.index_select(3, torch.arange(past_seqlen + l, device=self.cuda_device)), 12, dim=0) for (s, l) in zip(states, bpe_lens)]",
                            "ListComp"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_148": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(bpe_padded, past=past)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(bpe_lens, device=self.cuda_device).reshape(n, 1, 1).expand(-1, -1, hid.size(2)) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "squeeze_148": {
                "variable": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_74": {
                "variable": {
                    "value": "bpe_units",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.enc.encode(bos_sp + w)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_78": {
                "variable": {
                    "value": "bpe_units",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[self.enc.encode(' ' + w)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_141": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_154": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_seqlen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(bpe_lens)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_155": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "bpe_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(b) for b in bpe_list]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_165": {
                "input": {
                    "value": "s.index_select(3, torch.arange(past_seqlen + l, device=self.cuda_device))",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "12",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[embeddings, vec]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_147": {
                "data": {
                    "value": "bpe_lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[len(b) for b in bpe_list]",
                            "ListComp"
                        ]
                    ]
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_147": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(words)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_39": {
                "data": {
                    "value": "[[self._bos_id]]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_165": {
                "start": {
                    "value": "past_seqlen + l",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "self.cuda_device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "uss/lm_subvocab.py": {
        "torch": {
            "softmax_40": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[-1].squeeze()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.squeeze(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "subprobs_sent",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(text) - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "len(subvocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "next(LMModel.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "nll_loss_181": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(subprobs_sent)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "textid_sub[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "LMModel.padid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_201": {
                "variable": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedmatrix[subvocab]",
                            "Subscript"
                        ],
                        [
                            "embedmatrix[subvocab]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedmatrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_204": {
                "variable": {
                    "value": "(maxsim, maxsim_ind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(submatrix, embedmatrix.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(submatrix.norm(2, 1), embedmatrix.norm(2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.mm(submatrix, embedmatrix.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(submatrix.norm(2, 1), embedmatrix.norm(2, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_207": {
                "variable": {
                    "value": "vocab_ind",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(embedmatrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "device": {
                    "value": "embedmatrix.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_208": {
                "variable": {
                    "value": "clustermask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(submatrix, embedmatrix.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(submatrix.norm(2, 1), embedmatrix.norm(2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.mm(submatrix, embedmatrix.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(submatrix.norm(2, 1), embedmatrix.norm(2, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "mm_232": {
                "variable": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "submatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedmatrix[subvocab]",
                            "Subscript"
                        ],
                        [
                            "embedmatrix[subvocab]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedmatrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_238": {
                "variable": {
                    "value": "subvocabmask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "clustermask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(sim_table, dtype=torch.uint8, device='cpu')",
                            "Call"
                        ],
                        [
                            "(sim_table > simthre).to('cpu')",
                            "Call"
                        ],
                        [
                            "(clustermask ^ subvocabmask) & clustermask",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_55": {
                "variable": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[subvocab]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_170": {
                "variable": {
                    "value": "ll",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.squeeze()[:-1, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "textid[1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "size_average": {
                    "value": "size_average",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "ignore_index": {
                    "value": "LMModel.padid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_51": {
                "variable": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "subscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores[subvocab]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_181": {
                "input": {
                    "value": "subprobs_sent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(len(text) - 1, len(subvocab), device=next(LMModel.parameters()).device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_128": {
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs[subvocab]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.softmax(subscores, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(subscores, dim=0)",
                            "Call"
                        ],
                        [
                            "subprobs / subprobs.sum()",
                            "BinOp"
                        ],
                        [
                            "subprobs / subprobs.sum()",
                            "BinOp"
                        ],
                        [
                            "probs[:, subvocab]",
                            "Subscript"
                        ],
                        [
                            "subprobs / torch.sum(subprobs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "subprobs / torch.sum(subprobs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "prob_next(LMModel, vocab, text[i], hn, subvocab, clustermask, onscore, renorm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ger_203": {
                "input": {
                    "value": "submatrix.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "embedmatrix.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ger_234": {
                "input": {
                    "value": "submatrix.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "embedmatrix.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_120": {
                "input": {
                    "value": "subprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "probs[subvocab]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.functional.softmax(subscores, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.nn.functional.softmax(subscores, dim=0)",
                            "Call"
                        ],
                        [
                            "subprobs / subprobs.sum()",
                            "BinOp"
                        ],
                        [
                            "subprobs / subprobs.sum()",
                            "BinOp"
                        ],
                        [
                            "probs[:, subvocab]",
                            "Subscript"
                        ],
                        [
                            "subprobs / torch.sum(subprobs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "subprobs / torch.sum(subprobs, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "prob_next(LMModel, vocab, text[i], hn, subvocab, clustermask, onscore, renorm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "uss/pre_closetables.py": {
        "torch": {
            "cat_20": {
                "variable": {
                    "value": "embedmatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "vocab_vecs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(*ee.embed_sentences([[w] for w in itos], add_bos=True, batch_size=1024))",
                            "Call"
                        ],
                        [
                            "[pickElmoForwardLayer(vec, 'bot') for vec in vocab_vecs]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "load_91": {
                "variable": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../LSTM_MoS/models/LMModelMoSTle2.pth'",
                            "str"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device('cpu')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_47": {
                "variable": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedmatrix_chunk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedmatrix[start:start + chunk_size, :]",
                            "Subscript"
                        ]
                    ]
                },
                "mat2": {
                    "value": "embedmatrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_52": {
                "tensors": {
                    "value": "[values, values_chunk]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "[indices, indices_chunk]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_91": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ger_49": {
                "input": {
                    "value": "embedmatrix_chunk.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "embedmatrix.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "uss/pre_word_list.py": {
        "torch": {
            "zeros_49": {
                "variable": {
                    "value": "subvocab_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "subvocab.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_51": {
                "variable": {
                    "value": "subvocab_embed_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "subvocab.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_59": {
                "variable": {
                    "value": "subvocab_screened",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "subvocab.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "subvocab_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "subvocab.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_99": {
                "variable": {
                    "value": "subvocab_embed_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.uint8",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "subvocab.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_107": {
                "variable": {
                    "value": "subvocab_screened",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "len(vocab)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "subvocab.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "subvocab",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[subvocab, torch.LongTensor([vocab.stoi['<eos>']])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "uss/sim_embed_score.py": {
        "torch": {
            "mean_26": {
                "variable": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "embedding[2]",
                            "Subscript"
                        ],
                        [
                            "embedding[1]",
                            "Subscript"
                        ],
                        [
                            "embedding[0]",
                            "Subscript"
                        ],
                        [
                            "np.average(embedding, axis=0)",
                            "Call"
                        ],
                        [
                            "torch.mean(embedding, dim=0)",
                            "Call"
                        ],
                        [
                            "np.reshape(embedding.transpose(1, 0, 2), (-1, embedding.shape[0] * embedding.shape[2]))",
                            "Call"
                        ],
                        [
                            "embedding.transpose(0, 1).reshape(-1, embedding.size(0) * embedding.size(2))",
                            "Call"
                        ],
                        [
                            "embedding",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uss/sim_token_match.py": {
        "torch": {
            "mm_49": {
                "variable": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src[starting_loc + 1:]",
                            "Subscript"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "token_matrix.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "(similarities, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(src, token_matrix.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(src.norm(2, 1), token_matrix.norm(2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.mm(src, tgt.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(src.norm(2, 1), tgt.norm(2, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_85": {
                "variable": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": [
                        [
                            "src[starting_loc + 1:]",
                            "Subscript"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ],
                        [
                            "src",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "tgt.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.max(sim_table, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(max_sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_44": {
                "variable": {
                    "value": "token_matrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "token_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "token_list",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_108": {
                "variable": {
                    "value": "max_sim",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "max_sim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.max(sim_table, dim=0)",
                            "Call"
                        ],
                        [
                            "torch.cat(max_sim)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_109": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "indices[1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_111": {
                "variable": {
                    "value": "(max_sim, indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_table",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(src, token_matrix.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(src.norm(2, 1), token_matrix.norm(2, 1))",
                            "BinOp"
                        ],
                        [
                            "torch.mm(src, tgt.t())",
                            "Call"
                        ],
                        [
                            "sim_table / torch.ger(src.norm(2, 1), tgt.norm(2, 1))",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ger_52": {
                "input": {
                    "value": "src.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "token_matrix.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ger_87": {
                "input": {
                    "value": "src.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "tgt.norm(2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_95": {
                "variable": {
                    "value": "(mi, ii)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_table[indices[i - 1]:, i - 1].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_105": {
                "variable": {
                    "value": "(mi, ii)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "sim_table[indices[i - 1] + 1:, i - 1].unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uss/summary_search_elmo.py": {
        "torch": {
            "load_383": {
                "variable": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./lm_lstm_models/sentence_compression/sctgt_LSTM_1024_untied.pth'",
                            "str"
                        ],
                        [
                            "args.model",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_481": {
                "variable": {
                    "value": "template_vec",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[template_vec, eosavg]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_383": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu' if devid == -1 else f'cuda:{devid}'",
                            "IfExp"
                        ],
                        [
                            "'cpu' if devid == -1 else f'cuda:{devid}'",
                            "IfExp"
                        ]
                    ]
                }
            },
            "cat_476": {
                "tensors": {
                    "value": "[template_vec, current_embed]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "uss/summary_search_gpt2.py": {
        "torch": {
            "load_365": {
                "variable": {
                    "value": "LMModel",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'../LM/LSTM/models/Tle_LSTM_untied.pth'",
                            "str"
                        ],
                        [
                            "args.model",
                            "Attribute"
                        ]
                    ]
                },
                "map_location": {
                    "value": "torch.device(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "device_365": {
                "type": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cpu' if devid == -1 else f'cuda:{devid}'",
                            "IfExp"
                        ],
                        [
                            "'cpu' if devid == -1 else f'cuda:{devid}'",
                            "IfExp"
                        ]
                    ]
                }
            }
        }
    }
}